"""
SandboxBridge allows for registering Qt window types with Sandbox from Python.

Copyright 2001-2016 Crytek GmbH / Crytek Group. All rights reserved.
"""
import os
import sys
import imp
from PySide2 import QtWidgets

bridge_path = os.path.join(os.path.dirname(sys.executable), "EditorPlugins", "SandboxPythonBridge.dll")
bridge_plugin = imp.load_dynamic("SandboxPythonBridge", bridge_path)


def register_window(window_type, name, category="", needs_menu_item=True, menu_path="", unique=True):
    """
    Register a new window type with the Sandbox.
    This should only be called once per window type, when your python plugin is initialized.

    :param class window_type: The class of your window. This must be a subclass of QWidget.
    :param str name: The name of your window.
    :param str category: The category of your window.
    :param bool needs_menu_item: If true, the window will be displayed in the "tools" submenu of the sandbox filemenu.
    :param str menu_path: The path (within the tools menu) to display your tool's menu item. Nested menus can be decalred with forward slahes.
    :param bool unique: If true, only one instance of your menu can be displayed at a time. Otherwise, multiple may be opened simultaneously.
    :rtype: None
    """

    # Verify types
    if not issubclass(window_type, QtWidgets.QWidget):
        raise TypeError("window_type must be a QWidget type")

    if not isinstance(name, basestring):
        raise TypeError("name must be a string")

    if not isinstance(category, basestring):
        raise TypeError("category must be a string")

    if not isinstance(needs_menu_item, bool):
        raise TypeError("needs_menu_item must be a bool")

    if not isinstance(menu_path, basestring):
        raise TypeError("menu_path must be a string")

    if not isinstance(unique, bool):
        raise TypeError("unique must be a bool")

    bridge_plugin.register_window(window_type, name, category, needs_menu_item, menu_path, unique)

