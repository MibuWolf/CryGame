<BehaviorTree>

	<!--
	=============================================================================================================================================
	SDK_Grunt_05.xml

	Behavior tree that builds on top of the SDK_Grunt_04.xml.

	Additions / changes:
		- when entering combat, AIs now give the user a small reaction time (1-2 seconds) before starting to actually shoot at him while already moving to a good combat position
		  (this is to showcase a prime example of parallel behaviors)
		- scripted sequences via Flow Graphs are now supported
			~ scripted sequences can be either interruptible or non-interruptible (this can be specified in the "AISequence:Start" nodes inside the Flow Graph editor)
			~ notice the places in the behavior tree where the interruptible and non-interruptible sequences are placed
	=============================================================================================================================================
	-->

	<Variables>
		<Variable name="HasTarget"/>
		<Variable name="ExecuteSequence"/>
		<Variable name="ExecuteInterruptibleSequence"/>
	</Variables>

	<SignalVariables>
		<Signal name="OnNewAttentionTarget" variable="HasTarget" value="true"/>
		<Signal name="OnNoTarget" variable="HasTarget" value="false"/>
	</SignalVariables>

	<Timestamps>
		<Timestamp name="TargetSpotted" setOnEvent="OnEnemySeen" exclusiveTo="TargetLost"/>
		<Timestamp name="TargetLost" setOnEvent="OnLostSightOfTarget" exlusiveTo="TargetSpotted"/>
		<Timestamp name="GroupTargetSpotted" setOnEvent="OnGroupTargetVisual" exclusiveTo="GroupTargetLost"/>
		<Timestamp name="GroupTargetLost" setOnEvent="OnGroupTargetMemory" exclusiveTo="GroupTargetSpotted"/>
		<Timestamp name="EnteredCombat" setOnEvent="EnteredCombat"/>
	</Timestamps>

	<Root>

		<Priority>

			<!--
			=================================================
					- Scripted non-interruptible behavior (via Flow Graph)
					- this node has highest priority in the BT, so no other behavior can interrupt it
					- make sure to call the "ExecuteSequence" lua behavior here (and not ExecuteInterruptibleSequence)
			=================================================
			-->

			<Case condition="ExecuteSequence">

				<Sequence>

					<LuaBehavior name="ExecuteSequence"/>

				</Sequence>

			</Case>

			<!--
			=================================================
					Autonomous behavior
			=================================================
			-->

			<Case>

				<StateMachine>

					<!--
					=================================================
							Idle
					=================================================
					-->

					<State name="Idle">

						<Transitions>
							<Transition to="Combat" onEvent="OnEnemySeen"/>
							<Transition to="Combat" onEvent="GroupMemberEnteredCombat"/>
						</Transitions>

						<BehaviorTree>

							<Sequence>

								<SetAlertness value="0"/>

								<Stance name="Relaxed"/>

								<SuppressFailure>

									<LuaGate code="return entity.PropertiesInstance.AI.bGoBackToStartOnIdle">

										<Move to="InitialPosition" speed="Walk" stance="Relaxed" _startLog="moving back to initial position"/>

									</LuaGate>

								</SuppressFailure>

								<ExecuteLua code="entity.actor:HolsterItem(true)"/>

								<Priority>

									<!--
									=================================================
											- Interruptible scripted behavior
											- this node can be easily interrupted by higher-prioritized behaviors
											- make sure to call the "ExecuteInterruptibleSequence" lua behavior here (and not ExecuteSequence)
									=================================================
									-->

									<Case condition="ExecuteInterruptibleSequence">

										<LuaBehavior name="ExecuteInterruptibleSequence"/>

									</Case>

									<Case>

										<Sequence>

											<!-- ensure that we also move back to our initial position after an interruptible sequence was played back -->
											<SuppressFailure>

												<LuaGate code="return entity.PropertiesInstance.AI.bGoBackToStartOnIdle">

													<Move to="InitialPosition" speed="Walk" stance="Relaxed" _startLog="moving back to initial position"/>

												</LuaGate>

											</SuppressFailure>

											<Animate name="ZZ_AI_idleBreak" loop="1"/>

										</Sequence>

									</Case>

								</Priority>

							</Sequence>

						</BehaviorTree>

					</State>

					<!--
					=================================================
							Combat
					=================================================
					-->

					<State name="Combat">

						<Transitions>
							<Transition to="ApproachAndInspectLastKnownPlayerPosition" onEvent="GoTo_ApproachAndInspectLastKnownPlayerPosition"/>
						</Transitions>

						<BehaviorTree>

							<Sequence>

								<Log message="Now I should fight you!"/>

								<SetAlertness value="2"/>

								<Stance name="Alerted"/>

								<ExecuteLua code="entity:SelectPrimaryWeapon()"/>

								<Communicate name="TargetSpottedWhileSearching" channel="Reaction" expirity="1.0" waitUntilFinished="0" />

								<Signal name="EnteredCombat"/>

								<Signal name="GroupMemberEnteredCombat" filter="Group"/>

								<!--
								=================================================
										main combat loop
								=================================================
								-->
								<Loop _startLog="main combat loop">

									<Sequence>

										<Selector>

											<!--
											=================================================
													cover combat
											=================================================
											-->

											<Sequence>

												<Selector>

													<AssertLua code="return (AI.IsInCover(entity.id) and not AI.IsCoverCompromised(entity.id)) "/>

													<Sequence>

														<Log message="trying to find cover"/>

														<QueryTPS name="SDKGrunt_CoverToShootFrom" register="Cover"/>

														<Log message="moving to found cover"/>

														<!-- move to cover; while doing so, start shooting after a small random time of 1-2seconds -->
														<Parallel successMode="any">

															<Move to="Cover" speed="Run" stance="Stand" fireMode="Off" avoidDangers="1"/>

															<Sequence>

																<!-- wait between 1 and 2 seconds before shooting -->
																<SuppressFailure>

																	<IfTime since="EnteredCombat" isLessThan="2.0">

																		<Sequence>

																			<WaitUntilTime since="EnteredCombat" isMoreThan="1.0"/>

																			<Wait duration="0.0" variation="1.0"/>

																		</Sequence>

																	</IfTime>

																</SuppressFailure>

																<Shoot at="Target" fireMode="Burst" stance="Alerted" duration="999"/>

															</Sequence>

														</Parallel>

													</Sequence>

												</Selector>

												<Log message="+++ shooting from cover BEGIN +++"/>

												<ShootFromCover duration="2.0" fireMode="Burst" aimObstructedTimeout="1.0"/>

												<Log message="--- shooting from cover END ---"/>

												<AdjustCoverStance duration="3.0" />

											</Sequence>

											<!--
											=================================================
													open combat
											=================================================
											-->

											<Sequence>

												<Log message="open combat"/>

												<SuppressFailure>

													<Sequence>

														<QueryTPS name="SDKGrunt_OpenCombat" register="RefPoint"/>

														<!-- move to the queried combat position; while doing so, start shooting after a small random time of 1-2seconds -->
														<Parallel successMode="any">

															<Move to="RefPoint" speed="Run" stance="Stand" fireMode="Off"/>

															<Sequence>

																<!-- wait between 1 and 2 seconds before shooting -->
																<SuppressFailure>

																	<IfTime since="EnteredCombat" isLessThan="2.0">

																		<Sequence>

																			<WaitUntilTime since="EnteredCombat" isMoreThan="1.0"/>

																			<Wait duration="0.0" variation="1.0"/>

																		</Sequence>

																	</IfTime>

																</SuppressFailure>

																<Shoot at="Target" fireMode="Burst" stance="Alerted" duration="999"/>

															</Sequence>

														</Parallel>

													</Sequence>

												</SuppressFailure>

												<Shoot at="Target" fireMode="Burst" stance="Stand" duration="2.0" _startLog="starting to shoot"/>

											</Sequence>

										</Selector>

										<!-- transition to "ApproachAndInspectLastKnownPlayerPosition" after the target hasn't been seen for some seconds -->
										<SuppressFailure>

											<Selector>

												<LuaGate code="return AI.GetGroupOf(entity.id) == 0;">

													<IfTime since="TargetLost" isMoreThan="5">

														<SendTransitionSignal name="GoTo_ApproachAndInspectLastKnownPlayerPosition"/>

													</IfTime>

												</LuaGate>

												<LuaGate code="return AI.GetGroupOf(entity.id) ~= 0;">

													<IfTime since="GroupTargetLost" isMoreThan="5">

														<SendTransitionSignal name="GoTo_ApproachAndInspectLastKnownPlayerPosition"/>

													</IfTime>

												</LuaGate>

											</Selector>

										</SuppressFailure>

									</Sequence>

								</Loop>

							</Sequence>

						</BehaviorTree>

					</State>

					<!--
					=================================================
							ApproachAndInspectLastKnownPlayerPosition
					=================================================
					-->

					<State name="ApproachAndInspectLastKnownPlayerPosition">

						<Transitions>
							<Transition to="Idle" onEvent="GoTo_Idle"/>
							<Transition to="Combat" onEvent="OnEnemySeen"/>
							<Transition to="Combat" onEvent="OnGroupTargetVisual"/>
							<Transition to="Combat" onEvent="GroupMemberEnteredCombat"/>
						</Transitions>

						<BehaviorTree>

							<Sequence>

								<SuppressFailure>

									<Move to="Target" speed="Walk" stance="Alerted" fireMode="Off" avoidDangers="0" stopWithinDistance="1"/>

								</SuppressFailure>

								<Parallel successMode="any">

									<Animate name="AI_SearchLookAround" loop="1"/>

									<SuppressFailure>
										<Timeout duration="10"/>
									</SuppressFailure>

								</Parallel>

								<SendTransitionSignal name="GoTo_Idle"/>

							</Sequence>

						</BehaviorTree>

					</State>

				</StateMachine>

			</Case>

		</Priority>

	</Root>

</BehaviorTree>
