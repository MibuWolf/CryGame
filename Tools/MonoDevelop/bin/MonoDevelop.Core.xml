<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoDevelop.Core</name>
    </assembly>
    <members>
        <member name="P:MonoDevelop.Core.UserException.AlreadyReportedToUser">
            <summary>
            If true, it means that the error has already been reported to the user (for example, by showing a dialog), so it doesn't have to be reported again.
            </summary>
            <value><c>true</c> if already reported to user; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessService.GetDebugExecutionMode">
            <summary>
            Returns the debug execution mode set
            </summary>
            <remarks>The returned mode set can be used to run applications in debug mode</remarks>
        </member>
        <member name="M:MonoDevelop.Core.Execution.RemoteProcessObject.Dispose">
            <summary>
            Disposes the object, and kills the remote process if there are no more remote objects running on it
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.RemoteProcessObject.Shutdown">
            <summary>
            Shutdowns the remote process that is running this instance.
            </summary>
            <remarks>
            This method can only be used if the remote process is not shared with other objects.
            </remarks>
        </member>
        <member name="T:MonoDevelop.Core.Execution.IExecutionHandler">
            <summary>
            A handler that can execute commands of a specific type
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.IExecutionHandler.CanExecute(MonoDevelop.Core.Execution.ExecutionCommand)">
            <summary>
            Determines whether this instance can execute the specified command.
            </summary>
            <returns>
            <c>true</c> if this instance can execute the specified command; otherwise, <c>false</c>.
            </returns>
            <param name='command'>
            Command.
            </param>
        </member>
        <member name="M:MonoDevelop.Core.Execution.IExecutionHandler.Execute(MonoDevelop.Core.Execution.ExecutionCommand,MonoDevelop.Core.Execution.IConsole)">
            <summary>
            Executes the specified command
            </summary>
            <param name='command'>
            The command
            </param>
            <param name='console'>
            Console where to log the output
            </param>
        </member>
        <member name="T:MonoDevelop.Core.Execution.ITargetedExecutionHandler">
            <summary>
            An execution handler that executes on a particular execution target.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ITargetedExecutionHandler.Target">
            <summary>
            The execution target
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.FileService.IsFolderCaseSensitive(MonoDevelop.Core.FilePath)">
            <summary>
            Returns true if the folder is in a case sensitive file system
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.FileService.GetPhysicalFileName(MonoDevelop.Core.FilePath)">
            <summary>
            Gets the real name of a file. In case insensitive file systems the name may have a different case.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.FileService.RequestFileEdit(MonoDevelop.Core.FilePath,System.Boolean)">
            <summary>
            Requests permission for modifying a file
            </summary>
            <param name="fileName">The file to be modified</param>
            <param name="throwIfFails">If set to false, it will catch the exception that would've been thrown.</param>
            <remarks>This method must be called before trying to write any file. It throws an exception if permission is not granted.</remarks>
        </member>
        <member name="M:MonoDevelop.Core.FileService.RequestFileEdit(System.Collections.Generic.IEnumerable{MonoDevelop.Core.FilePath},System.Boolean)">
            <summary>
            Requests permission for modifying a set of files
            </summary>
            <param name="fileNames">Files</param>
            <remarks>This method must be called before trying to write any file. It throws an exception if permission is not granted.</remarks>
        </member>
        <member name="M:MonoDevelop.Core.FileService.SystemDirectoryRename(System.String,System.String)">
            <summary>
            Renames a directory
            </summary>
            <param name="sourceDir">Source directory</param>
            <param name="destDir">Destination directory</param>
            <remarks>
            It works like Directory.Move, but it supports changing the case of a directory name in case-insensitive file systems
            </remarks>
        </member>
        <member name="M:MonoDevelop.Core.FileService.RemoveDirectoryIfEmpty(System.String)">
            <summary>
            Removes the directory if it's empty.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.FileService.MakePathSeparatorsNative(System.String)">
            <summary>
            Makes the path separators native.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.PropertyWrapper`1">
            <summary>
            The Property wrapper wraps a global property service value as an easy to use object.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.PropertyWrapper`1.Set(`0)">
            <summary>
            Set the property to the specified value.
            </summary>
            <param name='newValue'>
            The new value.
            </param>
            <returns>
            true, if the property has changed, false otherwise.
            </returns>
        </member>
        <member name="P:MonoDevelop.Core.PropertyService.DataPath">
            <summary>
            Location of data files that are bundled with MonoDevelop itself.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.LoggingService.CreateLogFile(System.String)">
            <summary>
            Creates a session log file with the given identifier.
            </summary>
            <returns>A TextWriter, null if the file cannot be created.</returns>
        </member>
        <member name="M:MonoDevelop.Core.LoggingService.LogInternalError(System.Exception)">
            <summary>
            Reports that an unexpected error has occurred, but the IDE will continue executing.
            Error information is sent to the crash reporting service
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:MonoDevelop.Core.LoggingService.LogInternalError(System.String,System.Exception)">
            <summary>
            Reports that an unexpected error has occurred, but the IDE will continue executing.
            Error information is sent to the crash reporting service
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:MonoDevelop.Core.LoggingService.LogFatalError(System.String,System.Exception)">
            <summary>
            Reports that a fatal error has occurred, and that the IDE will shut down.
            Error information is sent to the crash reporting service
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Exception</param>
        </member>
        <member name="T:MonoDevelop.Core.Execution.IExecutionMode">
            <summary>
            A user visible mode for executing commands. It can be for example a specific debugger of profiler.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetExecutionHandler">
            <summary>
            Returns an IExecutionHandler which can be used to execute commands in this runtime.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetAssemblyDebugInfoFile(System.String)">
            <summary>
            Given an assembly file name, returns the corresponding debug information file name.
            (.mdb for Mono, .pdb for MS.NET)
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.ExecuteAssembly(System.String,System.String)">
            <summary>
            Executes an assembly using this runtime
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.ExecuteAssembly(System.String,System.String,MonoDevelop.Core.Assemblies.TargetFramework)">
            <summary>
            Executes an assembly using this runtime and the specified framework.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.ExecuteAssembly(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Executes an assembly using this runtime.
            </summary>
            <param name="pinfo">
            Information of the process to execute
            </param>
            <returns>
            The started process.
            </returns>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.ExecuteAssembly(System.Diagnostics.ProcessStartInfo,MonoDevelop.Core.Assemblies.TargetFramework)">
            <summary>
            Executes an assembly using this runtime and the specified framework.
            </summary>
            <param name="pinfo">
            Information of the process to execute
            </param>
            <param name="fx">
            Framework on which the assembly has to be executed.
            </param>
            <returns>
            The started process.
            </returns>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetToolsExecutionEnvironment(MonoDevelop.Core.Assemblies.TargetFramework)">
            <summary>
            Returns a list of environment variables that should be set when running tools using this runtime
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetToolPath(MonoDevelop.Core.Assemblies.TargetFramework,System.String)">
            <summary>
            Looks for the specified tool in this runtime. The name can be a script or a .exe.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetToolsPaths(MonoDevelop.Core.Assemblies.TargetFramework)">
            <summary>
            Returns a list of paths which can contain tools for this runtime.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetMSBuildBinPath(System.String)">
            <summary>
            Returns the MSBuild bin path for this runtime.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetMSBuildExtensionsPath">
            <summary>
            Returns the MSBuild extensions path.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetGacDirectories">
            <summary>
            Returns all GAC locations for this runtime.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.RegisterPackage(MonoDevelop.Core.Assemblies.SystemPackageInfo,System.String[])">
            <summary>
            Registers a package. It can be used by add-ins to register a package for a set of assemblies
            they provide.
            </summary>
            <param name="pinfo">
            Information about the package.
            </param>
            <param name="assemblyFiles">
            Assemblies that belong to the package
            </param>
            <returns>
            The registered package
            </returns>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.RegisterPackage(MonoDevelop.Core.Assemblies.SystemPackageInfo,System.Boolean,System.String[])">
            <summary>
            Registers a package.
            </summary>
            <param name="pinfo">
            Information about the package.
            </param>
            <param name="isInternal">
            Set to true if this package is provided by an add-in and is not installed in the system.
            </param>
            <param name="assemblyFiles">
            The assemblies of the package.
            </param>
            <returns>
            A <see cref="T:MonoDevelop.Core.Assemblies.SystemPackage"/>
            </returns>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.IsInstalled(MonoDevelop.Core.Assemblies.TargetFramework)">
            <summary>
            Checks if a framework is installed in this runtime.
            </summary>
            <param name="fx">
            The runtime to check.
            </param>
            <returns>
            True if the framework is installed
            </returns>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.DisplayName">
            <summary>
            Display name of the runtime. For example "The Mono Runtime 2.6"
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.Id">
            <summary>
            Unique identifier of this runtime. For example "Mono 2.6".
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.DisplayRuntimeName">
            <summary>
            Core display name of the runtime. For example "The Mono Runtime"
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.RuntimeId">
            <summary>
            Core identifier the runtime. For example, if there are several
            versions of Mono installed, each of them will have "Mono" as RuntimeId
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.Version">
            <summary>
            Version of the runtime.
            This string is strictly for displaying to the user or logging. It should never be used for version checks.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.IsRunning">
            <summary>
            Returns 'true' if this runtime is the one currently running MonoDevelop.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.AssemblyContext">
            <summary>
            Returns an IAssemblyContext which can be used to discover assemblies through this runtime.
            It includes assemblies from directories manually registered by the user.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.RuntimeAssemblyContext">
            <summary>
            Returns an IAssemblyContext which can be used to discover assemblies provided by this runtime
            </summary>
        </member>
        <member name="E:MonoDevelop.Core.Assemblies.TargetRuntime.Initialized">
            <summary>
            This event is fired when the runtime has finished initializing. Runtimes are initialized
            in a background thread, so they are not guaranteed to be ready just after the IDE has
            finished loading. If the runtime is already initialized when the event is subscribed, then the
            subscribed handler will be automatically invoked.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetFramework.CanReferenceAssembliesTargetingFramework(MonoDevelop.Core.Assemblies.TargetFramework)">
            <summary>
            Determines whether projects targeting this framework can reference assemblies targeting the framework specified by fx.
            </summary>
            <returns><c>true</c> if projects targeting this framework can reference assemblies targeting the framework specified by fx; otherwise, <c>false</c>.</returns>
            <param name="fx">The target framework</param>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.SystemAssemblyService.GetAssemblyReferences(System.String)">
            <summary>
            Simply get all assembly reference names from an assembly given it's file name.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.SystemAssemblyService.GetAssemblyManifestResources(System.String)">
            <summary>
            Simply get all assembly manifest resources from an assembly given it's file name.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.MonoRuntimeInfo.MonoVersion">
            <summary>
            This string is strictly for displaying to the user or logging. It should never be used for version checks.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Execution.IExecutionModeSet">
            <summary>
            A collection of exectution modes
            </summary>
            <remarks>
            For example, the mode set "Debug" provides several execution modes
            for all the supported debuggers
            </remarks>
        </member>
        <member name="P:MonoDevelop.Core.Execution.IExecutionModeSet.Name">
            <summary>
            Name of the execution mode set
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.IExecutionModeSet.ExecutionModes">
            <summary>
            Execution modes provided by this set
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Execution.ExecutionCommand">
            <summary>
            Set of parameters to be used to execute a file or project
            </summary>
            <remarks>
            This is the base class for types of commands that can be used
            to run a project or file. This class only contains the data
            required to run the project, but not the actual execution logic.
            The execution logic is provided by classes that implement
            IExecutionHandler. A project generates an ExecutionCommand
            instance, and a user can select a IExecutionHandler to
            run it.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionCommand.Target">
            <summary>
            Execution target. For example, a specific device.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Execution.LocalConsole">
            <summary>
            This is an implementation of the IConsole interface which allows reading
            the output generated from a process, and writing its input.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.LocalConsole.SetDone">
            <summary>
            Flushes and closes the readers and writers
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.LocalConsole.In">
            <summary>
            This writer can be used to provide the input of the console.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.LocalConsole.Out">
            <summary>
            Output of the process.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.LocalConsole.Error">
            <summary>
            Error log of the process
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.LocalConsole.Log">
            <summary>
            Log of the process
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoDevelop.Projects.SolutionItem"/> class.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.InitializeFromTemplate(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of this item, using an xml element as template
            </summary>
            <param name='template'>
            The template
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.SetItemHandler(MonoDevelop.Projects.Extensions.ISolutionItemHandler)">
            <summary>
            Sets the handler for this solution item
            </summary>
            <param name='handler'>
            A handler.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.GetService``1">
            <summary>
            Gets a service instance of a given type
            </summary>
            <returns>
            The service.
            </returns>
            <typeparam name='T'>
            Type of the service
            </typeparam>
            <remarks>
            This method looks for an imlpementation of a service of the given type.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.GetService(System.Type)">
            <summary>
            Gets a service instance of a given type
            </summary>
            <returns>
            The service.
            </returns>
            <param name='t'>
            Type of the service
            </param>
            <remarks>
            This method looks for an imlpementation of a service of the given type.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.Save(MonoDevelop.Core.IProgressMonitor)">
            <summary>
            Saves the solution item
            </summary>
            <param name='monitor'>
            A progress monitor.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.GetDefaultBaseDirectory">
            <summary>
            Gets the default base directory.
            </summary>
            <remarks>
            The base directory is the directory where files belonging to this project
            are placed. Notice that this directory may be different than the directory
            where the project file is placed.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.LoadUserProperties(MonoDevelop.Core.PropertyBag)">
            <summary>
            Initializes the user properties of the item
            </summary>
            <param name="properties">
            Properties to be set
            </param>
            <exception cref="T:System.InvalidOperationException">
            The user properties have already been set
            </exception>
            <remarks>
            This method is used by the IDE to initialize the user properties when a project is loaded.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:MonoDevelop.Projects.SolutionItem"/> object.
            </summary>
            <remarks>
            Call <see cref="M:MonoDevelop.Projects.SolutionItem.Dispose"/> when you are finished using the <see cref="T:MonoDevelop.Projects.SolutionItem"/>. The
            <see cref="M:MonoDevelop.Projects.SolutionItem.Dispose"/> method leaves the <see cref="T:MonoDevelop.Projects.SolutionItem"/> in an unusable state.
            After calling <see cref="M:MonoDevelop.Projects.SolutionItem.Dispose"/>, you must release all references to the
            <see cref="T:MonoDevelop.Projects.SolutionItem"/> so the garbage collector can reclaim the memory that the
            <see cref="T:MonoDevelop.Projects.SolutionItem"/> was occupying.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.GetReferencedItems(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets solution items referenced by this instance (items on which this item depends)
            </summary>
            <returns>
            The referenced items.
            </returns>
            <param name='configuration'>
            Configuration for which to get the referenced items
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.RunTarget(MonoDevelop.Core.IProgressMonitor,System.String,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Runs a build or execution target.
            </summary>
            <returns>
            The result of the operation
            </returns>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='target'>
            Name of the target
            </param>
            <param name='configuration'>
            Configuration to use to run the target
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.Clean(MonoDevelop.Core.IProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Cleans the files produced by this solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='configuration'>
            Configuration to use to clean the project
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.Build(MonoDevelop.Core.IProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Builds the solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='configuration'>
            Configuration to use to build the project
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.Build(MonoDevelop.Core.IProgressMonitor,MonoDevelop.Projects.ConfigurationSelector,System.Boolean)">
            <summary>
            Builds the solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='solutionConfiguration'>
            Configuration to use to build the project
            </param>
            <param name='buildReferences'>
            When set to <c>true</c>, the referenced items will be built before building this item
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.GetLastBuildTime(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the time of the last build
            </summary>
            <returns>
            The last build time.
            </returns>
            <param name='configuration'>
            Configuration for which to get the last build time.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.Execute(MonoDevelop.Core.IProgressMonitor,MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Executes this solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='context'>
            An execution context
            </param>
            <param name='configuration'>
            Configuration to use to execute the item
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.CanExecute(MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Determines whether this solution item can be executed using the specified context and configuration.
            </summary>
            <returns>
            <c>true</c> if this instance can be executed; otherwise, <c>false</c>.
            </returns>
            <param name='context'>
            An execution context
            </param>
            <param name='configuration'>
            Configuration to use to execute the item
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.GetExecutionTargets(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the execution targets.
            </summary>
            <returns>The execution targets.</returns>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.NeedsBuilding(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Checks if this solution item has modified files and has to be built
            </summary>
            <returns>
            <c>true</c> if the solution item has to be built
            </returns>
            <param name='configuration'>
            Configuration for which to do the check
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.SetNeedsBuilding(System.Boolean,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            States whether this solution item needs to be built or not
            </summary>
            <param name='value'>
            Whether this solution item needs to be built or not
            </param>
            <param name='configuration'>
            Configuration for which to set the flag
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.RegisterInternalChild(MonoDevelop.Projects.SolutionItem)">
            <summary>
            Registers an internal child item.
            </summary>
            <param name='item'>
            An item
            </param>
            <remarks>
            Some kind of projects may be composed of several child projects.
            By registering those child projects using this method, the child
            projects will be plugged into the parent solution infrastructure
            (so for example, the ParentSolution property for those projects
            will return the correct value)
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.UnregisterInternalChild(MonoDevelop.Projects.SolutionItem)">
            <summary>
            Unregisters an internal child item.
            </summary>
            <param name='item'>
            The item
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.GetStringTagModelDescription(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the string tag model description for this solution item
            </summary>
            <returns>
            The string tag model description
            </returns>
            <param name='conf'>
            Configuration for which to get the string tag model description
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.GetStringTagModel(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the string tag model for this solution item
            </summary>
            <returns>
            The string tag model
            </returns>
            <param name='conf'>
            Configuration for which to get the string tag model
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.TopologicalSort``1(System.Collections.Generic.IEnumerable{``0},MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Sorts a collection of solution items, taking into account the dependencies between them
            </summary>
            <returns>
            The sorted collection of items
            </returns>
            <param name='items'>
            Items to sort
            </param>
            <param name='configuration'>
            A configuration
            </param>
            <remarks>
            This methods sorts a collection of items, ensuring that every item is placed after all the items
            on which it depends.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnBeginLoad">
            <summary>
            Called when a load operation for this solution item has started
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnEndLoad">
            <summary>
            Called when a load operation for this solution item has finished
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.NotifyModified(System.String)">
            <summary>
            Notifies that this solution item has been modified
            </summary>
            <param name='hint'>
            Hint about which part of the solution item has been modified. This will typically be the property name.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnModified(MonoDevelop.Projects.SolutionItemModifiedEventArgs)">
            <summary>
            Raises the modified event.
            </summary>
            <param name='args'>
            Arguments.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnNameChanged(MonoDevelop.Projects.SolutionItemRenamedEventArgs)">
            <summary>
            Raises the name changed event.
            </summary>
            <param name='e'>
            Arguments.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.InitializeItemHandler">
            <summary>
            Initializes the item handler.
            </summary>
            <remarks>
            This method is called the first time an item handler is requested.
            Subclasses should override this method use SetItemHandler to
            assign a handler to this item.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnRunTarget(MonoDevelop.Core.IProgressMonitor,System.String,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Runs a build or execution target.
            </summary>
            <returns>
            The result of the operation
            </returns>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='target'>
            Name of the target
            </param>
            <param name='configuration'>
            Configuration to use to run the target
            </param>
            <remarks>
            Subclasses can override this method to provide a custom implementation of project operations such as
            build or clean. The default implementation delegates the execution to the more specific OnBuild
            and OnClean methods, or to the item handler for other targets.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnClean(MonoDevelop.Core.IProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Cleans the files produced by this solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='configuration'>
            Configuration to use to clean the project
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnBuild(MonoDevelop.Core.IProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Builds the solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='configuration'>
            Configuration to use to build the project
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnExecute(MonoDevelop.Core.IProgressMonitor,MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Executes this solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='context'>
            An execution context
            </param>
            <param name='configuration'>
            Configuration to use to execute the item
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnGetNeedsBuilding(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Checks if this solution item has modified files and has to be built
            </summary>
            <returns>
            <c>true</c> if the solution item has to be built
            </returns>
            <param name='configuration'>
            Configuration for which to do the check
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnSetNeedsBuilding(System.Boolean,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            States whether this solution item needs to be built or not
            </summary>
            <param name='val'>
            Whether this solution item needs to be built or not
            </param>
            <param name='configuration'>
            Configuration for which to set the flag
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnGetLastBuildTime(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the time of the last build
            </summary>
            <returns>
            The last build time.
            </returns>
            <param name='configuration'>
            Configuration for which to get the last build time.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnGetCanExecute(MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Determines whether this solution item can be executed using the specified context and configuration.
            </summary>
            <returns>
            <c>true</c> if this instance can be executed; otherwise, <c>false</c>.
            </returns>
            <param name='context'>
            An execution context
            </param>
            <param name='configuration'>
            Configuration to use to execute the item
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnBoundToSolution">
            <summary>
            Called just after this item is bound to a solution
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnUnboundFromSolution">
            <summary>
            Called just before this item is removed from a solution (ParentSolution is still valid when this method is called)
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.ItemHandler">
            <summary>
            Gets the handler for this solution item
            </summary>
            <value>
            The solution item handler.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Is thrown if there isn't a ISolutionItemHandler for this solution item
            </exception>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.AuthorInformation">
            <summary>
            Gets the author information for this solution item, inherited from the solution and global settings.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.ParentSolution">
            <summary>
            Gets the solution to which this item belongs
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.Loading">
            <summary>
            Gets a value indicating whether this item is currently being loaded from a file
            </summary>
            <remarks>
            While an item is loading, some events such as project file change events may be fired.
            This flag can be used to check if change events are caused by data being loaded.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.Name">
            <summary>
            Name of the solution item
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.BaseDirectory">
            <summary>
            Gets or sets the base directory of this solution item
            </summary>
            <value>
            The base directory.
            </value>
            <remarks>
            The base directory is the directory where files belonging to this project
            are placed. Notice that this directory may be different than the directory
            where the project file is placed.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.ItemDirectory">
            <summary>
            Gets the directory where this solution item is placed
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.ItemId">
            <summary>
            Gets the identifier of this solution item
            </summary>
            <remarks>
            The identifier is unique inside the solution
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.ExtendedProperties">
            <summary>
            Gets extended properties.
            </summary>
            <remarks>
            This dictionary can be used by add-ins to store arbitrary information about this solution item.
            Keys and values can be of any type.
            If a value implements IDisposable, the value will be disposed when this solution item is disposed.
            Values in this dictionary won't be serialized, unless they are registered as serializable using
            the /MonoDevelop/ProjectModel/ExtendedProperties extension point.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.Policies">
            <summary>
            Gets policies.
            </summary>
            <remarks>
            Returns a policy container which can be used to query policies specific for this
            solution item. If a policy is not defined for this item, the inherited value will be returned.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.UserProperties">
            <summary>
            Gets solution item properties specific to the current user
            </summary>
            <remarks>
            These properties are not stored in the project file, but in a separate file which is not to be shared
            with other users.
            User properties are only loaded when the project is loaded inside the IDE.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.ParentFolder">
            <summary>
            Gets the parent solution folder.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.Disposed">
            <summary>
            Gets a value indicating whether this <see cref="T:MonoDevelop.Projects.SolutionItem"/> has been disposed.
            </summary>
            <value>
            <c>true</c> if disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.NeedsReload">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoDevelop.Projects.SolutionItem"/> needs to be reload due to changes in project or solution file
            </summary>
            <value>
            <c>true</c> if needs reload; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:MonoDevelop.Projects.SolutionItem.NameChanged">
            <summary>
            Occurs when the name of the item changes
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.SolutionItem.Modified">
            <summary>
            Occurs when the item is modified.
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.SolutionItem.Disposing">
            <summary>
            Occurs when the object is being disposed
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionEntityItem.ItemDependencies">
            <summary>
            Projects that need to be built before building this one
            </summary>
            <value>The dependencies.</value>
        </member>
        <member name="M:MonoDevelop.Core.StringParsing.IStringTagProvider.GetTags(System.Type)">
            <summary>
            Returns a list of tags that this provider can extract from objects
            of the provided type. If the provided type can be null, in which
            case it must return global tags (that is, tags which are not attached
            to a particular object).
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.StringParsing.IStringTagProvider.GetTagValue(System.Object,System.String)">
            <summary>
            Returns the value of a tag. The instance is an object of a type supported
            by the provider, that is, the GetTags method returned tags for the object type.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItemChangeEventArgs.ReplacedItem">
            <summary>
            When Reloading is true, it returns the original solution item that is being reloaded
            </summary>
            <value>The replaced item.</value>
        </member>
        <member name="M:MonoDevelop.Projects.IProjectBinding.CreateProject(MonoDevelop.Projects.ProjectCreateInformation,System.Xml.XmlElement)">
            <remarks>
            Creates a Project out of the given ProjetCreateInformation object.
            Each project binding must provide a representation of the project
            it 'controls'.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.IProjectBinding.CreateSingleFileProject(System.String)">
            <remarks>
            Creates a Project for a single source file. If the file is not
            valid for this project type, it must return null.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.IProjectBinding.Name">
            <remarks>
            Returns the project type name
            </remarks>
        </member>
        <member name="T:MonoDevelop.Projects.ConfigurationParameters">
            <summary>This should really be called DotNetCompilerParameters</summary>
        </member>
        <member name="T:MonoDevelop.Projects.Project">
            <summary>
            A project
            </summary>
            <remarks>
            This is the base class for MonoDevelop projects. A project is a solution item which has a list of
            source code files and which can be built to generate an output.
            </remarks>
        </member>
        <member name="F:MonoDevelop.Projects.Project.description">
            <summary>
            Description of the project.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.IsCompileable(System.String)">
            <summary>
            Determines whether the provided file can be as part of this project
            </summary>
            <returns>
            <c>true</c> if the file can be compiled; otherwise, <c>false</c>.
            </returns>
            <param name='fileName'>
            File name
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetProjectTypes">
            <summary>
            Gets the project type and its base types.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetDefaultBuildAction(System.String)">
            <summary>
            Gets the default build action for a file
            </summary>
            <returns>
            The default build action.
            </returns>
            <param name='fileName'>
            File name.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetProjectFile(System.String)">
            <summary>
            Gets a project file.
            </summary>
            <returns>
            The project file.
            </returns>
            <param name='fileName'>
            File name.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.IsFileInProject(System.String)">
            <summary>
            Determines whether a file belongs to this project
            </summary>
            <param name='fileName'>
            File name
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetBuildActions">
            <summary>
            Gets a list of build actions supported by this project
            </summary>
            <remarks>
            Common actions are grouped at the top, separated by a "--" entry *IF* there are 
            more "uncommon" actions than "common" actions
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetStandardBuildActions">
            <summary>
            Gets a list of standard build actions.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetCommonBuildActions">
            <summary>
            Gets a list of common build actions (common actions are shown first in the project build action list)
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.AddFile(System.String)">
            <summary>
            Adds a file to the project
            </summary>
            <returns>
            The file instance.
            </returns>
            <param name='filename'>
            Absolute path to the file.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.AddFile(System.String,System.String)">
            <summary>
            Adds a file to the project
            </summary>
            <returns>
            The file instance.
            </returns>
            <param name='filename'>
            Absolute path to the file.
            </param>
            <param name='buildAction'>
            Build action to assign to the file.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.AddFile(MonoDevelop.Projects.ProjectFile)">
            <summary>
            Adds a file to the project
            </summary>
            <param name='projectFile'>
            The file.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.AddDirectory(System.String)">
            <summary>
            Adds a directory to the project.
            </summary>
            <returns>
            The directory instance.
            </returns>
            <param name='relativePath'>
            Relative path of the directory.
            </param>
            <remarks>
            The directory is created if it doesn't exist
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.CopySupportFiles(MonoDevelop.Core.IProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Copies the support files to the output directory
            </summary>
            <param name='monitor'>
            Progress monitor.
            </param>
            <param name='configuration'>
            Configuration for which to copy the files.
            </param>
            <remarks>
            Copies all support files to the output directory of the given configuration. Support files
            include: assembly references with the Local Copy flag, data files with the Copy to Output option, etc.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.DeleteSupportFiles(MonoDevelop.Core.IProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Removes all support files from the output directory
            </summary>
            <param name='monitor'>
            Progress monitor.
            </param>
            <param name='configuration'>
            Configuration for which to delete the files.
            </param>
            <remarks>
            Deletes all support files from the output directory of the given configuration. Support files
            include: assembly references with the Local Copy flag, data files with the Copy to Output option, etc.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetSupportFileList(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets a list of files required to use the project output
            </summary>
            <returns>
            A list of files.
            </returns>
            <param name='configuration'>
            Build configuration for which get the list
            </param>
            <remarks>
            Returns a list of all files that are required to use the project output binary, for example: data files with
            the Copy to Output option, debug information files, generated resource files, etc.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.PopulateSupportFileList(MonoDevelop.Projects.FileCopySet,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets a list of files required to use the project output
            </summary>
            <param name='list'>
            List where to add the support files.
            </param>
            <param name='configuration'>
            Build configuration for which get the list
            </param>
            <remarks>
            Returns a list of all files that are required to use the project output binary, for example: data files with
            the Copy to Output option, debug information files, generated resource files, etc.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetOutputFiles(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets a list of files generated when building this project
            </summary>
            <returns>
            A list of files.
            </returns>
            <param name='configuration'>
            Build configuration for which get the list
            </param>
            <remarks>
            Returns a list of all files that are generated when this project is built, including: the generated binary,
            debug information files, satellite assemblies.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.PopulateOutputFileList(System.Collections.Generic.List{MonoDevelop.Core.FilePath},MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets a list of files retuired to use the project output
            </summary>
            <param name='list'>
            List where to add the support files.
            </param>
            <param name='configuration'>
            Build configuration for which get the list
            </param>
            <remarks>
            Returns a list of all files that are required to use the project output binary, for example: data files with
            the Copy to Output option, debug information files, generated resource files, etc.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.DoBuild(MonoDevelop.Core.IProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Builds the project.
            </summary>
            <returns>
            The build result.
            </returns>
            <param name='monitor'>
            Progress monitor.
            </param>
            <param name='configuration'>
            Configuration to build.
            </param>
            <remarks>
            This method is invoked to build the project. Support files such as files with the Copy to Output flag will
            be copied before calling this method.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.DoExecute(MonoDevelop.Core.IProgressMonitor,MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Executes the project
            </summary>
            <param name='monitor'>
            Progress monitor.
            </param>
            <param name='context'>
            Execution context.
            </param>
            <param name='configuration'>
            Configuration to execute.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetOutputFileName(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the absolute path to the output file generated by this project.
            </summary>
            <returns>
            Absolute path the the output file.
            </returns>
            <param name='configuration'>
            Build configuration.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.CheckNeedsBuild(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Checks if the project needs to be built
            </summary>
            <returns>
            <c>True</c> if the project needs to be built (it has changes)
            </returns>
            <param name='configuration'>
            Build configuration.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnFileRemovedFromProject(MonoDevelop.Projects.ProjectFileEventArgs)">
            <summary>
            Raises the FileRemovedFromProject event.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnFileAddedToProject(MonoDevelop.Projects.ProjectFileEventArgs)">
            <summary>
            Raises the FileAddedToProject event.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnFileChangedInProject(MonoDevelop.Projects.ProjectFileEventArgs)">
            <summary>
            Raises the FileChangedInProject event.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnFilePropertyChangedInProject(MonoDevelop.Projects.ProjectFileEventArgs)">
            <summary>
            Raises the FilePropertyChangedInProject event.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnFileRenamedInProject(MonoDevelop.Projects.ProjectFileRenamedEventArgs)">
            <summary>
            Raises the FileRenamedInProject event.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Project.Files">
            <summary>
            Files of the project
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Project.ProjectType">
            <summary>
            Gets the type of the project.
            </summary>
            <value>
            The type of the project.
            </value>
        </member>
        <member name="P:MonoDevelop.Projects.Project.StockIcon">
            <summary>
            Gets or sets the icon of the project.
            </summary>
            <value>
            The stock icon.
            </value>
        </member>
        <member name="P:MonoDevelop.Projects.Project.SupportedLanguages">
            <summary>
            List of languages that this project supports
            </summary>
            <value>
            The identifiers of the supported languages.
            </value>
        </member>
        <member name="E:MonoDevelop.Projects.Project.FileRemovedFromProject">
            <summary>
            Occurs when a file is removed from this project.
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.Project.FileAddedToProject">
            <summary>
            Occurs when a file is added to this project.
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.Project.FileChangedInProject">
            <summary>
            Occurs when a file of this project has been modified
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.Project.FilePropertyChangedInProject">
            <summary>
            Occurs when a property of a file of this project has changed
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.Project.FileRenamedInProject">
            <summary>
            Occurs when a file of this project has been renamed
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.ProjectFile">
            <summary>
            This class represent a file information in an IProject object.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.IsOriginatedFromWildcard">
            <summary>
            Set to true if this ProjectFile was created at load time by
            a ProjectFile containing wildcards.  If true, this instance
            should not be saved to a csproj file.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.ProjectVirtualPath">
            <summary>
            The file should be treated as effectively having this relative path within the project. If the file is
            a link or outside the project root, this will not be the same as the physical file.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.Visible">
            <summary>
            Whether the file should be shown to the user.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.Generator">
            <summary>
            The ID of a custom code generator.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.CustomToolNamespace">
            <summary>
            Overrides the namespace in which the custom code generator should generate code.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.LastGenOutput">
            <summary>
            The file most recently generated by the custom tool. Relative to this file's parent directory.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.Link">
            <summary>
            If the file's real path is outside the project root, this value can be used to set its virtual path
            within the project root. Use ProjectVirtualPath to read the effective virtual path for any file.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.IsLink">
            <summary>
            Whether the file is a link.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.IsExternalToProject">
            <summary>
            Whether the file is outside the project base directory.
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.ProjectReference">
            <summary>
            This class represent a reference information in an Project object.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ProjectReference.GetReferencedFileName(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Returns the file name to an assembly, regardless of what 
            type the assembly is.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ProjectReference.ResolveProject(MonoDevelop.Projects.Solution)">
            <summary>
            Resolves a project for a ReferenceType.Project reference type in a given solution.
            </summary>
            <returns>The project, or <c>null</c> if it couldn't be resolved.</returns>
            <param name="inSolution">The solution the project is in.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if inSolution == null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if ReferenceType != ReferenceType.Project</exception>
        </member>
        <member name="P:MonoDevelop.Projects.Solution.DefaultSolutionFolder">
            <summary>
            Folder where to add solution files, when none is created
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Solution.AuthorInformation">
            <summary>
            Gets the author information for this solution. If no specific information is set for this solution, it
            will return the author defined in the global settings.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Solution.LocalAuthorInformation">
            <summary>
            Gets or sets the author information for this solution. It returns null if no specific information
            has been set for this solution.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolder.GetAllItems">
            <remarks>
            Returns a collection containing all entries in this folder and 
            undercombines
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolder.GetAllItems``1">
            <remarks>
            Returns a collection containing all entries of the given type in this folder and 
            undercombines
            </remarks>
        </member>
        <member name="T:MonoDevelop.Projects.Extensions.ISolutionItemHandler">
            <summary>
            An abstraction of some solution item operations that may be specific to the underlying file format.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Extensions.ISolutionItemHandler.RunTarget(MonoDevelop.Core.IProgressMonitor,System.String,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Executes a build target
            </summary>
            <returns>
            The result of the operation
            </returns>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='target'>
            Name of the target to execute
            </param>
            <param name='configuration'>
            Selector to be used to get the target configuration
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Extensions.ISolutionItemHandler.Save(MonoDevelop.Core.IProgressMonitor)">
            <summary>
            Saves the solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Extensions.ISolutionItemHandler.OnModified(System.String)">
            <summary>
            Notifies that this solution item has been modified
            </summary>
            <param name='hint'>
            Hint about which part of the solution item has been modified. This will typically be the property name.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Extensions.ISolutionItemHandler.GetService(System.Type)">
            <summary>
            Gets a service instance of a given type
            </summary>
            <returns>
            The service.
            </returns>
            <param name='t'>
            Type of the service
            </param>
            <remarks>
            This method looks for an imlpementation of a service of the given type.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.Extensions.ISolutionItemHandler.SyncFileName">
            <summary>
            Gets a value indicating whether the name of the solution item should be the same as the name of the file
            </summary>
            <value>
            <c>true</c> if the file name must be in sync with the solution item name; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoDevelop.Projects.Extensions.ISolutionItemHandler.ItemId">
            <summary>
            Unique and immutable identifier of the solution item inside the solution
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.IExecutableWorkspaceObject.GetExecutionDependencies">
            <summary>
            Gets the build targets that should be built before the project is executed.
            If the project itself is not included, it will not be built.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.RefreshReferenceStatus">
            <summary>
            Checks the status of references. To be called when referenced files may have been deleted or created.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.StripImplicitNamespace(System.String)">
            <summary>
            Given a namespace, removes from it the implicit namespace of the project,
            if there is one. This depends on the target language. For example, in VB.NET
            the default namespace is implicit.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.GetDefaultTargetFrameworkId">
            <summary>
            Gets the target framework for new projects
            </summary>
            <returns>
            The default target framework identifier.
            </returns>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.GetDefaultTargetFrameworkForFormat(MonoDevelop.Projects.FileFormat)">
            <summary>
            Returns the default framework for a given format
            </summary>
            <returns>
            The default target framework for the format.
            </returns>
            <param name='format'>
            A format
            </param>
            <remarks>
            This method is used to determine what's the correct target framework for a project
            deserialized using a specific format.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.GetReferencedAssemblies(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Returns all assemblies referenced by this project, including assemblies generated
            by referenced projects.
            </summary>
            <param name="configuration">
            Configuration for which to get the assemblies.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.GetReferencedAssemblies(MonoDevelop.Projects.ConfigurationSelector,System.Boolean)">
            <summary>
            Returns all assemblies referenced by this project.
            </summary>
            <param name="configuration">
            Configuration for which to get the assemblies.
            </param>
            <param name="includeProjectReferences">
            When set to true, it will include assemblies generated by referenced project. When set to false,
            it will only include package and direct assembly references.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.GetDefaultNamespace(System.String)">
            <summary>
            Gets the default namespace for the file, according to the naming policy.
            </summary>
            <remarks>Always returns a valid namespace, even if the fileName is null.</remarks>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.GetDefaultNamespace(MonoDevelop.Projects.Project,System.String,System.String)">
            <summary>
            Gets the default namespace for the file, according to the naming policy.
            </summary>
            <remarks>Always returns a valid namespace, even if the fileName is null.</remarks>
        </member>
        <member name="P:MonoDevelop.Projects.DotNetProject.DefaultNamespace">
            <summary>
            Default namespace setting. May be empty, use GetDefaultNamespace to get a usable value.
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.FileCopySet">
            <summary>
            A list of files to be deployed together with the project output binary
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.FileCopySet.Add(MonoDevelop.Core.FilePath)">
            <summary>
            Add a file
            </summary>
            <param name='sourcePath'>
            File path.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.FileCopySet.Add(MonoDevelop.Core.FilePath,System.Boolean)">
            <summary>
            Add a file
            </summary>
            <param name='sourcePath'>
            File path.
            </param>
            <param name='copyOnlyIfNewer'>
            Copy to otuput dir only if the file has changed.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.FileCopySet.Add(MonoDevelop.Core.FilePath,System.Boolean,MonoDevelop.Core.FilePath)">
            <summary>
            Add a file
            </summary>
            <param name='sourcePath'>
            File path.
            </param>
            <param name='copyOnlyIfNewer'>
            Copy to otuput dir only if the file has changed.
            </param>
            <param name='targetRelativePath'>
            Directory (relative to the output directory) where the file has to be copied.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.FileCopySet.Remove(MonoDevelop.Core.FilePath)">
            <summary>
            Remove a file
            </summary>
            <param name='fileName'>
            File name.
            </param>
        </member>
        <member name="T:MonoDevelop.Projects.FileCopySet.Item">
            <summary>
            A file
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.FileCopySet.Item.CopyOnlyIfNewer">
            <summary>
            Gets or sets a value indicating whether the file has to be copied only if it has changed.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.FileCopySet.Item.Target">
            <summary>
            Gets or sets the target directory (must be a relative path)
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.FileCopySet.Item.Src">
            <summary>
            Gets or sets the source path
            </summary>
        </member>
        <member name="F:MonoDevelop.Projects.ProjectItemFlags.Hidden">
            <summary>
            The item is for internal use and will not be shown to the user
            </summary>
        </member>
        <member name="F:MonoDevelop.Projects.ProjectItemFlags.DontPersist">
            <summary>
            The item will not be saved to the project file
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.DotNetProjectParameters">
            <summary>
            This is the base class for project parameter classes.
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.ConfigurationSelector">
            <summary>
            Specifies a configuration to be used for solution and project operations
            </summary>
        </member>
        <member name="F:MonoDevelop.Projects.ConfigurationSelector.Default">
            <summary>
            A configuration selector which selects the default (active) project or solution configuration
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ConfigurationSelector.GetConfiguration(MonoDevelop.Projects.IConfigurationTarget)">
            <summary>
            Gets the configuration selected by this instance for a given target
            </summary>
            <returns>
            The configuration.
            </returns>
            <param name='target'>
            A target
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.HelpService.AsyncInitialize">
            <summary>
            Starts loading the MonoDoc tree in the background.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.HelpService.HelpTree">
            <summary>
            A MonoDoc docs tree.
            </summary>
            <remarks>
            The tree is background-loaded the help service, and accessing the property will block until it is finished 
            loading. If you don't wish to block, check the <see cref="P:MonoDevelop.Projects.HelpService.TreeInitialized"/> property first.
             </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.HelpService.TreeInitialized">
            <summary>
            Whether the MonoDoc docs tree has finished loading.
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.Extensions.IResourceHandler">
            <summary>
            This interface can be implemented by a ISolutionItemHandler class to provide
            custom resource id generation rules
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.Extensions.IPathHandler">
            <summary>
            This interface can be implemented by a ISolutionItemHandler class to provide
            custom rules for encoding and decoding paths
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.Extensions.IAssemblyReferenceHandler">
            <summary>
            This interface can be implemented by a ISolutionItemHandler class to provide
            a the list of assembly references for a project. It must not include project references.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Formats.MSBuild.MSBuildHandler.GetService(System.Type)">
            <summary>
            Gets a service instance of a given type
            </summary>
            <returns>
            The service.
            </returns>
            <param name='t'>
            Type of the service
            </param>
            <remarks>
            This method looks for an imlpementation of a service of the given type.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Formats.MSBuild.MSBuildProjectHandler.UseMSBuildEngineForItem(MonoDevelop.Projects.SolutionItem,MonoDevelop.Projects.ConfigurationSelector,System.Boolean)">
            <summary>Whether to use the MSBuild engine for the specified item.</summary>
        </member>
        <member name="P:MonoDevelop.Projects.Formats.MSBuild.MSBuildProjectHandler.UseMSBuildEngineByDefault">
            <summary>Whether to use the MSBuild engine by default.</summary>
        </member>
        <member name="P:MonoDevelop.Projects.Formats.MSBuild.MSBuildProjectHandler.RequireMSBuildEngine">
            <summary>Forces the MSBuild engine to be used.</summary>
        </member>
        <member name="T:MonoDevelop.Projects.Formats.MSBuild.MergeToProjectAttribute">
            <summary>
            Specifies that a property of a project configuration has to be stored as a project property
            </summary>
            <remarks>
            When applied to a property of a project configuration, MD will check
            if the value of that property is the same for all configurations.
            If they are the same, the value will be stored in the main property
            group, instead of individually in each configuration.
            </remarks>
        </member>
        <member name="T:MonoDevelop.Projects.Policies.PolicyContainer">
            <summary>
            A set of policies. Policies are identified by type.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyContainer.Get``1">
            <summary>
            The Get methods return policies taking into account inheritance. If a policy
            can't be found it may return null, but never an 'undefined' policy.
            </summary>
            <returns>
            The policy of the given type, or null if not found.
            </returns>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyContainer.Clear">
            <summary>
            Removes all policies defined in this container
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyContainer.CopyFrom(MonoDevelop.Projects.Policies.PolicyContainer)">
            <summary>
            Copies the policies defined in another container
            </summary>
            <param name='other'>
            A policy container from which to copy the policies
            </param>
            <remarks>
            Policies of this container are removed or replaced by policies defined in the
            provided container.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyContainer.Import(MonoDevelop.Projects.Policies.PolicyContainer,System.Boolean)">
            <summary>
            Import the policies defined by another policy container
            </summary>
            <param name='source'>
            The policy container to be imported
            </param>
            <param name='includeParentPolicies'>
            If <c>true</c>, policies defined by all ancestors of polContainer will also
            be imported
            </param>
            <remarks>
            This method adds or replaces policies defined in the source container into
            this container. Policies in this container which are not defined in the source container
            are not modified or removed.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyContainer.DirectGetAll">
            <summary>
            Gets a list of all policies defined in this container (not inherited)
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Policies.PolicyContainer.IsEmpty">
            <summary>
            Returns true if there isn't any policy defined.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Policies.PolicyContainer.ParentPolicies">
            <summary>
            The set of policies from which inherit policies when not found in this container
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySet(System.String)">
            <summary>
            Gets a policy set.
            </summary>
            <returns>
            The policy set.
            </returns>
            <param name='name'>
            Name of the policy set
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets``1">
            <summary>
            Get all policy sets which define a specific policy
            </summary>
            <returns>
            The policy sets.
            </returns>
            <typeparam name='T'>
            Type of the policy to look for
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets``1(System.Boolean)">
            <summary>
            Get all policy sets which define a specific policy
            </summary>
            <returns>
            The policy sets.
            </returns>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets``1(System.String)">
            <summary>
            Get all policy sets which define a policy under a specific scope
            </summary>
            <returns>
            The policy sets.
            </returns>
            <param name='scope'>
            Scope under which the policy has to be defined (it can be for example a mime type)
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets``1(System.String,System.Boolean)">
            <summary>
            Get all policy sets which define a policy under a specific scope
            </summary>
            <returns>
            The policy sets.
            </returns>
            <param name='scope'>
            Scope under which the policy has to be defined (it can be for example a mime type)
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get all policy sets which define a policy under a specific set of scopes
            </summary>
            <returns>
            The policy sets.
            </returns>
            <param name='scopes'>
            Scopes under which the policy has to be defined (it can be for example a hirearchy of mime types)
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets``1(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Get all policy sets which define a policy under a specific set of scopes
            </summary>
            <returns>
            The policy sets.
            </returns>
            <param name='scopes'>
            Scopes under which the policy has to be defined (it can be for example a hirearchy of mime types)
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSets``1(``0)">
            <summary>
            Gets a list of sets which contain a specific policy value
            </summary>
            <returns>
            The matching sets.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
            <remarks>
            This method returns a list of policy sets which define a policy of type T which is identical
            to the policy provided as argument.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSets``1(``0,System.Boolean)">
            <summary>
            Gets a list of sets which contain a specific policy value
            </summary>
            <returns>
            The matching sets.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
            <remarks>
            This method returns a list of policy sets which define a policy of type T which is identical
            to the policy provided as argument.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSet``1(``0)">
            <summary>
            Gets a policy set which contains a specific policy value
            </summary>
            <returns>
            The matching policy set.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <typeparam name='T'>
            Type of the policy to look for.
            </typeparam>
            <remarks>
            This method returns a policy set which defines a policy of type T which is identical
            to the policy provided as argument. If there are several matching policy sets, it
            returns the first it finds
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSet``1(``0,System.Boolean)">
            <summary>
            Gets a policy set which contains a specific policy value
            </summary>
            <returns>
            The matching policy set.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for.
            </typeparam>
            <remarks>
            This method returns a policy set which defines a policy of type T which is identical
            to the policy provided as argument. If there are several matching policy sets, it
            returns the first it finds
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSet``1(``0,System.Collections.Generic.IEnumerable{MonoDevelop.Projects.Policies.PolicySet},System.Boolean)">
            <summary>
            Gets a policy set which contains a specific policy value
            </summary>
            <returns>
            The matching policy set.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <param name='candidateSets'>
            List of policy sets where to look for the specified policy
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for.
            </typeparam>
            <remarks>
            This method returns a policy set which defines a policy of type T which is identical
            to the policy provided as argument. If there are several matching policy sets, it
            returns the first it finds
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSet``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a policy sets which contains a specific policy value
            </summary>
            <returns>
            The policy set.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <param name='scopes'>
            Scopes under which the policy has to be defined (it can be for example a hirearchy of mime types)
            </param>
            <typeparam name='T'>
            Type of the policy to look for.
            </typeparam>
            <remarks>
            This method returns a policy set which defines a policy of type T which is identical
            to the policy provided as argument. This policy has to be defined under one of the
            provided scopes. If there are several matching policy sets, it returns the first it finds.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSet``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Gets a policy sets which contains a specific policy value
            </summary>
            <returns>
            The policy set.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <param name='scopes'>
            Scopes under which the policy has to be defined (it can be for example a hirearchy of mime types)
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for.
            </typeparam>
            <remarks>
            This method returns a policy set which defines a policy of type T which is identical
            to the policy provided as argument. This policy has to be defined under one of the
            provided scopes. If there are several matching policy sets, it returns the first it finds.
            </remarks>		
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSet``1(``0,System.Collections.Generic.IEnumerable{MonoDevelop.Projects.Policies.PolicySet},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Gets a policy set which contains a specific policy value
            </summary>
            <returns>
            The policy set.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <param name='candidateSets'>
            List of policy sets where to look for the specified policy
            </param>
            <param name='scopes'>
            Scopes under which the policy has to be defined (it can be for example a hirearchy of mime types)
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for.
            </typeparam>
            <remarks>
            This method returns a policy set which defines a policy of type T which is identical
            to the policy provided as argument. This policy has to be defined under one of the
            provided scopes. If there are several matching policy sets, it returns the first it finds.
            </remarks>		
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy``1">
            <summary>
            Gets a default policy.
            </summary>
            <returns>
            The default policy.
            </returns>
            <typeparam name='T'>
            Type of the policy to be returned
            </typeparam>
            <remarks>
            This method returns the default value for the specified policy type. It can be a value defined by
            the user using the default policy options panel, or a system default if the user didn't change it.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy``1(System.String)">
            <summary>
            Gets a default policy for a specific scope
            </summary>
            <returns>
            The default policy.
            </returns>
            <param name='scope'>
            Scope under which the policy has to be defined
            </param>
            <typeparam name='T'>
            Type of the policy to be returned
            </typeparam>
            <remarks>
            This method returns the default value for the specified policy type and scope. It can be a value defined by
            the user using the default policy options panel, or a system default if the user didn't change it.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy``1(System.String,System.Boolean)">
            <summary>
            Gets a default policy for a specific scope
            </summary>
            <returns>
            The default policy, or NULL if the policy is not defined and createDefault is False
            </returns>
            <param name='scope'>
            Scope under which the policy has to be defined
            </param>
            <param name='createDefault'>
            When set to False and there is no default policy defined of this type, the method returns null.
            When set to True, a policy value is always returned (it can be the system default).
            </param>
            <typeparam name='T'>
            Type of the policy to be returned
            </typeparam>
            <remarks>
            This method returns the default value for the specified policy type and scope.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a default policy for a specific set of scopes
            </summary>
            <returns>
            The default policy.
            </returns>
            <param name='scopes'>
            Scopes under which the policy has to be defined (it can be for example a hirearchy of mime types)
            </param>
            <typeparam name='T'>
            Type of the policy to be returned
            </typeparam>
            <remarks>
            This method returns the default value of a policy type for a set of scopes. The policy is looked up under
            the provided scopes in sequence, and the first value found is the one returned. If no value is found,
            a system default is returned.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.SetDefaultPolicy``1(``0)">
            <summary>
            Sets a default policy value.
            </summary>
            <param name='value'>
            Policy to be set
            </param>
            <typeparam name='T'>
            Type of the policy to be set
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetUserDefaultPolicySet">
            <summary>
            Gets default user-defined policy set
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.IsUndefinedPolicy``1(``0)">
            <summary>
            Determines whether a policy instance is an undefined policy
            </summary>
            <returns>
            <c>true</c> if the policy is undefined; otherwise, <c>false</c>.
            </returns>
            <param name='policy'>
            Policy to check
            </param>
            <typeparam name='T'>
            Type of the policy to check
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetUndefinedPolicy``1">
            <summary>
            Gets a undefined policy value
            </summary>
            <returns>
            The undefined policy.
            </returns>
            <typeparam name='T'>
            Type of the policy
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetUserPolicySets">
            <summary>
            Gets the policy sets defined by the user
            </summary>
            <returns>
            The user policy sets.
            </returns>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.AddUserPolicySet(MonoDevelop.Projects.Policies.PolicySet)">
            <summary>
            Adds a new user defined policy set
            </summary>
            <param name='pset'>
            The policy set
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.RemoveUserPolicySet(MonoDevelop.Projects.Policies.PolicySet)">
            <summary>
            Removes a user defined policy set
            </summary>
            <param name='pset'>
            The policy set
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets">
            <summary>
            Get all defined policy sets
            </summary>
            <returns>
            The policy sets.
            </returns>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.SavePolicies">
            <summary>
            Saves the policies.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Policies.PolicyService.InvariantPolicies">
            <summary>
            Gets the invariant policy set
            </summary>
            <remarks>
            The invariant policy set is a policy set whose values will not change in future MonoDevelop versions.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.Policies.PolicyService.DefaultPolicies">
            <summary>
            Gets the system default policies
            </summary>
            <value>
            The default policies.
            </value>
            <remarks>
            The returned PolicyContainer can be used to query the system default value of policies
            </remarks>
        </member>
        <member name="T:MonoDevelop.Projects.Policies.PolicySet">
            <summary>
            A named set of policies.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Policies.PolicySet.Visible">
            <summary>
            When set to false, this policy set is not visible to the user. This flag can be used
            to deprecate existing policy sets (since registered policy sets can't be modified/removed).
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Policies.PolicySet.AllowDiffSerialize">
            <summary>
            When set to true, this policy can be used as a base for a differential serialization. It's false by default
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Text.IEditableTextFile.InsertText(System.Int32,System.String)">
            <returns>
            The length of the inserted text. The real text may differ in lenth because
            of some conversions (tabs -> spaces, different line ends etc.)
            </returns>
        </member>
        <member name="M:MonoDevelop.Projects.Text.InvalidEncodingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InvalidEncodingException"/> class
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Text.InvalidEncodingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InvalidEncodingException"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
        </member>
        <member name="M:MonoDevelop.Projects.Text.InvalidEncodingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:InvalidEncodingException"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
            <param name="inner">The exception that is the cause of the current exception. </param>
        </member>
        <member name="M:MonoDevelop.Core.Text.LaneStringMatcher.GetMatch(System.String)">
            <summary>
            Gets the match indices.
            </summary>
            <returns>
            The indices in the text which are matched by our filter.
            </returns>
            <param name='text'>
            The text to match.
            </param>
        </member>
        <member name="M:MonoDevelop.Core.Text.BacktrackingStringMatcher.GetMatch(System.String)">
            <summary>
            Gets the match indices.
            </summary>
            <returns>
            The indices in the text which are matched by our filter.
            </returns>
            <param name='text'>
            The text to match.
            </param>
        </member>
        <member name="T:MonoDevelop.Core.Execution.ProcessArgumentBuilder">
            <summary>
            Builds a process argument string.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessArgumentBuilder.Add(System.String)">
            <summary>
            Adds an argument without escaping or quoting.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessArgumentBuilder.Add(System.String[])">
            <summary>
            Adds multiple arguments without escaping or quoting.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessArgumentBuilder.AddQuotedFormat(System.String,System.Object[])">
            <summary>
            Adds a formatted argument, quoting and escaping as necessary.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessArgumentBuilder.AddQuoted(System.String)">
            <summary>Adds an argument, quoting and escaping as necessary.</summary>
            <remarks>The .NET process class does not support escaped 
            arguments, only quoted arguments with escaped quotes.</remarks>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessArgumentBuilder.AddQuoted(System.String[])">
            <summary>
            Adds multiple arguments, quoting and escaping each as necessary.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessArgumentBuilder.Quote(System.String)">
            <summary>Quotes a string, escaping if necessary.</summary>
            <remarks>The .NET process class does not support escaped 
            arguments, only quoted arguments with escaped quotes.</remarks>
        </member>
        <member name="T:MonoDevelop.Core.Assemblies.TargetFrameworkMoniker">
            <summary>
            Unique identifier for a target framework.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetFrameworkMoniker.Identifier">
            <summary>
            The root identifier of the framework, e.g. ".NETFramework" or "Silverlight"
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetFrameworkMoniker.Version">
            <summary>
            The version of the framework.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetFrameworkMoniker.Profile">
            <summary>
            Optional. A named subset of a particular framework version, e.g. "Client".
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.FilePath.Build(System.String[])">
            <summary>
            Builds a path by combining all provided path sections
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.FilePath.CanonicalPath">
            <summary>
            Returns a path in standard form, which can be used to be compared
            for equality with other canonical paths. It is similar to FullPath,
            but unlike FullPath, the directory "/a/b" is considered equal to "/a/b/"
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.UserProfile.GetLocation(MonoDevelop.Core.UserDataKind)">
            <summary>Gets a location by its ID.</summary>
        </member>
        <member name="M:MonoDevelop.Core.UserProfile.ForTest(System.String,MonoDevelop.Core.FilePath)">
            <summary>
            Creates locations in a specific folder, for testing.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.CacheDir">
            <summary>Location for cached data that can be regenerated.</summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.ConfigDir">
            <summary>Location for current preferences/settings.</summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.LocalConfigDir">
            <summary>Preferences/settings specific to the local machine.</summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.UserDataRoot">
            <summary>User-visible root location for user-created data files such as templates, snippets and color schemes.</summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.LogDir">
            <summary>Location for log files.</summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.LocalInstallDir">
            <summary>Location for files installed from external sources.</summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.TempDir">
            <summary>Location for temporary files.</summary>
        </member>
        <member name="T:MonoDevelop.Core.BrandingService">
            <summary>
            Access to branding information. Only the ApplicationName is guaranteed to be non-null.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Execution.ExecutionTarget">
            <summary>
            A target that can execute a command. For example, a specific device when doing mobile development
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionTarget.Name">
            <summary>
            Display name of the device
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionTarget.FullName">
            <summary>
            The display name of the item when it is selected
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionTarget.Id">
            <summary>
            Unique identifier of the target
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionTarget.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoDevelop.Core.Execution.ExecutionTarget"/> is enabled.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionTarget.Notable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoDevelop.Core.Execution.ExecutionTarget"/> is notable.
            </summary>
            <remarks>
            This is introduced to be able to highlight execution targets for whatever reason makes sense for the project. 
            For example, the android add-in uses this to indicate which emulators are currently running but other addins can use this
            for their own purposes
            </remarks>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionTarget.ParentGroup">
            <summary>
            Target group on which this target is included
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Execution.ICommandFactory">
            <summary>
            Used to create commands from file paths
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ICommandFactory.CreateCommand(System.String)">
            <summary>
            Creates a command, or returns null if a command can't be created from the given path
            </summary>
            <returns>The command, or null if a command can't be created from the given path</returns>
            <param name="path">Path.</param>
        </member>
        <member name="M:MonoDevelop.Projects.SharedAssetsProjects.SharedAssetsProject.GetDefaultNamespace(System.String)">
            <summary>
            Gets the default namespace for the file, according to the naming policy.
            </summary>
            <remarks>Always returns a valid namespace, even if the fileName is null.</remarks>
        </member>
        <member name="T:MonoDevelop.Core.WebRequestHelper">
            <summary>
            Helper for making web requests with support for authenticated proxies.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.WebRequestHelper.GetResponseAsync(System.Func{System.Net.HttpWebRequest},System.Action{System.Net.HttpWebRequest},System.Threading.CancellationToken)">
            <summary>
            Gets the web response, using the <see cref="P:MonoDevelop.Core.WebRequestHelper.ProxyAuthenticationHandler"/> to handle proxy authentication
            if necessary.
            </summary>
            <returns>The response.</returns>
            <param name="createRequest">Callback for creating the request.</param>
            <param name="prepareRequest">Callback for preparing the request, e.g. writing the request stream.</param>
            <param name="token">Cancellation token.</param>
            <remarks>
            Keeps sending requests until a response code that doesn't require authentication happens or if the request
            requires authentication and the user has stopped trying to enter them (i.e. they hit cancel when they are prompted).
            </remarks>
        </member>
        <member name="M:MonoDevelop.Core.WebRequestHelper.GetResponse(System.Func{System.Net.HttpWebRequest},System.Action{System.Net.HttpWebRequest},System.Threading.CancellationToken)">
            <summary>
            Gets the web response, using the <see cref="P:MonoDevelop.Core.WebRequestHelper.ProxyAuthenticationHandler"/> to handle proxy authentication
            if necessary.
            </summary>
            <returns>The response.</returns>
            <param name="createRequest">Callback for creating the request.</param>
            <param name="prepareRequest">Callback for preparing the request, e.g. writing the request stream.</param>
            <param name="token">Cancellation token.</param>
            <remarks>
            Keeps sending requests until a response code that doesn't require authentication happens or if the request
            requires authentication and the user has stopped trying to enter them (i.e. they hit cancel when they are prompted).
            </remarks>
        </member>
        <member name="M:MonoDevelop.Core.WebRequestHelper.IsCannotReachInternetError(System.Net.WebExceptionStatus)">
            <summary>
            Determines whether an error code is likely to have been caused by internet reachability problems.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Web.ICredentialProvider">
            <summary>
            This interface represents the basic interface that one needs to implement in order to
            support repository authentication. 
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Web.ICredentialProvider.GetCredentials(System.Uri,System.Net.IWebProxy,MonoDevelop.Core.Web.CredentialType,System.Boolean)">
            <summary>
            Returns CredentialState state that let's the consumer know if ICredentials
            were discovered by the ICredentialProvider. The credentials argument is then
            populated with the discovered valid credentials that can be used for the given Uri.
            The proxy instance if passed will be used to ensure that the request goes through the proxy
            to ensure successful connection to the destination Uri.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Web.IProxyAuthenticationHandler">
            <summary>Proxy authentication handler.</summary>
        </member>
        <member name="M:MonoDevelop.Core.Web.IProxyAuthenticationHandler.AddProxyToCache(System.Net.IWebProxy)">
            <summary>
            Adds a proxy to the cache.
            </summary>
            <param name="proxy">Proxy.</param>
        </member>
        <member name="M:MonoDevelop.Core.Web.IProxyAuthenticationHandler.GetCachedProxy(System.Uri)">
            <summary>
            Gets a cached proxy for the Url, if available.
            </summary>
            <returns>The cached proxy.</returns>
            <param name="uri">URI for which the proxy will be used.</param>
        </member>
        <member name="M:MonoDevelop.Core.Web.IProxyAuthenticationHandler.AddCredentialsToCache(System.Uri,System.Net.ICredentials)">
            <summary>
            Adds credentials to the cache.
            </summary>
            <param name="uri">URI for which the credentials are valid.</param>
            <param name="credentials">Credentials.</param>
        </member>
        <member name="M:MonoDevelop.Core.Web.IProxyAuthenticationHandler.GetCachedCredentials(System.Uri)">
            <summary>
            Gets cached credentials, if available.
            </summary>
            <returns>The cached credentials.</returns>
            <param name="uri">URI for which the credentials will be used.</param>
        </member>
        <member name="M:MonoDevelop.Core.Web.IProxyAuthenticationHandler.GetCredentialsFromUser(System.Net.HttpWebRequest,MonoDevelop.Core.Web.CredentialType,System.Boolean)">
            <summary>
            Gets credentials from user.
            </summary>
            <returns>The credentials from user.</returns>
            <param name="request">Request for which the credentials will be used.</param>
            <param name="credentialType">Type of the credentials.</param>
            <param name="retrying">Whether retrying.</param>
        </member>
        <member name="F:MonoDevelop.Core.Web.ProxyCache.originalSystemProxy">
            <summary>
            Capture the default System Proxy so that it can be re-used by the IProxyFinder
            because we can't rely on WebRequest.DefaultWebProxy since someone can modify the DefaultWebProxy
            property and we can't tell if it was modified and if we are still using System Proxy Settings or not.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Web.ProxyCache.IsSystemProxySet(System.Uri)">
            <summary>
            Return true or false if connecting through a proxy server
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:MonoDevelop.Core.Web.RequestHelper">
            <summary>
            This class is used to keep sending requests until a response code that doesn't require
            authentication happens or if the request requires authentication and
            the user has stopped trying to enter them (i.e. they hit cancel when they are prompted).
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Web.STSAuthHelper.STSEndPointHeader">
            <summary>
            Response header that specifies the WSTrust13 Windows Transport endpoint.
            </summary>
            <remarks>
            TODO: Is there a way to discover this \ negotiate this endpoint?
            </remarks>
        </member>
        <member name="F:MonoDevelop.Core.Web.STSAuthHelper.STSRealmHeader">
            <summary>
            Response header that specifies the realm to authenticate for. In most cases this would be the gallery we are going up against.
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Web.STSAuthHelper.STSTokenHeader">
            <summary>
            Request header that contains the SAML token.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Web.STSAuthHelper.PrepareSTSRequest(System.Net.WebRequest)">
            <summary>
            Adds the SAML token as a header to the request if it is already cached for this host.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Web.STSAuthHelper.TryRetrieveSTSToken(System.Uri,MonoDevelop.Core.Web.IHttpWebResponse)">
            <summary>
            Attempts to retrieve a SAML token if the response indicates that server requires STS-based auth.
            </summary>
            <param name="requestUri">The feed URI we were connecting to.</param>
            <param name="response">The 401 response we receieved from the server.</param>
            <returns>True if we were able to successfully retrieve a SAML token from the STS specified in the response headers.</returns>
        </member>
    </members>
</doc>
