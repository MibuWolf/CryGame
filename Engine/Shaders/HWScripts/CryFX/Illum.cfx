// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "Common.cfi"
#include "IllumValidations.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
	string Script =        
		"Public;"
	#if %DECAL
		"Decal;"
	#endif     
	#if %VERTCOLORS
		"VertexColors"
	#endif
	#if %BILLBOARD
		"Billboard"
	#endif
	#if ENABLE_TESSELLATION
		"HWTessellation;"
	#endif
		"SupportsDeferredShading;"
		"SupportsFullDeferredShading;"
		"SupportsAttrInstancing;"
		"ShaderDrawType = Light;"
		"ShaderType = General;"
>;

////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Custom shading pass structure /////////////////////////////////////

struct CustomForwardShadingAttribs
{
};


#if %BLENDLAYER
Texture2D Diffuse2Tex : register(t9)
<
  UIName = "Second Diffuse Map";
  UIDescription = "Diffuse Map for the second blend layer";  
  sRGBLookup = true;
> = TM_Custom;

Texture2D Bump2Tex : register(t10)
<
  UIName = "Second Bump Map";
  UIDescription = "Bump Map for the second blend layer";
> = TM_CustomSecondary;

Texture2D Height2Tex : register(t8)
<
  UIName = "Second Height Map";
  UIDescription = "Height Map for the second blend layer";
> = TM_SubSurface;

Texture2D BlendTex : register(t11)
<
  UIName = "Blending Map";
  UIDescription = "Blending Map between the two layers";
> = TM_Opacity;

Texture2D smoothness2Tex : register(t7) = TM_DecalOverlay;
#endif

#if %DECAL
Texture2D DecalOpacityTex : register(t11)
<
  UIName = "Decal Opacity Map";
  UIDescription = "Opacity map for decal";
> = TM_Opacity;
#endif

Texture2D emittanceTex : register(t13)
<
  UIName = "Emittance";
  UIDescription = "Emittance color/intensity map";
> = TM_Emittance;

ENVIRONMENTCUBEMAP
DISSOLVE_NOISE_MAP

#include "ShadeLib.cfi"

// Tweakables /////////////////

half EmittanceMapGamma
<
  register = REG_PM_PARAM_0.x;
  string UIWidget = "slider";
  string UIName = "Emittance Map Gamma";
	string UIDescription = "Expand range of emittance texture";
  float UIMin = 1.0;
  float UIMax = 2.0;
  float UIStep = 0.1;
> = 1.0;

#if %OFFSET_BUMP_MAPPING
half ObmDisplacement
<
  register = REG_PM_PARAM_0.y;
  string UIWidget = "slider";
  string UIName = "OBM Displacement";
  float UIMin = 0.0;
  float UIMax = 0.025;
  float UIStep = 0.001;
> = 0.004;
#endif

#if %PARALLAX_OCCLUSION_MAPPING
half PomDisplacement
<
  register = REG_PM_PARAM_0.z;
  string UIWidget = "slider";
  string UIName = "POM Displacement";
  float UIMin = 0.0;
  float UIMax = 0.05;
  float UIStep = 0.001;
> = 0.025;
#endif

#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
half SilPomDisplacement
<
  register = REG_PM_PARAM_0.w;
  string UIWidget = "slider";
  string UIName = "Silhouette POM Displacement";
  float UIMin = 0.001;
  float UIMax = 10.0;
  float UIStep = 0.001;
> = 0.025;

float SilPomNumSteps
<
  register = REG_PM_PARAM_1.x;
  string UIWidget = "slider";
  string UIName = "Silhouette POM Number of steps";
  float UIMin = 4.0;
  float UIMax = 512.0;
  float UIStep = 1.0;
> = 256.0;

float SilPomStepSizeViewDep
<
  register = REG_PM_PARAM_1.y;
  string UIWidget = "slider";
  string UIName = "Silhouette POM Step size view independence";
  float UIMin = 1.0;
  float UIMax = 10.0;
  float UIStep = 0.1;
> = 1.0;
#endif

#if %OFFSET_BUMP_MAPPING || %PARALLAX_OCCLUSION_MAPPING || %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
half HeightBias
<
  register = REG_PM_PARAM_1.z;
  string UIWidget = "slider";
  string UIName = "Height bias";
  float UIMin = 0.0;
  float UIMax = 1.0;
  float UIStep = 0.05;
> = 1.0;

half SelfShadowStrength
<
  register = REG_PM_PARAM_1.w;
  string UIWidget = "slider";
  string UIName = "Self shadow strength";
  float UIMin = 0.0;
  float UIMax = 5.0;
  float UIStep = 0.1;
> = 3.0;
#endif


#if %DETAIL_MAPPING
	half DetailBumpScale
	<
	  register = REG_PM_PARAM_2.x;
	  string UIHelp = "Set detail bump scale";                     
	  string UIName = "Detail bump scale";    	  
	  string UIWidget = "slider";
	  float UIMin = 0.0;
	  float UIMax = 10.0;
	  float UIStep = 0.1;
	> = 0.5;
	
	half DetailDiffuseScale
	<
	  register = REG_PM_PARAM_2.y;
	  string UIHelp = "Set diffuse detail blend scale";                     
	  string UIName = "Detail diffuse scale";    	  
	  string UIWidget = "slider";
	  float UIMin = 0.0;
	  float UIMax = 1.0;
	  float UIStep = 0.1;
	> = 0.5;

	half DetailGlossScale
	<
	  register = REG_PM_PARAM_2.z;
	  string UIHelp = "Set gloss detail blend scale";                     
	  string UIName = "Detail gloss scale";    	  
	  string UIWidget = "slider";
	  float UIMin = 0.0;
	  float UIMax = 1.0;
	  float UIStep = 0.1;
	> = 0.5;
#endif

#if %DIRTLAYER
half4 DirtTint
<
  register = REG_PM_PARAM_3;
  string UIHelp = "Color tint of dirt layer";                   
  string UIName = "Dirt Tint";    
  string UIWidget = "color";
> = {1.0, 1.0, 1.0, 1.0};


// TODO: We should add support for overloading the alpha of a color dialog
half DirtStrength
<
  register = REG_PM_PARAM_4.x;
  string UIHelp = "Fade out dirt";
  string UIName = "Dirt Strength";
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 1.0;
  float UIStep = 0.1;
> = 1.0;

half DirtGlossFactor
<
  register = REG_PM_PARAM_4.y;
  string UIHelp = "Fade out gloss map";
  string UIName = "Dirt Gloss";
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 1.0;
  float UIStep = 0.1;
> = 1.0;


half DirtMapAlphaInfluence
<
  register = REG_PM_PARAM_4.z;
  string UIHelp = "Interpolate dirt map opacity between alpha value and fully opaque";
  string UIName = "Dirt Map Alpha";
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 1.0;
  float UIStep = 0.1;
> = 1.0;


half DirtTiling
<
  register = REG_PM_PARAM_4.w;
  string UIHelp = "Set tilling of dirt layer";
  string UIName = "Dirt Tilling";
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 16.0;
  float UIStep = 0.05;
> = 1.0;
#endif

#if %BLENDLAYER
half BlendFactor
<
  register = REG_PM_PARAM_5.x;
  string UIHelp = "Change visbility of blended layer";
  string UIName = "Blend Factor";
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 16.0;
  float UIStep = 0.2;
> = 8.0;

half BlendLayer2Tiling
<
  register = REG_PM_PARAM_5.y;
  string UIHelp = "Change tiling of 2nd blend layer";
  string UIName = "Blend Layer 2 Tiling";
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 20.0;
  float UIStep = 0.005;
> = 1.0;

half BlendFalloff
<
  register = REG_PM_PARAM_5.z;
  string UIHelp = "Change falloff of blending";
  string UIName = "Blend Falloff";
  string UIWidget = "slider";
  float UIMin = 0.1;
  float UIMax = 128.0;
  float UIStep = 1.0;
> = 32.0;

half BlendLayer2Specular
<
  register = REG_PM_PARAM_5.w;
  string UIHelp = "Change specular intensity of 2nd blend layer";
  string UIName = "Blend Layer 2 Spec";
  string UIWidget = "slider";
  float UIMin = 0.02;
  float UIMax = 0.05;
  float UIStep = 0.001;
> = 0.04;

half BlendMaskTiling
<
  register = REG_PM_PARAM_6.x;
  string UIHelp = "Change tiling of blend mask";
  string UIName = "Blend Mask Tiling";
  string UIWidget = "slider";
  float UIMin = 0.05;
  float UIMax = 20.0;
  float UIStep = 0.05;
> = 1.0;
#endif


#if !%DIRTLAYER && !%DECAL  // Reusing register
half SSSIndex
<
  register = REG_PM_PARAM_6.y;
  string UIHelp = "Change subsurface scattering profile and amount (0.0-0.99: marble, 1.0-1.99: skin)";
  string UIName = "SSS Index";
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 3.99;
  float UIStep = 0.005;
> = 0;
#endif

#if %DECAL && !%DIRTLAYER  // Reusing DIRTLAYER registers
half DecalFalloff
<
  register = REG_PM_PARAM_6.z;
  string UIHelp = "Pow applied to decal alpha";
  string UIName = "Decal Alpha Falloff";
  string UIWidget = "slider";
  float UIMin = 0.0001;
  float UIMax = 128.0;
  float UIStep = 1;
> = 1;

half DecalAlphaMult
<
  register = REG_PM_PARAM_6.w;
  string UIHelp = "Multiplier applied to decal alpha";
  string UIName = "Decal Alpha Multiplier";
  string UIWidget = "slider";
  float UIMin = 0;
  float UIMax = 10;
  float UIStep = 0.01;
> = 1;

half DecalDiffuseOpacity
<
  register = REG_PM_PARAM_7.x;
  string UIHelp = "Opacity multiplier for fading out decal diffuse color";
  string UIName = "Decal Diffuse Opacity";
  string UIWidget = "slider";
  float UIMin = 0;
  float UIMax = 1;
  float UIStep = 0.01;
> = 1;

half DecalAngleBasedFading
<
  register = REG_PM_PARAM_7.y;
  string UIHelp = "Controls fading of decal based on surface normal";
  string UIName = "Decal Angle Based Fading";
  string UIWidget = "slider";
  float UIMin = 0;
  float UIMax = 10;
  float UIStep = 0.01;
> = 1;

#endif

//=========================================================================

#include "VertexLib.cfi"

///////////////////////////////
// Samplers

Texture2D dirtTex : register(t9)
<
  UIName = "Dirt Map";
  UIDescription = "Dirt Map";
> = TM_Custom;

///////////////// vertex shader //////////////////

#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
vert2GeomGeneral IlluminationVS(app2vertGeneral IN)
#else
vert2FragGeneral IlluminationVS(app2vertGeneral IN)
#endif
{
  vert2FragGeneral OUT = (vert2FragGeneral)0; 
#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
  vert2GeomGeneral OUT_ext = (vert2GeomGeneral)0; 
#endif

  streamPos vertPassPos = (streamPos)0;
#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
  vs_shared_output(IN, OUT, OUT_ext, vertPassPos, true);
#else
  vs_shared_output(IN, OUT, vertPassPos, true);
#endif
	
#if %DECAL && !%_TT_TEXCOORD_PROJ
	OUT.baseTC.zw = IN.vertCommon.baseTC.xy;
#endif

#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
  OUT_ext.IN = OUT;
  return OUT_ext;
#else
  return OUT;
#endif
}

///////////////// geometry shaders //////////////////

#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
[maxvertexcount(9)]
void IlluminationGS(triangle vert2GeomGeneral In[3], inout TriangleStream<geom2FragGeneral> OutStream)
{
	EmitPrismG(In[0], In[1], In[2], OutStream);
}
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void GatherMaterialAttribs(in half3x3 mTangentToWS, in float2 baseTC, in half4 vertexColor, out MaterialAttribsCommon attribs)
{
	// TODO: SilPom: Find way to compute lod without gradients as they cause pixel artifacts at fin / shell transition
	
	attribs = MaterialAttribsDefault();
	
  // Base layer
	half3 vNormalTS = half3(0, 0, 1);
#if %NORMAL_MAP
	vNormalTS = GetNormalMap(normalsTex, baseTC.xy);
#endif
	attribs.Smoothness = MatSpecColor.w * GetSmoothnessTex(smoothnessTex, baseTC.xy);
	
	attribs.Albedo = MatDifColor.rgb;
	#if !%SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
		attribs.Albedo *= GetDiffuseTex(diffuseTex, baseTC.xy).rgb;
	#else
		attribs.Albedo *= GetDiffuseTex(diffuseTex, float4(baseTC.xy, 0, 0));
	#endif
	
	attribs.Reflectance = MatSpecColor.rgb;
#if %SPECULAR_MAP
	#if !%SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
		attribs.Reflectance *= GetSpecularTex(specularTex, baseTC.xy).rgb;
	#else
		attribs.Reflectance *= GetSpecularTexLod(specularTex, float4(baseTC.xy, 0, 0));
	#endif
#endif

	// Decals
#if %DECAL && %_RT_DECAL_TEXGEN_2D
	#if %_TT_TEXCOORD_PROJ
		attribs.Albedo = GetDiffuseDecalTex(diffuseTex, baseTC.xy / baseTC.w).rgb;
	#else
		attribs.Albedo = GetDiffuseDecalTex(diffuseTex, baseTC.xy).rgb;
	#endif 
#endif

	// Blend layer
#if %BLENDLAYER
	half blendFac = GetLayerBlendingValue(BlendTex, baseTC.xy * BlendMaskTiling, 0, vertexColor.w, BlendFactor, BlendFalloff);
	
	#if !%SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
		half4 diffuseMap2 = GetDiffuse2Tex(Diffuse2Tex, baseTC.xy * BlendLayer2Tiling);
	#else
		half4 diffuseMap2 = GetDiffuse2TexLod(Diffuse2Tex, float4(baseTC.xy * BlendLayer2Tiling, 0, 0)); // TODO: find way to compute lod without gradients as they cause pixel artifacts at fin / shell transition
	#endif
	attribs.Albedo = lerp(attribs.Albedo, diffuseMap2, blendFac);
	
	#if !%SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
		half glossLayer2 = GetSmoothness2Tex(smoothness2Tex, baseTC.xy * BlendLayer2Tiling);
	#else
		half glossLayer2 = GetSmoothness2TexLod(smoothness2Tex, float4(baseTC.xy * BlendLayer2Tiling, 0, 0)); // TODO: find way to compute lod without gradients as they cause pixel artifacts at fin / shell transition
	#endif
	attribs.Smoothness = lerp(attribs.Smoothness, glossLayer2, blendFac);
	
	attribs.Reflectance = lerp(attribs.Reflectance, BlendLayer2Specular, blendFac);
	
	half3 vNormal2 = GetNormalMap(Bump2Tex, baseTC.xy * BlendLayer2Tiling);
	#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
		const float3 norm = vNormalTS;
		const float3 binorm = cross(float3(1, 0, 0), norm);
		const float3 tang = cross(norm, binorm);
		const float3x3 matLocal = float3x3(tang, -binorm, norm);
		vNormal2 = mul(vNormal2, matLocal);
	#endif
	vNormalTS = lerp(vNormalTS, vNormal2, blendFac);
#endif

#if %DIRTLAYER
  half4 dirtMap = GetCustomTex(dirtTex, baseTC.xy * half2(DirtTiling, DirtTiling));
  half dirtBlendFac = DirtStrength * lerp(1.0h, dirtMap.a, DirtMapAlphaInfluence) * (1 - vertexColor.a);
  attribs.Albedo = lerp(attribs.Albedo, dirtMap * DirtTint, dirtBlendFac);
  attribs.Reflectance = lerp(attribs.Reflectance, attribs.Reflectance * DirtGlossFactor, dirtBlendFac);
#endif

#if %VERTCOLORS
	attribs.Albedo *= vertexColor.rgb;
#endif

	// Detail mapping
#if %DETAIL_MAPPING
	half3 detailScales = half3(DetailBumpScale, DetailDiffuseScale, DetailGlossScale);
	half4 detailMap = GetDetailTex(detailTex, baseTC.xy * CM_DetailTilingAndAlphaRef.xy) * detailScales.xxyz;
#if %ALPHAMASK_DETAILMAP
	detailMap *= GetAlphaTex(diffuseTex, baseTC.xy);
#endif

	vNormalTS.xy += detailMap.xy;
	attribs.Smoothness += attribs.Smoothness * detailMap.w;
	attribs.Albedo += attribs.Albedo * detailMap.z;
#endif

	// Compute world space normal
	attribs.NormalWorld = normalize(mTangentToWS[2] + 1e-6);
#if %NORMAL_MAP || %WRINKLE_BLENDING || %DETAIL_MAPPING
	attribs.NormalWorld = normalize(mul(vNormalTS, mTangentToWS));
#endif
}

float GatherAlpha(float4 baseTC, half vertexAlpha)
{
	half alpha = MatDifColor.w;
#if !%SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
	alpha *= GetDiffuseTex(diffuseTex, baseTC.xy).w;
#else
	alpha *= GetDiffuseTex(diffuseTex, float4(baseTC.xy, 0, 0)).w;
#endif

#if %VERTCOLORS
	alpha *= vertexAlpha;
#endif

#if %DECAL
	#if !%_TT_TEXCOORD_PROJ
		alpha *= GetOpacityTex(DecalOpacityTex, baseTC.zw).r;
	#else
		alpha *= GetOpacityTex(DecalOpacityTex, baseTC.xy).r;
	#endif
	#if !%DIRTLAYER
		alpha = saturate(pow(alpha * DecalAlphaMult, DecalFalloff));
	#endif
#endif

#if %_RT_DECAL_TEXGEN_2D
  alpha *= 100.0 / 99.0;
#endif

	return alpha;
}

half3 GetEmittanceMask(float2 baseTC)
{
	half4 emittanceMap = GetEmittanceTex(emittanceTex, baseTC.xy);
	
	// Increase the range of non-HDR textures:
	//   AdjustLuminance(emittanceMap.rgb, pow(GetLuminance(emittanceMap.rgb), Gamma));
	emittanceMap.rgb *= pow(max(GetLuminance(emittanceMap.rgb), 1e-6), EmittanceMapGamma - 1);
	
	// DEPRECATED: Just for backwards compatibility (up to 3.8.3)
	emittanceMap.rgb *= emittanceMap.a;
	
	return emittanceMap.rgb;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Callback_ShadingDirect(in ForwardShadingAttribs attribs, in ForwardLightParams light, out float3 diffuseAcc, out float3 specularAcc)
{
	float3 viewVec = normalize(-attribs.worldPos);
	float NdotL = saturate(dot(attribs.normal, light.lightVec));

	diffuseAcc.x = DiffuseBRDF(attribs.normal, viewVec, light.lightVec, attribs.smoothness, NdotL);
	specularAcc = SpecularBRDF(attribs.normal, viewVec, light.lightVec, attribs.smoothness, attribs.reflectance) * NdotL;
	
	diffuseAcc = diffuseAcc.x * light.illuminance;
	specularAcc = specularAcc * light.illuminance;
}

#include "TiledShading.cfi"
#include "ForwardShading.cfi"

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
pixout IlluminationPS(geom2FragGeneral IN_ext)
#else
pixout IlluminationPS(vert2FragGeneral IN)
#endif
{
#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
	vert2FragGeneral IN = IN_ext.IN;
#endif

	pixout OUT = (pixout)0;

	half3 emittance = MatEmissiveColor.xyz * MatEmissiveColor.w * (1000.0 / 10000.0);
	const bool bEmissive = GetLuminance(emittance.xyz) > 0;
	if (bEmissive)
	{
		emittance *= GetEmittanceMask(IN.baseTC);
	}

#if !%_RT_SECONDARY_VIEW  // Do additive glow pass just when deferred shading is on
	if (bEmissive && MatDifColor.w == 1)
	{
		OUT.Color.rgb = emittance;
		return OUT;
	}
#endif

#if %_RT_ALPHATEST
	half diffuseMapAlpha = GetAlphaTex(diffuseTex, IN.baseTC.xy);
	clip(diffuseMapAlpha - Get_MaterialAlphaTest());
#endif

	// Gather surface material attributes
	MaterialAttribsCommon commonAttribs;
#if %_RT_FOG || %_RT_PER_INSTANCE_CB_TEMP
	half3x3 mTangentToWS = half3x3(IN.vTangent.xyz, IN.vBinormal.xyz, cross(IN.vTangent.xyz, IN.vBinormal.xyz) * IN.vTangent.w);
#else
	half3x3 mTangentToWS = half3x3(half3(1, 0, 0), half3(0, 1, 0), half3(0, 0, 1));
#endif
	half4 vertexColor = 0;
#if %VERTCOLORS || %BLENDLAYER || %DIRTLAYER
	vertexColor = IN.Color;
#endif

	GatherMaterialAttribs(mTangentToWS, IN.baseTC.xy, vertexColor, commonAttribs);

	ForwardShadingAttribs fwdAttribs;
	fwdAttribs.screenUV = IN.screenProj.xy / IN.screenProj.w;
	fwdAttribs.worldPos = IN.vView.xyz;

	float3 diffuseAcc = 0, specularAcc = 0;
#if %_RT_ALPHABLEND && !%DECAL
	const bool bSunShadows = false;
#else
	const bool bSunShadows = true;
#endif
	Fwd_StandardOpaqueShading(commonAttribs, fwdAttribs, diffuseAcc, specularAcc, bSunShadows);

	OUT.Color.rgb = diffuseAcc + specularAcc + emittance;
	OUT.Color.a = 1;

#if %_RT_ALPHABLEND
	OUT.Color.a = GatherAlpha(IN.baseTC.xyzw, vertexColor.w);
#endif

	const float3 worldPos = IN.vView.xyz + GetWorldViewPos();
	Fwd_ApplyFog(worldPos.xyz, IN.vView.xyz, IN.WPos, OUT.Color.rgb);

	return OUT;
}

#include "IllumTess.cfi"

//////////////////////////////// technique ////////////////

technique General
<
  string Script =
        "TechniqueZ=ZPass;"
#if !%DECAL && !%SILHOUETTE_PARALLAX_OCCLUSION_MAPPING && !ENABLE_TESSELLATION
				"TechniqueZPrepass=ZPrepass;"
#endif
        "TechniqueMotionBlur=MotionBlurPass;"
        "TechniqueCustomRender=CustomRenderPass;"
        "TechniqueEffectLayer=EffectLayerPass;"
        "TechniqueShadowGen=ShadowGen;"
        "TechniqueDebug=DebugPass;"
>
{
	pass p0
	{    
		VertexShader = IlluminationVS() GeneralVS;
#if ENABLE_TESSELLATION
		HullShader   = IllumHS() GeneralHS;
		DomainShader = IllumDS() GeneralDS;
#endif

// NOTE: SilPOM is automatically turned off via IllumValidations when NVidia multires is enabled
// TODO: Make SilPOM work with NVidia multires
#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING 
		GeometryShader = IlluminationGS() GeneralGS;
#else
		GeometryShader = $AutoGS_MultiRes();
#endif

		PixelShader = IlluminationPS() GeneralPS;

#if %DECAL
		ZEnable = true;    
		ZWriteEnable = false;    
		ZFunc = LEqual;
		CullMode = Back;        
#else
		ZEnable = true;    
		ZWriteEnable = true;    
		CullMode = Back;
#endif        
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////

#if !%DECAL && !%SILHOUETTE_PARALLAX_OCCLUSION_MAPPING && !ENABLE_TESSELLATION
	#include "CommonZPrePass.cfi"
#endif

#include "CommonZPass.cfi"
#include "CommonMotionBlurPass.cfi"
#include "CommonViewsPass.cfi"
#include "CommonEffectLayerPass.cfi"
#include "ShadowCommon.cfi"
#include "CommonShadowGenPass.cfi"
#include "CommonDebugPass.cfi"
#if PCDX11
	#include "MeshBaker.cfi"
#endif