// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "common.cfi"


//////////////////////////////////////////////////
// shader constants

cbuffer ScaleformMeshAttributes : register(b0)
{
	// VS
	float4x4 cCompositeMat;
	float2x4 cTexGenMat0;
	float2x4 cTexGenMat1;
	float2   cStereoVideoFrameSelect;
	float2   cPad;
};

cbuffer ScaleformRenderParameters : register(b0)
{
	// PS
	float2x4 cBitmapColorTransform;
	float4x4 cColorTransformMat;
	float4 cBlurFilterColor1;
	float4 cBlurFilterColor2;
	float2 cBlurFilterBias;
	float2 cBlurFilterScale;
	float3 cBlurFilterSize;
	float  bPremultiplyAlpha;
};

//////////////////////////////////////////////////
// samplers

// Either compositing
SamplerState ssScaleformInput0 : register(s0);
SamplerState ssScaleformInput1 : register(s1);
//mplerState ssScaleformInput2 : register(s2);

Texture2D   texScaleformInput0 : register(t0);
Texture2D   texScaleformInput1 : register(t1);
//xture2D   texScaleformInput2 : register(t2);

// Or video display
SamplerState ssScaleformInputM : register(s0);

Texture2D   texScaleformInputY : register(t0);
Texture2D   texScaleformInputU : register(t1);
Texture2D   texScaleformInputV : register(t2);
Texture2D   texScaleformInputA : register(t3);

//////////////////////////////////////////////////
// input signatures

#define SF_INPUT_POS	int4 pos : POSITION;

// VS
struct a2v_XY
{
	SF_INPUT_POS
};

struct a2v_Glyph
{
	float4 pos  : POSITION;
	float2 tex0 : TEXCOORD0;
	float4 col0 : COLOR0;
};

struct a2v_XY_C
{
	SF_INPUT_POS
	float4 diff : COLOR;
};

struct a2v_XY_C_F
{
	SF_INPUT_POS
	float4 diff : COLOR0;
	float4 spec : COLOR1;
};

// PS
struct v2f_XY
{
	float4 pos  : POSITION;
	float2 tex0 : TEXCOORD0;
};

struct v2f_XY_noTex
{
	float4 pos  : POSITION;
};

struct v2f_Glyph
{
	float4 pos  : POSITION;
	float2 tex0 : TEXCOORD0;
	float4 col0 : COLOR0;
};

struct v2f_XY_C
{
	float4 pos  : POSITION;
	float4 diff : COLOR;
};

struct v2f_XY_C_F
{
	float4 pos  : POSITION;
	float2 tex0 : TEXCOORD0;
	float4 diff : COLOR0;
	float4 spec : COLOR1;
};

struct v2f_XY_C_F_noTex
{
	float4 pos  : POSITION;
	float4 diff : COLOR0;
	float4 spec : COLOR1;
};

struct v2f_XY_C_F_T2
{
	float4 pos  : POSITION;
	float2 tex0 : TEXCOORD0;
	float2 tex1 : TEXCOORD1;
	float4 diff : COLOR0;
	float4 spec : COLOR1;
};


//////////////////////////////////////////////////
// Vertex shaders (shared)

#define CONVERT_INPUT_POS float4 pos = float4((float2)IN.pos.xy, 0, 1);

float4 UnswizzleInputColor(in float4 col)
{
	return col;
}

v2f_XY VS_XY( a2v_XY IN )
{
	v2f_XY OUT = (v2f_XY) 0;
	CONVERT_INPUT_POS
	OUT.pos = mul( cCompositeMat, pos );
	OUT.tex0 = mul( cTexGenMat0, pos );
	return OUT;
}

v2f_XY_noTex VS_XY_noTex( a2v_XY IN )
{
	v2f_XY_noTex OUT = (v2f_XY_noTex) 0;
	CONVERT_INPUT_POS
	OUT.pos = mul( cCompositeMat, pos );
	return OUT;
}

v2f_Glyph VS_Glyph( a2v_Glyph IN )
{
	v2f_Glyph OUT = (v2f_Glyph) 0;
	OUT.pos = mul( cCompositeMat, IN.pos );
	OUT.tex0 = IN.tex0;
	OUT.col0 = UnswizzleInputColor(IN.col0);
	return OUT;
}

v2f_Glyph VS_GlyphStereoVideo( a2v_Glyph IN )
{
	v2f_Glyph OUT = (v2f_Glyph) 0;
	OUT.pos = mul( cCompositeMat, IN.pos );
	OUT.tex0 = float2(IN.tex0.x * cStereoVideoFrameSelect.x + cStereoVideoFrameSelect.y, IN.tex0.y);
	OUT.col0 = UnswizzleInputColor(IN.col0);
	return OUT;
}

v2f_XY_C VS_XY_C( a2v_XY_C IN )
{
	v2f_XY_C OUT = (v2f_XY_C) 0;
	CONVERT_INPUT_POS
	OUT.pos = mul( cCompositeMat, pos );
	OUT.diff = UnswizzleInputColor(IN.diff);
	return OUT;
}

v2f_XY_C_F VS_XY_C_F( a2v_XY_C_F IN )
{
	v2f_XY_C_F OUT = (v2f_XY_C_F) 0;
	CONVERT_INPUT_POS
	OUT.pos = mul( cCompositeMat, pos );
	OUT.tex0 = mul( cTexGenMat0, pos );
	OUT.diff = UnswizzleInputColor(IN.diff);
	OUT.spec = UnswizzleInputColor(IN.spec);
	return OUT;
}

v2f_XY_C_F_noTex VS_XY_C_F_noTex( a2v_XY_C_F IN )
{
	v2f_XY_C_F_noTex OUT = (v2f_XY_C_F_noTex) 0;
	CONVERT_INPUT_POS
	OUT.pos = mul( cCompositeMat, pos );
	OUT.diff = UnswizzleInputColor(IN.diff);
	OUT.spec = UnswizzleInputColor(IN.spec);
	return OUT;
}

v2f_XY_C_F_T2 VS_XY_C_F_T2( a2v_XY_C_F IN )
{
	v2f_XY_C_F_T2 OUT = (v2f_XY_C_F_T2) 0;
	CONVERT_INPUT_POS
	OUT.pos = mul( cCompositeMat, pos );
	OUT.tex0 = mul( cTexGenMat0, pos );
	OUT.tex1 = mul( cTexGenMat1, pos );
	OUT.diff = UnswizzleInputColor(IN.diff);
	OUT.spec = UnswizzleInputColor(IN.spec);
	return OUT;
}


//////////////////////////////////////////////////
// Pixel shader fragments (shared)

half4 AdjustForMultiply( half4 col )
{
	return lerp( half4( 1, 1, 1, 1 ), col, col.a );
}

half4 PremultiplyAlpha( half4 col )
{
	return bPremultiplyAlpha ? col * col.a : col;
}


//////////////////////////////////////////////////
// SolidColor

half4 PS_SolidColor( v2f_XY_noTex IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( cBitmapColorTransform[0] );
}

technique SolidColor
{
	pass p0
	{
		VertexShader = VS_XY_noTex();
		PixelShader = PS_SolidColor();
	}
}


//////////////////////////////////////////////////
// CxformTexture / CxformMultiplyTexture

half4 CxformTexture( v2f_XY IN )
{
	half4 tex = texScaleformInput0.Sample(ssScaleformInput0, IN.tex0);
	half4 res = tex * cBitmapColorTransform[0] + cBitmapColorTransform[1];
	return res;
}

half4 PS_CxformTexture( v2f_XY IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( CxformTexture( IN ) );
}

half4 PS_CxformMultiplyTexture( v2f_XY IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( AdjustForMultiply( CxformTexture( IN ) ) );
}

technique CxformTexture
{
	pass p0
	{
		VertexShader = VS_XY();
		PixelShader = PS_CxformTexture();
	}
}

technique CxformMultiplyTexture
{
	pass p0
	{
		VertexShader = VS_XY();
		PixelShader = PS_CxformMultiplyTexture();
	}
}


//////////////////////////////////////////////////
// GlyphTexture / GlyphMultiplyTexture

half4 GlyphTexture( v2f_Glyph IN )
{
	half4 tex = texScaleformInput0.Sample(ssScaleformInput0, IN.tex0);
	half4 res = tex * cBitmapColorTransform[0] + cBitmapColorTransform[1];
	return res;
}

half4 PS_GlyphTexture( v2f_Glyph IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( GlyphTexture( IN ) );
}

half4 PS_GlyphMultiplyTexture( v2f_Glyph IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( AdjustForMultiply( GlyphTexture( IN ) ) );
}

technique GlyphTexture
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_GlyphTexture();
	}
}

technique GlyphMultiplyTexture
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_GlyphMultiplyTexture();
	}
}


//////////////////////////////////////////////////
// GlyphAlphaTexture

half4 PS_GlyphAlphaTexture( v2f_Glyph IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	half4 res = half4(IN.col0.rgb, IN.col0.a * texScaleformInput0.Sample(ssScaleformInput0, IN.tex0).a);
	return PremultiplyAlpha( res * cBitmapColorTransform[0] + cBitmapColorTransform[1] );
}

technique GlyphAlphaTexture
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_GlyphAlphaTexture();
	}
}


//////////////////////////////////////////////////
// GlyphTextureYUV / GlyphMultiplyTextureYUV

half3 YUV2RGB( float2 tex )
{
	half Y = (half)texScaleformInputY.Sample(ssScaleformInputM, tex).a;
	half U = (half)texScaleformInputU.Sample(ssScaleformInputM, tex).a - 128.0h / 255.0h;
	half V = (half)texScaleformInputV.Sample(ssScaleformInputM, tex).a - 128.0h / 255.0h;

	half3 rgb = (Y - 16.0h / 255.0h) * 1.164h;
	rgb.r +=  V * 1.596h;
	rgb.g += -U * 0.392h - V * 0.813h;
	rgb.b +=  U * 2.017h;

	return saturate(rgb);
}

half4 GlyphTextureYUV( v2f_Glyph IN )
{
	half4 res = half4(YUV2RGB(IN.tex0), 1) * cBitmapColorTransform[0] + cBitmapColorTransform[1];
	return res;
}

half4 PS_GlyphTextureYUV( v2f_Glyph IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( GlyphTextureYUV( IN ) );
}

half4 PS_GlyphMultiplyTextureYUV( v2f_Glyph IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( AdjustForMultiply( GlyphTextureYUV( IN ) ) );
}

technique GlyphTextureYUV
{
	pass p0
	{
		VertexShader = VS_GlyphStereoVideo();
		PixelShader = PS_GlyphTextureYUV();
	}
}

technique GlyphMultiplyTextureYUV
{
	pass p0
	{
		VertexShader = VS_GlyphStereoVideo();
		PixelShader = PS_GlyphMultiplyTextureYUV();
	}
}


//////////////////////////////////////////////////
// GlyphTextureYUVA / GlyphMultiplyTextureYUVA

half4 GlyphTextureYUVA( v2f_Glyph IN )
{
	half4 res = half4(YUV2RGB(IN.tex0), texScaleformInputA.Sample(ssScaleformInputM, IN.tex0).a) * cBitmapColorTransform[0] + cBitmapColorTransform[1];
	return res;
}

half4 PS_GlyphTextureYUVA( v2f_Glyph IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( GlyphTextureYUVA( IN ) );
}

half4 PS_GlyphMultiplyTextureYUVA( v2f_Glyph IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( AdjustForMultiply( GlyphTextureYUVA( IN ) ) );
}

technique GlyphTextureYUVA
{
	pass p0
	{
		VertexShader = VS_GlyphStereoVideo();
		PixelShader = PS_GlyphTextureYUVA();
	}
}

technique GlyphMultiplyTextureYUVA
{
	pass p0
	{
		VertexShader = VS_GlyphStereoVideo();
		PixelShader = PS_GlyphMultiplyTextureYUVA();
	}
}


//////////////////////////////////////////////////
// CxformGouraud / CxformGouraudMultiply

half4 CxformGouraud( v2f_XY_C_F_noTex IN )
{
	half4 res = IN.diff * cBitmapColorTransform[0] + cBitmapColorTransform[1];
	return half4( res.rgb, res.a * IN.spec.a );
}

half4 PS_CxformGouraud( v2f_XY_C_F_noTex IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( CxformGouraud( IN ) );
}

half4 PS_CxformGouraudMultiply( v2f_XY_C_F_noTex IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( AdjustForMultiply( CxformGouraud( IN ) ) );
}

technique CxformGouraud
{
	pass p0
	{
		VertexShader = VS_XY_C_F_noTex();
		PixelShader = PS_CxformGouraud();
	}
}

technique CxformGouraudMultiply
{
	pass p0
	{
		VertexShader = VS_XY_C_F_noTex();
		PixelShader = PS_CxformGouraudMultiply();
	}
}


//////////////////////////////////////////////////
// CxformGouraudNoAddAlpha / CxformGouraudMultiplyNoAddAlpha

half4 CxformGouraudNoAddAlpha( v2f_XY_C IN )
{
	return IN.diff * cBitmapColorTransform[0] + cBitmapColorTransform[1];
}

half4 PS_CxformGouraudNoAddAlpha( v2f_XY_C IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( CxformGouraudNoAddAlpha( IN ) );
}

half4 PS_CxformGouraudMultiplyNoAddAlpha( v2f_XY_C IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( AdjustForMultiply( CxformGouraudNoAddAlpha( IN ) ) );
}

technique CxformGouraudNoAddAlpha
{
	pass p0
	{
		VertexShader = VS_XY_C();
		PixelShader = PS_CxformGouraudNoAddAlpha();
	}
}

technique CxformGouraudMultiplyNoAddAlpha
{
	pass p0
	{
		VertexShader = VS_XY_C();
		PixelShader = PS_CxformGouraudMultiplyNoAddAlpha();
	}
}


//////////////////////////////////////////////////
// CxformGouraudTexture / CxformGouraudMultiplyTexture

half4 CxformGouraudTexture( v2f_XY_C_F IN )
{
	half4 tex = texScaleformInput0.Sample(ssScaleformInput0, IN.tex0);
	half4 res = lerp( IN.diff, tex, IN.spec.b );
	res = res * cBitmapColorTransform[0] + cBitmapColorTransform[1];
	return half4( res.rgb, res.a * IN.spec.a );
}

half4 PS_CxformGouraudTexture( v2f_XY_C_F IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( CxformGouraudTexture( IN ) );
}

half4 PS_CxformGouraudMultiplyTexture( v2f_XY_C_F IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( AdjustForMultiply( CxformGouraudTexture( IN ) ) );
}

technique CxformGouraudTexture
{
	pass p0
	{
		VertexShader = VS_XY_C_F();
		PixelShader = PS_CxformGouraudTexture();
	}
}

technique CxformGouraudMultiplyTexture
{
	pass p0
	{
		VertexShader = VS_XY_C_F();
		PixelShader = PS_CxformGouraudMultiplyTexture();
	}
}


//////////////////////////////////////////////////
// Cxform2Texture / CxformMultiply2Texture

half4 Cxform2Texture( v2f_XY_C_F_T2 IN )
{
	half4 tex0 = texScaleformInput0.Sample(ssScaleformInput0, IN.tex0);
	half4 tex1 = texScaleformInput1.Sample(ssScaleformInput1, IN.tex1);
	half4 res = lerp( tex1, tex0, IN.spec.b );
	return res * cBitmapColorTransform[0] + cBitmapColorTransform[1];
}

half4 PS_Cxform2Texture( v2f_XY_C_F_T2 IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif
 
	return PremultiplyAlpha( Cxform2Texture( IN ) );
}

half4 PS_CxformMultiply2Texture( v2f_XY_C_F_T2 IN ) : SV_Target
{
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   half4 ret = 0;
   DebugOutput(ret, float4(0, 0, 0, 1));
   return ret;
 #endif

	return PremultiplyAlpha( AdjustForMultiply( Cxform2Texture( IN ) ) );
}

technique Cxform2Texture
{
	pass p0
	{
		VertexShader = VS_XY_C_F_T2();
		PixelShader = PS_Cxform2Texture();
	}
}

technique CxformMultiply2Texture
{
	pass p0
	{
		VertexShader = VS_XY_C_F_T2();
		PixelShader = PS_CxformMultiply2Texture();
	}
}

//////////////////////////////////////////////////
// flash filters

float4 PS_InnerShadow_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f);
	}

	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = lerp(cBlurFilterColor1, base, fcolor.a) * base.a;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	return fcolor;
}

float4 PS_InnerShadowHighlight_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color.a += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
		color.r += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 - (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor.ar = saturate((1.0 - fcolor.ar) - (1.0 - fcolor.ra) * 0.5f);
	fcolor = (cBlurFilterColor1 * fcolor.a + cBlurFilterColor2 * fcolor.r + base * (1.0 - fcolor.a - fcolor.r)) * base.a;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	return fcolor;
}

float4 PS_InnerShadowHighlightKnockout_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color.a += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
		color.r += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 - (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor.ar = saturate((1.0 - fcolor.ar) - (1.0 - fcolor.ra) * 0.5f);
	fcolor = (cBlurFilterColor1 * fcolor.a + cBlurFilterColor2 * fcolor.r + base * (1.0 - fcolor.a - fcolor.r)) * base.a;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	return fcolor;
}

float4 PS_InnerShadowKnockout_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f);
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = cBlurFilterColor1 * (1.0 - fcolor.a) * base.a;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	return fcolor;
}

float4 PS_InnerShadowMul_Box2( v2f_Glyph IN ) : SV_Target
{	
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f);
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = lerp(cBlurFilterColor1, base, fcolor.a) * base.a;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	fcolor = lerp(1, fcolor, fcolor.a);
	return fcolor;
}

float4 PS_InnerShadowMulHighlight_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color.a += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
		color.r += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 - (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor.ar = saturate((1.0 - fcolor.ar) - (1.0 - fcolor.ra) * 0.5f);
	fcolor = (cBlurFilterColor1 * fcolor.a + cBlurFilterColor2 * fcolor.r + base * (1.0 - fcolor.a - fcolor.r)) * base.a;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	fcolor = lerp(1, fcolor, fcolor.a);
	return fcolor;
}

float4 PS_InnerShadowMulHighlightKnockout_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color.a += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
		color.r += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 - (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor.ar = saturate((1.0 - fcolor.ar) - (1.0 - fcolor.ra) * 0.5f);
	fcolor = (cBlurFilterColor1 * fcolor.a + cBlurFilterColor2 * fcolor.r + base * (1.0 - fcolor.a - fcolor.r)) * base.a;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	fcolor = lerp(1, fcolor, fcolor.a);
	return fcolor;
}

float4 PS_InnerShadowMulKnockout_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f);
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = cBlurFilterColor1 * (1.0 - fcolor.a) * base.a;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	fcolor = lerp(1, fcolor, fcolor.a);
	return fcolor;
}

float4 PS_Shadow_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f);
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = cBlurFilterColor1 * fcolor.a * (1.0-base.a) + base;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	return fcolor;
}

float4 PS_ShadowHighlight_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color.a += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
		color.r += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 - (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = (cBlurFilterColor1 * fcolor.a + cBlurFilterColor2 * fcolor.r) * (1.0-base.a) + base;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	return fcolor;
}

float4 PS_ShadowHighlightKnockout_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color.a += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
		color.r += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 - (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = (cBlurFilterColor1 * fcolor.a + cBlurFilterColor2 * fcolor.r) * (1.0-base.a) + base;
	fcolor *= (1.0 - base.a);
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	return fcolor;
}

float4 PS_ShadowKnockout_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f);
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = cBlurFilterColor1 * fcolor.a * (1.0-base.a) + base;
	fcolor *= (1.0 - base.a);
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	return fcolor;
}

float4 PS_ShadowMul_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f);
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = cBlurFilterColor1 * fcolor.a * (1.0-base.a) + base;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	fcolor = lerp(1, fcolor, fcolor.a);
	return fcolor;
}

float4 PS_ShadowMulHighlight_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color.a += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
		color.r += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 - (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;	
	fcolor = (cBlurFilterColor1 * fcolor.a + cBlurFilterColor2 * fcolor.r) * (1.0-base.a) + base;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	fcolor = lerp(1, fcolor, fcolor.a);
	return fcolor;
}

float4 PS_ShadowMulHighlightKnockout_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;	
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color.a += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
		color.r += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 - (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = (cBlurFilterColor1 * fcolor.a + cBlurFilterColor2 * fcolor.r) * (1.0-base.a) + base;
	fcolor *= (1.0 - base.a);
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	fcolor = lerp(1, fcolor, fcolor.a);
	return fcolor;
}

float4 PS_ShadowMulKnockout_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f);
	}
	
	float4 base = texScaleformInput1.SampleLevel(ssScaleformInput1, IN.tex0, 0.f);
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = cBlurFilterColor1 * fcolor.a * (1.0-base.a) + base;
	fcolor *= (1.0 - base.a);
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	fcolor = lerp(1, fcolor, fcolor.a);
	return fcolor;
}


float4 PS_Shadowonly_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;	
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f);
	}
	
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = cBlurFilterColor1 * fcolor.a;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	return fcolor;
}

float4 PS_ShadowonlyHighlight_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color.a += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
		color.r += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 - (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
	}
	
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = cBlurFilterColor1 * fcolor.a;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	return fcolor;
}

float4 PS_ShadowonlyMul_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f);
	}
	
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = cBlurFilterColor1 * fcolor.a;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	fcolor = lerp(1, fcolor, fcolor.a);
	return fcolor;
}

float4 PS_ShadowonlyMulHighlight_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color.a += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
		color.r += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 - (cBlurFilterBias + i) * cBlurFilterScale, 0.f).a;
	}
	
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = cBlurFilterColor1 * fcolor.a;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	fcolor = lerp(1, fcolor, fcolor.a);
	return fcolor;
}

float4 PS_BlurFilter_Box1( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float  i = 0.0f;
	for (i = -cBlurFilterSize.x; i <= cBlurFilterSize.x; i++)
	{	
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + i * cBlurFilterScale, 0.f);
	}
	
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	return fcolor;
}

float4 PS_BlurFilterMul_Box1( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{	
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + i * cBlurFilterScale, 0.f);
	}
	
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	fcolor = lerp(1, fcolor, fcolor.a);
	return fcolor;
}

float4 PS_BlurFilter_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2  i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)	
	{
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + i * cBlurFilterScale, 0.f);
	}
	
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	return fcolor;
}

float4 PS_BlurFilterMul_Box2( v2f_Glyph IN ) : SV_Target
{
	float4 color = 0.0f;
	float2 i = 0.0f;
	for (i.x = -cBlurFilterSize.x; i.x <= cBlurFilterSize.x; i.x++)
	for (i.y = -cBlurFilterSize.y; i.y <= cBlurFilterSize.y; i.y++)
	{
		color += texScaleformInput0.SampleLevel(ssScaleformInput0, IN.tex0 + i * cBlurFilterScale, 0.f);
	}
	
	float4 fcolor = color * cBlurFilterSize.z;
	fcolor = fcolor * cBitmapColorTransform[0] + cBitmapColorTransform[1] * fcolor.a;
	fcolor = lerp(1, fcolor, fcolor.a);
	return fcolor;
}

float4 PS_GlyphTextureMat( v2f_Glyph IN ) : SV_Target
{
	float4 c = texScaleformInput0.Sample(ssScaleformInput0, IN.tex0);
	float4 fcolor = mul(c, cColorTransformMat) + cBitmapColorTransform[1] * (c.a + cBitmapColorTransform[1].a);
	return fcolor;
}

float4 PS_GlyphTextureMatMul( v2f_Glyph IN ) : SV_Target
{
	float4 c = texScaleformInput0.Sample(ssScaleformInput0, IN.tex0);
	float4 fcolor = mul(c, cColorTransformMat) + cBitmapColorTransform[1] * (c.a + cBitmapColorTransform[1].a);
	fcolor = lerp(1, fcolor, fcolor.a);
	return fcolor;
}

//////////////////////////////////////////////////
//////////////////////////////////////////////////
technique BlurFilter_Box1
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_BlurFilter_Box1();
	}
}

technique BlurFilter_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_BlurFilter_Box2();
	}
}

technique BlurFilterMul_Box1
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_BlurFilterMul_Box1();
	}
}

technique BlurFilterMul_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_BlurFilterMul_Box2();
	}
}

technique InnerShadow_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_InnerShadow_Box2();
	}
}

technique InnerShadowHighlight_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_InnerShadowHighlight_Box2();
	}
}

technique InnerShadowMul_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_InnerShadowMul_Box2();
	}
}

technique InnerShadowMulHighlight_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_InnerShadowMulHighlight_Box2();
	}
}

technique InnerShadowKnockout_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_InnerShadowKnockout_Box2();
	}
}

technique InnerShadowHighlightKnockout_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_InnerShadowHighlightKnockout_Box2();
	}
}

technique InnerShadowMulKnockout_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_InnerShadowMulKnockout_Box2();
	}
}

technique InnerShadowMulHighlightKnockout_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_InnerShadowMulHighlightKnockout_Box2();
	}
}

technique Shadow_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_Shadow_Box2();
	}
}

technique ShadowHighlight_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_ShadowHighlight_Box2();
	}
}

technique ShadowMul_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_ShadowMul_Box2();
	}
}

technique ShadowMulHighlight_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_ShadowMulHighlight_Box2();
	}
}

technique ShadowKnockout_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_ShadowKnockout_Box2();
	}
}

technique ShadowHighlightKnockout_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_ShadowHighlightKnockout_Box2();
	}
}

technique ShadowMulKnockout_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_ShadowMulKnockout_Box2();
	}
}

technique ShadowMulHighlightKnockout_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_ShadowMulHighlightKnockout_Box2();
	}
}

technique Shadowonly_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_Shadowonly_Box2();
	}
}

technique ShadowonlyHighlight_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_ShadowonlyHighlight_Box2();
	}
}

technique ShadowonlyMul_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_ShadowonlyMul_Box2();
	}
}

technique ShadowonlyMulHighlight_Box2
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_ShadowonlyMulHighlight_Box2();
	}
}

technique GlyphTextureMat
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_GlyphTextureMat();
	}
}

technique GlyphTextureMatMul
{
	pass p0
	{
		VertexShader = VS_Glyph();
		PixelShader = PS_GlyphTextureMatMul();
	}
}