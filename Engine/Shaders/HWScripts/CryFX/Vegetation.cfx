// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "Common.cfi"
#include "VegetationValidations.cfi"

float Script : STANDARDSGLOBAL 
<
	string Script =
		"Public;"
		"SupportsAttrInstancing;"
		"ShaderDrawType = Light;"
		"ShaderType = Vegetation;"
	#if %VERTCOLORS
		"VertexColors"
	#endif
	#if %DETAIL_BENDING || %VEGETATION_EXT_BENDING
		#if %GRASS
			"VT_DetailBendingGrass;"
		#elif %LEAVES || %VEGETATION_EXT_BENDING
			"VT_DetailBending;"
		#endif
	#endif
	#if ENABLE_TESSELLATION
		"HWTessellation;"
#endif
		"SupportsDeferredShading;"
		"SupportsFullDeferredShading;"
		"NoChunkMerging;"
>;

// Un-Tweakables /////////////////

float4 BaseTCMatrix        : PB_TerrainBaseMatrix;
float4 BlendTerrainColInfo : PB_BlendTerrainColInfo;

///////////////// Samplers //////////////////
OPACITYMAP
ENVIRONMENTCUBEMAP
DISSOLVE_NOISE_MAP
TERRAIN_BASE_MAP
TERRAIN_NORM_MAP

sampler2D fromObjSampler0 = sampler_state
{
	Texture = $FromObj;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	MipFilter = LINEAR;
	AddressU = Clamp;
	AddressV = Clamp;  
	sRGBLookup = true; 
};

#if %BLENDLAYER
Texture2D Diffuse2Tex : register(t9)
<
	UIName = "Second Diffuse Map";
	UIDescription = "Diffuse Map for the second blend layer";
	sRGBLookup = true
> = TM_Custom;

Texture2D Bump2Tex : register(t10)
<
	UIName = "Second Bump Map";
	UIDescription = "Bump Map for the second blend layer";
> = TM_CustomSecondary;

Texture2D Height2Tex : register(t8)
<
	UIName = "Second Height Map";
	UIDescription = "Height Map for the second blend layer";
> = TM_SubSurface;

Texture2D BlendTex : register(t11)
<
	UIName = "Blending Map";
	UIDescription = "Blending Map between the two layers";
> = TM_Opacity;

Texture2D smoothness2Tex : register(t7)
<
	UIName = "Second Gloss Map";
	UIDescription = "Gloss Map for the second blend layer";
> = TM_DecalOverlay;

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

// Tweakables //////////////////////

#if %LEAVES
half CapOpacityFalloff
<
	register = REG_PM_PARAM_0.x;
	string UIWidget = "slider";
	string UIHelp = "Caps parallel view opacity fall off";
	string UIName = "Cap opacity fall off";

	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.001;
> = 1.0;
#endif

#if %LEAVES  || %GRASS 
half4 TransmittanceColor
<
	register = REG_PM_PARAM_1;
	string UIHelp = "Color tint for translucency";
	string UIName = "Transmittance Color";
	string UIWidget = "color";
> = {1.0, 1.0, 0.6, 1.0};

float NormalViewDependency
< 
	register = REG_PM_PARAM_2.x;
	string UIHelp = "Orients normal towards viewer (useful for planes)";
	string UIName = "Normal View Dependency";
	string UIWidget = "slider";
	float UIMin = 0;
	float UIMax = 0.95;
	float UIStep = 0.05; 
> = 0.5;  

float BackDiffuseMultiplier
< 
	register = REG_PM_PARAM_2.y;
	string UIHelp = "Adjusts translucency intensity";
	string UIName = "Transmittance Multiplier";
	string UIWidget = "slider";
	float UIMin = 0;
	float UIMax = 4.0;
	float UIStep = 0.05; 
> = 1.0; 
#endif

float BlendTerrainCol
< 
	register = REG_PM_PARAM_2.z;
	string UIHelp = "Sets balance between terrain and vegetation color";
	string UIName = "Terrain Color Blend";
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.05; 
> = 0.0; 

float BlendTerrainColDist
< 
	register = REG_PM_PARAM_2.w;
	string UIHelp = "Sets balance between terrain and vegetation color";
	string UIName = "Terrain Color Blend Dist";
	string UIWidget = "slider";
	float UIMin = 0.01;
	float UIMax = 1.0;
	float UIStep = 0.05; 
> = 0.5; 

#if %DETAIL_MAPPING
half DetailBumpScale
<
	register = REG_PM_PARAM_3.x;
	string UIHelp = "Set detail bump scale";                     
	string UIName = "Detail bump scale";    	  
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.1;
> = 0.5;

half DetailDiffuseScale
<
	register = REG_PM_PARAM_3.y;
	string UIHelp = "Set diffuse detail blend scale";                     
	string UIName = "Detail diffuse scale";    	  
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.1;
> = 0.5;

half DetailGlossScale
<
	register = REG_PM_PARAM_3.z;
	string UIHelp = "Set gloss detail blend scale";                     
	string UIName = "Detail gloss scale";    	  
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.1;
> = 0.5;
#endif

#if %BLENDLAYER
half BlendFactor
<
	register = REG_PM_PARAM_3.w;
	string UIHelp = "Change visbility of blended layer";
	string UIName = "Blend Factor";
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 16.0;
	float UIStep = 0.2;
> = 8.0;

half BlendLayer2Tiling
<
	register = REG_PM_PARAM_4.x;
	string UIHelp = "Change tiling of 2nd blend layer";
	string UIName = "Blend Layer 2 Tiling";
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 20.0;
	float UIStep = 0.005;
> = 1.0;

half BlendFalloff
<
	register = REG_PM_PARAM_4.y;
	string UIHelp = "Change falloff of blending";
	string UIName = "Blend Falloff";
	string UIWidget = "slider";
	float UIMin = 0.1;
	float UIMax = 128.0;
	float UIStep = 1.0;
> = 32.0;

half BlendLayer2Specular
<
	register = REG_PM_PARAM_4.z;
	string UIHelp = "Change specular intensity of 2nd blend layer";
	string UIName = "Blend Layer 2 Spec";
	string UIWidget = "slider";
	float UIMin = 0.02;
	float UIMax = 0.05;
	float UIStep = 0.001;
> = 0.04;

half BlendMaskTiling
<
	register = REG_PM_PARAM_4.w;
	string UIHelp = "Change tiling of blend mask";
	string UIName = "Blend Mask Tiling";
	string UIWidget = "slider";
	float UIMin = 0.05;
	float UIMax = 20.0;
	float UIStep = 0.05;
> = 1.0;
#else

// <Deprecated> Will be removed post C3. This is needed for art to be able to optimize console materials (eg:disabling blend layer. Since veg uses vertex alpha as AO and blend layer uses color for layer blending => breaks look)
half VertexAlphaBlendFactor
<
	register = REG_PM_PARAM_5.x;
	string UIName = "Vtx Alpha Blend Factor";
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.2;
> = 1.0;

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Custom shading pass structure /////////////////////////////////////

struct CustomForwardShadingAttribs
{
	float3 transmittanceColor;
};

#include "ShadeLib.cfi"

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Callback_ShadingDirect(in ForwardShadingAttribs attribs, in ForwardLightParams light, out float3 diffuseAcc, out float3 specularAcc)
{
	float3 viewVec = normalize(-attribs.worldPos);
	float NdotL = saturate(dot(attribs.normal, light.lightVec));

	specularAcc = SpecularBRDF(attribs.normal, viewVec, light.lightVec, attribs.smoothness, attribs.reflectance) * NdotL;
	
#if %GRASS || %LEAVES	
	diffuseAcc = ThinTranslucencyBRDF(attribs.normal, light.lightVec, attribs.custom.transmittanceColor);
#else
	diffuseAcc = DiffuseBRDF(attribs.normal, viewVec, light.lightVec, attribs.smoothness, NdotL).xxx;
#endif
	
	diffuseAcc = diffuseAcc.x * light.illuminance;
	specularAcc = specularAcc * light.illuminance;
}

#include "TiledShading.cfi"
#include "ForwardShading.cfi"

////////////////////////////////////////////////////////////////////////////////////////////////////
// Vertex shader
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "VertexLib.cfi"

struct vtxOutVegetation
{
#if %_DS || %_PS || !ENABLE_TESSELLATION || %_RT_NO_TESSELLATION
	OUT_P
#endif
	float4 baseTC               : TEXCOORDN;
	float4 vView                : TEXCOORDN;
	
	float4 screenProj           : TEXCOORDN;
	float4 terrainParams        : TEXCOORDN;

#if !%GRASS
	float4 tangVec              : TEXCOORDN;
	float4 binormVec            : TEXCOORDN;
#endif

#if ENABLE_TESSELLATION && !%_RT_NO_TESSELLATION
	half4 vNormal               : TEXCOORDN;
#endif

#if %_RT_FOG
	float4 AvgFogVolumeContrib  : TEXCOORDN;
#endif
};

vtxOutVegetation VegetationVS(app2vertGeneral IN)
{
	vtxOutVegetation OUT = (vtxOutVegetation)0;

	streamPos vertPassPos = (streamPos)0;
	streamPos_FromGeneral(IN, vertPassPos);

#if !ENABLE_TESSELLATION || %_RT_NO_TESSELLATION
	OUT.HPosition = Pos_VS_General(g_VS_ViewProjZeroMatr, vertPassPos);
	OUT.screenProj = HPosToScreenTC(OUT.HPosition);
#else
	OUT.screenProj = HPosToScreenTC(Pos_VS_General(g_VS_ViewProjZeroMatr, vertPassPos));
#endif

	// Apply texture modifiers
	_TCModify(vertPassPos.baseTC, OUT.baseTC, vertPassPos.Position, vertPassPos.ObjToTangentSpace[2], TS_DIFFUSE);

	float3 worldTangentS = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[0]) );
	float3 worldTangentT = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[1]) );
	float3 worldTangentN = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[2]) );

	float3 outPos = vertPassPos.WorldPos.xyz; 
#if %_RT_OBJ_IDENTITY
	outPos.xyz -= g_VS_WorldViewPos.xyz;
#else
	vertPassPos.WorldPos.xyz += g_VS_WorldViewPos.xyz;
#endif

	OUT.vView.xyz = outPos.xyz;

#if ENABLE_TESSELLATION && !%_RT_NO_TESSELLATION
	OUT.vNormal.xyz = normalize(mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.Normal.xyz));
#endif

#if !%GRASS
	// Output tangents only for cases that require it - alpha blending, recursive passes
	OUT.tangVec = float4(worldTangentS.xyz, vertPassPos.Tangent.w);    
	OUT.binormVec.xyz = worldTangentT;
#endif

	// optimization: ambient multiplier * ambient occlusion 
	float fAlpha = vertPassPos.Color.w;
#if %BLENDLAYER
	// blend layer vtx alpha overlaps with alpha on vegetation. Use blue channel instead
	fAlpha = vertPassPos.Color.z;
	OUT.Color0.z = vertPassPos.Color.w;
#endif

	OUT.terrainParams.w = fAlpha;
	// <Deprecated> Will be removed post C3. This is needed for art to be able to optimize console materials (eg:disabling blend layer. Since veg uses vertex alpha as AO and blend layer uses color for layer blending => breaks look)
	#if !%BLENDLAYER
		OUT.terrainParams.w = lerp(1, fAlpha, VertexAlphaBlendFactor);
	#endif

#if %_RT_FOG
	// Pass through parallel view opacity falloff
	#if !%GRASS && %LEAVES
		float alphaTest = Get_MaterialAlphaTest();
		OUT.binormVec.w = ParallelOpacityFalloff(vertPassPos.WorldPos.xyz, worldTangentN.xyz, CapOpacityFalloff, alphaTest);
	#endif

#if !%_RT_PER_INSTANCE_CB_TEMP
	#if !%_RT_VOLUMETRIC_FOG
		float fVolumetricFogDensity = GetVolumetricFogDensity(vertPassPos.WorldPos.xyz);
		OUT.vView.w = fVolumetricFogDensity;
		OUT.AvgFogVolumeContrib = AvgFogVolumeContrib;
	#else
		OUT.AvgFogVolumeContrib = GetVolumetricFogAnalyticalColor(outPos.xyz).xyzw;
	#endif
#else
	OUT.AvgFogVolumeContrib = Fwd_GetLocalFogColor(vertPassPos.WorldPos.xyz, OUT.vView.xyz);
#endif
#endif
	return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Pixel shader
////////////////////////////////////////////////////////////////////////////////////////////////////

void GatherMaterialAttribs(in half3x3 mTangentToWS, in float2 baseTC, in float3 vertexPos, in half4 vertexAlpha, out MaterialAttribsCommon attribs)
{
	attribs = MaterialAttribsDefault();
	
	// Base layer
	half3 vNormalTS = half3(0, 0, 1);
#if %NORMAL_MAP
	vNormalTS = GetNormalMap(normalsTex, baseTC.xy);
#endif
	attribs.Smoothness = MatSpecColor.w * GetSmoothnessTex(smoothnessTex, baseTC.xy);
	
	attribs.Albedo = MatDifColor.rgb * GetDiffuseTex(diffuseTex, baseTC.xy).rgb;
	attribs.Reflectance = MatSpecColor.rgb;
#if %SPECULAR_MAP
	attribs.Reflectance *= GetSpecularTex(specularTex, baseTC.xy).rgb;
#endif

	// Blend layer
#if %BLENDLAYER
	half blendFac = GetLayerBlendingValue(BlendTex, baseTC.xy * BlendMaskTiling, 0, vertexAlpha, BlendFactor, BlendFalloff);
	
	half4 diffuseMap2 = GetDiffuse2Tex(Diffuse2Tex, baseTC.xy * BlendLayer2Tiling);
	attribs.Albedo = lerp(attribs.Albedo, diffuseMap2, blendFac);
	
	half glossLayer2 = GetSmoothness2Tex(smoothness2Tex, baseTC.xy * BlendLayer2Tiling);
	attribs.Smoothness = lerp(attribs.Smoothness, glossLayer2, blendFac);
	
	attribs.Reflectance = lerp(attribs.Reflectance, BlendLayer2Specular, blendFac);
	
	half3 vNormal2 = GetNormalMap(Bump2Tex, baseTC.xy * BlendLayer2Tiling);
	vNormalTS = lerp(vNormalTS, vNormal2, blendFac);
#endif

	// Detail mapping
#if %DETAIL_MAPPING
	half3 detailScales = half3(DetailBumpScale, DetailDiffuseScale, DetailGlossScale);
	half4 detailMap = GetDetailTex(detailTex, baseTC.xy * CM_DetailTilingAndAlphaRef.xy) * detailScales.xxyz;
#if %ALPHAMASK_DETAILMAP
	detailMap *= GetAlphaTex(diffuseTex, baseTC.xy);
#endif

	vNormalTS.xy += detailMap.xy;
	attribs.Smoothness += attribs.Smoothness * detailMap.w;
	attribs.Albedo += attribs.Albedo * detailMap.z;
#endif

	// Compute world space normal
	attribs.NormalWorld = normalize(mTangentToWS[2]);
#if %NORMAL_MAP || %WRINKLE_BLENDING || %DETAIL_MAPPING
	attribs.NormalWorld = normalize(mul(vNormalTS, mTangentToWS));
#endif

#if %LEAVES || %GRASS
	// Orient normal of vegetation planes towards viewer to reduce Fresnel gain and mimic some forward scattering 
	attribs.NormalWorld = normalize(attribs.NormalWorld - normalize(vertexPos) * NormalViewDependency);
#endif

	// Transmittance
#if %GRASS || %LEAVES
	half translucency = BackDiffuseMultiplier;
	#if %LEAVES
		translucency *= GetOpacityTex(opacityTex, baseTC.xy);
	#endif
	
	attribs.LightingModel = LIGHTINGMODEL_TRANSMITTANCE;
	attribs.Transmittance = saturate(translucency) * TransmittanceColor.rgb;
#endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

pixout VegetationPS(vtxOutVegetation IN, bool bIsFrontFace : SV_IsFrontFace)
{
#if %_RT_ALPHATEST
	half diffuseMapAlpha = GetAlphaTex(diffuseTex, IN.baseTC.xy);
	clip(diffuseMapAlpha - Get_MaterialAlphaTest());
#endif

	// Gather surface material attributes
	MaterialAttribsCommon commonAttribs;
#if !%GRASS	
	half flip = IN.tangVec.w * (bIsFrontFace ? 1 : -1);
	half3 tangent = normalize(IN.tangVec.xyz + 1e-6);
	half3 bitangent = normalize(IN.binormVec.xyz + 1e-6);
	half3x3 mTangentToWS = half3x3(tangent, bitangent, cross(tangent, bitangent) * flip);
#else
	half3x3 mTangentToWS = half3x3(half3(1, 0, 0), half3(0, 1, 0), half3(0, 0, 1));
#endif

	GatherMaterialAttribs(mTangentToWS, IN.baseTC.xy, IN.vView.xyz, IN.terrainParams.w, commonAttribs);

	ForwardShadingAttribs fwdAttribs;
	fwdAttribs.screenUV = IN.screenProj.xy / IN.screenProj.w;
	fwdAttribs.worldPos = IN.vView.xyz;
	fwdAttribs.custom.transmittanceColor = commonAttribs.Transmittance;

	float3 diffuseAcc = 0, specularAcc = 0;
	Fwd_StandardOpaqueShading(commonAttribs, fwdAttribs, diffuseAcc, specularAcc);

	pixout OUT = (pixout)0;
	OUT.Color.rgb = diffuseAcc + specularAcc;
	OUT.Color.a = 1;

#if !%_RT_PER_INSTANCE_CB_TEMP
#if %_RT_FOG
	Fwd_ApplyFog(In.AvgFogVolumeContrib, IN.HPosition, OUT.Color);
#endif
#endif

	return OUT;
}

#include "VegetationTess.cfi"

//////////////////////////////// techniques ////////////////

technique General         
<
	string Script =     
		"TechniqueZ=ZPass;"
	//#if (%LEAVES || %BLENDLAYER) && !ENABLE_TESSELLATION
		"TechniqueZPrepass=ZPrepass;"
	//#endif
	#if !%GRASS
		"TechniqueMotionBlur=MotionBlurPass;"         
	#endif
		"TechniqueShadowGen=ShadowGen;" 
		"TechniqueDebug=DebugPass;"
>
{
	pass p0
	{
		VertexShader = VegetationVS() VegetationVS;
#ifdef ENABLE_TESSELLATION
		HullShader   = VegetationHS() VegetationHS;
		DomainShader = VegetationDS() VegetationDS;
#endif
		PixelShader = VegetationPS() VegetationPS;

		ZEnable = true;
		ZWriteEnable = true;

#if %GRASS || %LEAVES
		CullMode = None;
#else
		CullMode = Back; 
#endif
	}
}

//////////////////////////////// Common techniques ////////////////

//#if (%LEAVES || %BLENDLAYER) && !ENABLE_TESSELLATION
	#include "CommonZPrePass.cfi"
//#endif
#include "CommonZPass.cfi"
#if !%GRASS
	#include "CommonMotionBlurPass.cfi"
#endif
#include "ShadowCommon.cfi"
#include "CommonShadowGenPass.cfi"
#include "CommonDebugPass.cfi"
