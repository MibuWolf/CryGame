// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "Common.cfi"
#include "ShadeLib.cfi"
#include "ModificatorVT.cfi"
#include "ModificatorTC.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
	string Script =
		"Public;"
		"ShaderDrawType = General;"
		"ShaderType = FX;"
>;

SCENE_DEPTH_MAP
NOISE_3D_MAP

// Tweakables /////////////////

float BeamLength
<
	register = REG_PM_PARAM_0.x;
	string UIWidget = "slider";
	string UIName = "Length";
	float UIMin = 0.0;
	float UIMax = 20.0;
	float UIStep = 0.01;
> = 10;

float OrigLength
<
	register = REG_PM_PARAM_0.y;
	string UIWidget = "slider";
	string UIName = "OriginalLength";
	float UIMin = 0.0;
	float UIMax = 20.0;
	float UIStep = 0.01;
> = 10;

float OrigWidth
<
	register = REG_PM_PARAM_0.z;
	string UIWidget = "slider";
	string UIName = "OriginalWidth";
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.01;
> = 1;

float StartRadius
<
	register = REG_PM_PARAM_0.w;
	string UIWidget = "slider";
	string UIName = "StartRadius";
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.01;
> = 1;

float EndRadius
<
	register = REG_PM_PARAM_1.x;
	string UIWidget = "slider";
	string UIName = "EndRadius";
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.01;
> = 2;

float FinalMultiplier
<
	register = REG_PM_PARAM_1.y;
	string UIWidget = "slider";
	string UIName = "ColorMultiplier";
	float UIMin = 0.0;
	float UIMax = 32.0;
	float UIStep = 0.01;
> = 1.0;

float SoftIntersectionFactor
<
	register = REG_PM_PARAM_1.z;
	string UIHelp = "Controls softness of water surface intersection with other opaque scene geometry";                   
	string UIName = "Soft intersection factor";      
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.1;  
> = 1.0;

float viewDependencyFactor
<
	register = REG_PM_PARAM_1.w;
	string UIHelp = "Controls view dependence attenuation";                   
	string UIName = "View dependency factor";      
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 10.0;
	float UIStep = 0.1;  
> = 2.0;

float4 StartColor
<
	register = REG_PM_PARAM_2;
	string UIWidget = "color";
	string UIName = "StartColor";
	float UIMin = 0.0;
	float UIMax = 4.0;
	float UIStep = 0.01;
	> = {1.0, 1.0, 1.0, 1.0};

float4 EndColor
<
	register = REG_PM_PARAM_3;
	string UIWidget = "color";
	string UIName = "EndColor";
	float UIMin = 0.0;
	float UIMax = 4.0;
	float UIStep = 0.01;
> = {1.0, 1.0, 1.0, 0.0};

SamplerState ssForwardBilinearWrap : register(s10) = SS_MaterialBilinearWrap;

/////////////////////////////

struct v2f
{
	float4 HPosition   : POSITION;
	float4 baseTC      : TEXCOORDN; 
	float4 screenProj  : TEXCOORDN; 
	half4 Color        : TEXCOORDN; 
#if %NOISE
	half4 noiseTC      : TEXCOORDN;
#endif
};

///////////////// vertex shader //////////////////

v2f TemplBeamVS(app2vertGeneral IN)
{
	v2f OUT = (v2f)0; 

	streamPos vertPassPos = (streamPos)0;
	streamPos_FromGeneral(IN, vertPassPos);

	float4 color = 1;
	float fLerp = 1;
#if !%MUZZLEFLASH
	fLerp = vertPassPos.Position.x * rcp(OrigLength);

	vertPassPos.Position.x = fLerp * BeamLength;
	float fCurRadius = lerp(StartRadius, EndRadius, fLerp);
	vertPassPos.Position.yz = vertPassPos.Position.yz * rcp(OrigWidth) * fCurRadius;

	color = StartColor * saturate(1 - fLerp) + EndColor * fLerp;
#endif

	OUT.baseTC = vertPassPos.baseTC;
	OUT.HPosition = Pos_VS_General(CV_ViewProjZeroMatr, vertPassPos);

	float3 vCamera = normalize(vertPassPos.WorldPos);
	float3 vNormal = normalize(mul(vertPassPos.InstMatrix, float4(vertPassPos.ObjToTangentSpace[2].xyz, 0.0f)));

	float d = dot(vCamera.xyz, vNormal);
	d = saturate(d * d * viewDependencyFactor);
	d *= d;

	color.xyz *= MatDifColor;
	OUT.Color = FinalMultiplier * color * d;

	// Output projected texture coordinates
	OUT.screenProj = HPosToScreenTC(OUT.HPosition);

#if %NOISE
	float4 noiseGen = float4(0.05, 0, 0, CV_AnimGenParams.z * 0.1);
	OUT.noiseTC.x = dot(vertPassPos.Position, noiseGen);
	noiseGen = float4(0, 0.05, 0, CV_AnimGenParams.z * 0.15);
	OUT.noiseTC.y = dot(vertPassPos.Position, noiseGen);
	noiseGen = float4(0, 0, 0.1, CV_AnimGenParams.z * 0.05);
	OUT.noiseTC.z = dot(vertPassPos.Position, noiseGen);
#endif 

	float3 vNorm = vertPassPos.ObjToTangentSpace[2];
	float4 baseTC = vertPassPos.baseTC;  
	_TCModify(baseTC, OUT.baseTC, vertPassPos.Position, vNorm, TS_DIFFUSE);

	return OUT;
}


///////////////// pixel shader //////////////////

pixout TemplBeamPS(v2f IN)
{
	pixout OUT;

	half4 baseTex = GetDiffuseTex(diffuseTex, IN.baseTC.xy);  
	float sceneDepth = linearDepthTex.Load(int3(IN.screenProj.xy / IN.screenProj.w * CV_ScreenSize.xy, 0)) * CV_NearFarClipDist.y;
	half fNoise = 1;
#if %NOISE  
	fNoise = saturate(noise3DTex.Sample(ssForwardBilinearWrap, IN.noiseTC.xyz).a * 2.0h - 0.25h);
#endif

	float beamDepth = IN.screenProj.w;
	float depth = sceneDepth - beamDepth;
	half softIntersect = saturate(SoftIntersectionFactor * min(depth, IN.screenProj.w));
	half fadeBeam = min(softIntersect, saturate(SoftIntersectionFactor * (beamDepth - CV_NearFarClipDist.x)));

	IN.Color.w = 1.h;
	OUT.Color = baseTex * IN.Color * fadeBeam * fNoise;

	return OUT;
}


//////////////////////////////// technique ////////////////

technique General
{
	pass p0
	{
		VertexShader = TemplBeamVS();
		PixelShader = TemplBeamPS();
		
		ZEnable = true;
		ZWriteEnable = false;
		CullMode = None;
		
		SrcBlend = ONE;
		DestBlend = ONE;
		AlphaBlendEnable = true;
	}
}