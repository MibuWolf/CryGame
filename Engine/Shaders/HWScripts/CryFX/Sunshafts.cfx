// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "Common.cfi"
#include "shadelib.cfi"
#include "PostEffectsLib.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "NoPreview;"
           "LocalConstants;"
           "ShaderDrawType = Custom;"
           "ShaderType = PostProcess;"
>; 

////////////////////////////////////////////////////////////////////////////////////////////////////
/// OcclusionCheckQuad technique ///////////////////////////////////////////////////////////////////

struct vtxOcclCheck
{
  float4 HPosition  : POSITION;
};

float4 OcclCheckParams;

vtxOcclCheck OcclCheckVS(vtxInWPOS IN)
{

  vtxOcclCheck OUT = (vtxOcclCheck)0; 

  float4 vPos = IN.Position;
  vPos.y = 1 -vPos.y;
  OUT.HPosition = float4(vPos.xy*2-1, vPos.z, 1.0);

  return OUT;

}

pixout OcclCheckPS(vtxOcclCheck IN)
{

  pixout OUT = (pixout) 0;
  OUT.Color = float4(1,0,0,1);
  return OUT;

}

technique OcclCheckTechnique
{
  pass p0
  {
    VertexShader = OcclCheckVS();            
    PixelShader = OcclCheckPS();
    CullMode = None;        
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// For merged edgeAA + SunShafts technique ////////////////////////////////////////////////////////

float4 texToTexParams0;
float4 texToTexParams1;

struct vtxOutAAOpt
{
  float4 HPosition : POSITION;
  float2 baseTC    : TEXCOORD0;
#if %_RT_SAMPLE4
  float4 baseTC1   : TEXCOORD1;
  float4 baseTC2   : TEXCOORD2;
#endif
};

vtxOutAAOpt EdgeAAOptVS(vtxIn IN)
{
  vtxOutAAOpt OUT = (vtxOutAAOpt)0; 
  OUT.HPosition = Get2dHPos(IN.Position);
  OUT.baseTC = IN.baseTC.xy;

#if %_RT_SAMPLE4
	static const half3 vOffs = half3(0.h, -1.h, 1.h);
	OUT.baseTC1 = IN.baseTC.xyxy + vOffs.xyyx * g_VS_ScreenSize.zwzw * 2;
	OUT.baseTC2 = IN.baseTC.xyxy + vOffs.zxxz * g_VS_ScreenSize.zwzw * 2;
#endif

  return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// SunShafts technique //////////////////////////////////////////////////////////////////////////

/// Constants ////////////////////////////

float4 PI_sunShaftsParams < psregister = c0; >;
float4x4 SunShafts_ViewProj;
float4 SunShafts_SunPos;
float4 SunShafts_SunCol;
float4x4 mColorMatrix;
float4 ScratchParams;

cbuffer CBSunShafts : register(b0)
{
	struct
	{
		float4 sunPos;
		float4 params;
	} cbSunShafts;
};

struct vtxOutSunShaftsGen
{
  float4 HPosition  : POSITION; 
  float2 baseTC       : TEXCOORD0;
};

/// Samplers ////////////////////////////

vtxOutSunShaftsGen SunShaftsGenVS(vtxIn IN)
{
  vtxOutSunShaftsGen OUT = (vtxOutSunShaftsGen)0; 
  OUT.HPosition = Get2dHPos(IN.Position);
  
  OUT.baseTC.xy = IN.baseTC.xy;

  return OUT;
}

///////////////// pixel shader //////////////////

// workaround for shader constant trashing bug on 360 - needs to be fixed soon.
float4 hposScale : PB_HPosScale < psregister = c0; >;

pixout SunShaftsMaskGenPS(vtxOut IN)
{
  pixout OUT = (pixout) 0;

  int nQuality = GetShaderQuality();

  float2 sampleUV = MapViewportToRaster(IN.baseTC.xy);

  half sceneDepth = GetLinearDepth(_tex0, sampleUV);
  OUT.Color = half4(sceneDepth, sceneDepth, sceneDepth, 1 - sceneDepth.x);

  half3 sceneCol = 0.25.xxx;

  sceneCol = tex2D(_tex1, sampleUV); // comes straight from hdr scaled target
	
  // cheaper and looks nicer
  OUT.Color.xyz *= dot(sceneCol, 0.33*4);

  return OUT;
}

pixout SunShaftsGenPS(vtxOutSunShaftsGen IN)
{
  pixout OUT;

  float2 sunPosProj = cbSunShafts.sunPos.xy;

	float fSign = cbSunShafts.sunPos.w;
  
  float2 sunVec = ( GetScaledScreenTC(sunPosProj.xy) - IN.baseTC.xy)/CV_HPosScale.xy;
  
  float fAspectRatio =  1.333 * (CV_ScreenSize.y*CV_HPosScale.x) /(CV_ScreenSize.x*CV_HPosScale.y);
  
  float sunDist = saturate(fSign) * saturate( 1 - saturate(length(sunVec * float2(1, fAspectRatio))*cbSunShafts.params.y));// * 
                            //saturate(saturate(fSign)*0.6+0.4  ) );
                            // *(1.0 - 0.2*(1- sin(AnimGenParams) ) pass variation per constant
  float2 sunDir =  ( GetScaledScreenTC(sunPosProj.xy) - IN.baseTC.xy);
   
  half4 accum = 0; 
  sunDir.xy *= cbSunShafts.params.x * (fSign);
  
  half4 depth = tex2D(_tex0, MapViewportToRaster(IN.baseTC.xy) );      
  accum += depth;

  depth = tex2D(_tex0, MapViewportToRaster(IN.baseTC.xy + sunDir.xy * 1.0));      
  accum += depth * (1.0-1.0/8.0);

	depth = tex2D(_tex0, MapViewportToRaster(IN.baseTC.xy + sunDir.xy * 2.0));      
  accum += depth * (1.0-2.0/8.0);
  
	depth = tex2D(_tex0, MapViewportToRaster(IN.baseTC.xy + sunDir.xy * 3.0));      
  accum += depth * (1.0-3.0/8.0);
  
	depth = tex2D(_tex0, MapViewportToRaster(IN.baseTC.xy + sunDir.xy * 4.0));      
  accum += depth * (1.0-4.0/8.0);
  
	depth = tex2D(_tex0, MapViewportToRaster(IN.baseTC.xy + sunDir.xy * 5.0));      
  accum += depth * (1.0-5.0/8.0);
  
	depth = tex2D(_tex0, MapViewportToRaster(IN.baseTC.xy + sunDir.xy * 6.0));      
  accum += depth * (1.0-6.0/8.0);

	depth = tex2D(_tex0, MapViewportToRaster(IN.baseTC.xy + sunDir.xy * 7.0));      
  accum += depth * (1.0-7.0/8.0);

  accum /= 8.0;

  OUT.Color = accum * 2  * float4(sunDist.xxx, 1);
  OUT.Color.w += 1.0 - saturate( saturate( fSign * 0.1 + 0.9 ) );

    
  return OUT;
}

//todo: add usefull blend modes into shade lib
half3 blendSoftLight(half3 a, half3 b)
{
  //float3 c = 2 * a * b + a * a * (1 - 2 * b);
  //float3 d = sqrt(a) * (2 * b - 1) + 2 * a * (1 - b);
  //
  //return ( b < 0.5 )? c : d;

// 12 inst

  half3 c = 2 * a * b * ( 1 + a * (  1 - b ) ); // 4 inst
 
  half3 a_sqrt = sqrt( a );  // 1
  half3 d = ( a  +  b * (a_sqrt - a )) * 2 - a_sqrt; // 3 inst

  return( b < 0.5 )? c : d; // 1
}

pixout SunShaftsDisplayPS(vtxOutAAOpt IN)
{
  pixout OUT = (pixout) 0;
  
  float2 sampleUV = MapViewportToRaster(IN.baseTC.xy);

   half4 cScreen = tex2D(_tex1, sampleUV);    
	 OUT.Color = cScreen;

	half fShaftsMask = 0;
#if %_RT_SAMPLE0

	half4 cSunShafts = tex2D(_tex2, sampleUV);

  fShaftsMask = saturate(1.00001- cSunShafts.w) * 2.0 * PI_sunShaftsParams.x;
        
  // Apply "very" subtle (but always visible) sun shafts mask 
  half fBlend = cSunShafts.w;
  
  // normalized sun color
	half3 sunColor = SunShafts_SunCol;
  
	// Blend with backbuffer
  OUT.Color.xyz = cScreen + cSunShafts.xyz * PI_sunShaftsParams.y * sunColor * ( 1 - cScreen );
  OUT.Color.xyz = blendSoftLight(OUT.Color, sunColor * fShaftsMask *0.5+0.5);
	OUT.Color.w = 1;

#endif

// Apply color charts/correction
#if %_RT_SAMPLE5
	TexColorChart2D(_tex0, OUT.Color.xyz);
#endif

	// propagate original alpha
	OUT.Color.a = cScreen.a; //saturate( (GetLinearDepth(_tex4, IN.baseTC.xy, true).x - 0.85f)*100 );

  return OUT;
}

////////////////// technique /////////////////////

technique SunShaftsMaskGen
{
  pass p0
  {
    VertexShader = BaseVS() PostSunShaftsVS;
    GeometryShader = $AutoGS_MultiRes();
    PixelShader = SunShaftsMaskGenPS() PostSunShaftsPS;  
    CullMode = None;        
  }
}

technique SunShaftsGen
{
  pass p0
  {
    VertexShader = SunShaftsGenVS() PostSunShaftsVS;
    GeometryShader = $AutoGS_MultiRes();
    PixelShader = SunShaftsGenPS() PostSunShaftsPS;    
    CullMode = None;        
  }
}

technique SunShaftsDisplay
{
  pass p0
  {
    VertexShader = EdgeAAOptVS() PostSunShaftsVS;
    GeometryShader = $AutoGS_MultiRes();
    PixelShader = SunShaftsDisplayPS() PostSunShaftsPS;    
    CullMode = None;        
  }
}

/////////////////////// eof ///
