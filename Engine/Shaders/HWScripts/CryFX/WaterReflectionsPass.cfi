// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.


// Adapted from DeferredShading.cfx SSRefl - todo: generalize for plane
half4 ReflectionPassPS( v2f_hs IN, half4 vNormal )
{
	half4 OUT = 0;
	
	// Do the specular reflection with ray marching.
	float4 specularRefl = float4(0,0,0,0);

	const float borderSize = 0.15 * CV_HPosScale.y;  // Fade out at borders

	const float fDepth = IN.screenProj.w * CV_NearFarClipDist.w;
	float3 vPositionWS = IN.vPosWS.xyz + float3(0,0,0.0);
	
	float3 viewVec = normalize( vPositionWS - g_VS_WorldViewPos);
	float3 reflVec = normalize( reflect( viewVec, vNormal.xyz ) );

	float4 rayStart = mul( CV_ViewProjMatr, float4( vPositionWS, 1 ) ); 
	rayStart.z = fDepth;
	rayStart.xy = rayStart.xy * float2(0.5, -0.5) + 0.5 * rayStart.w;

	rayStart.xy = GetScaledScreenTC(rayStart.xy);

	{
		const int numSamples = 1;
		
		// far reflection setup
		float vecLen = 128* vNormal.w + 1;
		float stepSize = 1.0 / numSamples;
		float intervalSize = 3*vecLen / (numSamples * 2) / CV_NearFarClipDist.y; 

		float3 rayVec = reflVec;
		rayVec *= vecLen;
		float4 rayEnd = mul( CV_ViewProjMatr, float4( vPositionWS + rayVec, 1 ) );

		// Compute linear z
		rayEnd.z = g_PS_ProjRatio.y / (rayEnd.z / rayEnd.w - g_PS_ProjRatio.x);

		// Precomputation to reduce work in loop
		rayEnd.xy = GetScaledScreenTC(rayEnd.xy * float2(0.5, -0.5) + 0.5 * rayEnd.w);

		float4 ray = rayEnd - rayStart;

		float len = stepSize;
		float bestLen = 0;

		float4 projPos = rayStart + ray * len;
		projPos.xy /= projPos.w;

		float2 projPosSampleTC = MapViewportToRaster(projPos.xy);

		float fDepthTapBuf = sceneDepthScaledTex.Sample(ssPointClamp, projPosSampleTC);
		bestLen = len;

		{
			float4 projPos = rayStart + ray * bestLen;
			projPos.xy /= projPos.w;

			float3 color = refractionHalfResTex.SampleLevel(ssMaterialTrilinearClamp, projPos.xy, 0.0f);
			specularRefl.rgb = color;

			float borderDist = projPos.y;
			borderDist = min( 1 - projPos.y, borderDist );
			float edgeWeight = borderDist > borderSize ? 1 : saturate((borderDist / borderSize) );

			half alpha = edgeWeight;
			specularRefl.a += alpha;
		}

		// local reflections setup
		bestLen = 0;
		const int numSamples2 = 8;
		vecLen = 16*vNormal.w + 1; // The length of ray varies from 1 to 16 depending on the glossiness.
		stepSize = 1.0 / numSamples2;
		intervalSize = 3* vecLen / (numSamples2 * 2) / CV_NearFarClipDist.y; //3*  // far reflection
		  
		rayVec = reflVec;
		rayVec *= vecLen;
		rayEnd = mul( CV_ViewProjMatr, float4( vPositionWS + rayVec, 1 ) );

		// Compute linear z
		rayEnd.z = g_PS_ProjRatio.y / (rayEnd.z / rayEnd.w - g_PS_ProjRatio.x);

		// Precomputation to reduce work in loop
		rayEnd.xy = GetScaledScreenTC(rayEnd.xy * float2(0.5, -0.5) + 0.5 * rayEnd.w);

		ray = rayEnd - rayStart;

		len = stepSize;
		
		[unroll]
		for(int step = 0; step < numSamples2; step++)
		{
			projPos = rayStart + ray * len;
			projPos.xy /= projPos.w;

			projPosSampleTC = MapViewportToRaster(projPos.xy);

			fDepthTapBuf = sceneDepthScaledTex.Sample(ssPointClamp, projPosSampleTC.xy);
			if( abs(fDepthTapBuf - projPos.z) < intervalSize ) 
			{
				bestLen = len;
				break;
			}

			len += stepSize;
		}

		if( bestLen > 0 )
		{
			projPos = rayStart + ray * bestLen;
			projPos.xy /= projPos.w;

			projPosSampleTC = MapViewportToRaster(projPos.xy);

			half3 color = refractionHalfResTex.SampleLevel(ssMaterialTrilinearClamp, projPosSampleTC.xy, 0.0f);
			specularRefl.rgb = color;

			float borderDist = projPos.y;
			borderDist = min( 1 - projPos.y, borderDist );
			float edgeWeight = borderDist > borderSize ? 1 : saturate((borderDist / borderSize) );

			half alpha = edgeWeight;
			// Apply distance attenuation
			alpha *= saturate( 1 - bestLen );
			specularRefl.a += alpha;
		}
	}

	OUT = specularRefl;
	
	
	// Fade out in reflections directions where less information is available
	half dirAtten = saturate( dot( viewVec, reflVec ) + 0.5 );
	OUT *= dirAtten;
	
	OUT = float4(OUT.rgb * OUT.a, OUT.a);
	
	return OUT;
}

pixout WaterReflPS(v2f_hs IN)
{
	pixout OUT = (pixout) 1;

	const float fDepth = IN.screenProj.w * CV_NearFarClipDist.w;
	float2 linearUV = IN.screenProj.xy / IN.screenProj.w;
	float2 screenTC = MapViewportToRaster(linearUV);
	float fDepthCenter = sceneDepthScaledTex.Sample(ssPointClamp, screenTC);

	clip( fDepthCenter - fDepth );

	half3 vView = normalize(IN.vView.xyz);

#if 0
	// Generate normal map from 4 normal map layers + paralax
	float2 vParalaxOffset = GetParalaxOffset( IN, vView );  
	half4 cSpecularMap = 1;
	half4 cDiffuseMap = 1;
	half3 vNormal = BumpGen( IN, vParalaxOffset, cSpecularMap, cDiffuseMap);
#else
	half3 vNormal = float3(0.0f, 0.0f, 1.0f);
#endif

	half fNdotE =  (dot( vView.xyz, vNormal ) ) * IN.vView.w;

	//////////////////////////////////////////////////////////////////////////////////////////////////    
	// Get reflection color

	const half ReflectionBumpScale = 0.3;

	half3 vDir = g_VS_WorldViewPos - IN.vPosWS.xyz;
	half3 vReflN = lerp(half3(0,0,1), vNormal, ReflectionBumpScale);
	half3 vRefl = reflect(vDir, vReflN);

	half3 vReflNorm = normalize( vRefl );

	half3 cSpecularAcc = MatSpecColor * EnvCubeBoxProjected( IN.vPosWS.xyz, vReflNorm, half4(1,1,1,1) );

	// Blend in screenspace reflections

	half4 cSSRefl = ReflectionPassPS( IN, half4(vReflN.xyz,1));
	cSSRefl.rgb /= PS_HDR_RANGE_ADAPT_MAX;

	cSpecularAcc = lerp(cSpecularAcc * EnvCubeReflMul, cSSRefl * RealtimeReflMul, saturate(cSSRefl.a));
	OUT.Color.rgb =cSpecularAcc;
	 
	// Continuously blend previous frame, minimize shimering
	float4 vPrevHSPos = HPosToScreenTC( mul(CV_PrevViewProjMatr, float4(IN.vPosWS.xyz, 1.0 )), false );
	half2 prevTC = vPrevHSPos.xy / vPrevHSPos.w;
	prevTC.x *= CV_HPosScale.z;
	prevTC.y = 1.0 - (1.0 - prevTC.y) * CV_HPosScale.w;

	prevTC = MapViewportToRaster(prevTC);

	half3 cReflPrev = reflectionPrevTex.Sample(ssMaterialTrilinearClamp, prevTC.xy).rgb / PS_HDR_RANGE_ADAPT_MAX;
	cReflPrev = isfinite( cReflPrev ) ? cReflPrev : 0;  // Filter out NANs that we still have sometimes, otherwise they get propagated and remain in the view

	half3 cReflCur = cSpecularAcc;

	cSpecularAcc = (cReflCur* 0.75 + cReflPrev*0.25) ; 

	cSpecularAcc*=PS_HDR_RANGE_ADAPT_MAX;

	OUT.Color = half4(cSpecularAcc,1);

  return OUT;
}

//////////////////////////////// technique ////////////////

technique WaterReflPass
{
	pass p0
	{
		ZEnable = false; // todo use downscaled depth target for zculling
		ZFunc = LEqual;
		CullMode = None;
		ZWriteEnable = false;
		IgnoreMaterialState = true;

		VertexShader = WaterVS() WaterSurfaceVS;
		GeometryShader = $AutoGS_MultiRes();
#if %WATER_TESSELLATION_DX11
		HullShader   = WaterHS() WaterSurfaceHS;
		DomainShader = WaterReflDS() WaterSurfaceDS;
#endif

		PixelShader = WaterReflPS() WaterSurfacePS;
	}
}
