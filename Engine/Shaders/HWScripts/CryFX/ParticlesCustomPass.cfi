// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

float4 VisionMtlParams : PB_VisionMtlParams;

struct OutputCustomRenderVS
{
#if %_PS
  float4 WPos	:	SV_POSITION;
#else
  #if %_VS && %_RT_NO_TESSELLATION && !%_HS || %_DS || !FEATURE_PARTICLES_TESSELLATION
    float4 HPosition  : POSITION; // output HPosition only if no tessellation or if Domain shader
  #endif
#endif

  float4 baseTC     : TEXCOORDN;

#if %_RT_ANIM_BLEND
  float3 blendTC   : TEXCOORDN;
#endif

#if %_VS && !%_RT_NO_TESSELLATION || %_HS || FEATURE_PARTICLES_TESSELLATION
 float4 vWorldPos : TEXCOORDN;
#endif

  float4 Color     : COLOR0;
};

///////////////// vertex shaders //////////////////

OutputCustomRenderVS UnifyParticleCustomRenderInputs(in SParticleVertex pCommon)
{
  OutputCustomRenderVS OUT = (OutputCustomRenderVS) 0;

  OUT.baseTC = pCommon.baseTC;
#if %_RT_ANIM_BLEND
  OUT.blendTC = pCommon.blendTC; 
#endif
   

#if FEATURE_PARTICLES_TESSELLATION && !%_RT_NO_TESSELLATION
  OUT.vWorldPos.xyz = pCommon.vWorldPos;
	OUT.vWorldPos.w = pCommon.SHBasis0.z;  // temporary workaround constant buffers troubles, pass constant through interpolator
#else
  OUT.HPosition = pCommon.HPosition;
#endif

  OUT.Color = pCommon.Color.w;

  return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
OutputCustomRenderVS ParticleCustomRenderVS(app2vertParticleGeneral IN)
{
  SParticleVertex pCommon = ParticleCommonVertexOutput(IN, 0);
  return UnifyParticleCustomRenderInputs(pCommon);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// DX11 specifics

struct ControlPointCustomRenderHS
{  
  float4 baseTC          : TEXCOORDN;
#if %_RT_ANIM_BLEND
  float3 blendTC         : TEXCOORDN;
#endif

  float4 vWorldPos       : TEXCOORDN;

  float4 Color           : COLOR0;
};

TessFactorsHS ParticleCustomRenderConstFuncHS(InputPatch<OutputCustomRenderVS, 4> p, uint PatchID : SV_PrimitiveID )
{
  float4 vWP[4] = { p[0].vWorldPos, p[1].vWorldPos, p[2].vWorldPos, p[3].vWorldPos };
  return ParticleCommonConstFuncHS( vWP, p[0].vWorldPos.w );
}

////////////////////////////////////////////////////////////////////////////////////////////////////

[domain("quad")]
[partitioning("fractional_even")]
[outputtopology("triangle_cw")]
[outputcontrolpoints(4)]
[patchconstantfunc("ParticleCustomRenderConstFuncHS")]
[maxtessfactor(16)]
ControlPointCustomRenderHS ParticleCustomRenderHS(InputPatch<OutputCustomRenderVS, 4> inputPatch, uint uCPID : SV_OutputControlPointID)
{
  ControlPointCustomRenderHS OUT = (ControlPointCustomRenderHS)0;

  OUT.baseTC = inputPatch[uCPID].baseTC;
#if %_RT_ANIM_BLEND
  OUT.blendTC = inputPatch[uCPID].blendTC;
#endif

  OUT.vWorldPos = inputPatch[uCPID].vWorldPos;
  OUT.Color = inputPatch[uCPID].Color;

  return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

[domain("quad")]
OutputCustomRenderVS ParticleCustomRenderDS(float2 BarycentricCoords : SV_DomainLocation, const OutputPatch<ControlPointCustomRenderHS, 4> ControlPt, TessFactorsHS TessFactorsInput)
{
  OutputCustomRenderVS OUT = (OutputCustomRenderVS)0;

  float4 vWorldPos = BilinearInterp(BarycentricCoords, ControlPt[0].vWorldPos, ControlPt[1].vWorldPos, ControlPt[2].vWorldPos, ControlPt[3].vWorldPos);
  OUT.HPosition = mul(g_VS_ViewProjMatr, float4(vWorldPos.xyz, 1));

  OUT.baseTC = BilinearInterp(BarycentricCoords, ControlPt[0].baseTC, ControlPt[1].baseTC, ControlPt[2].baseTC, ControlPt[3].baseTC);
#if %_RT_ANIM_BLEND
  OUT.blendTC = BilinearInterp(BarycentricCoords, ControlPt[0].blendTC.xyzz, ControlPt[1].blendTC.xyzz, ControlPt[2].blendTC.xyzz, ControlPt[3].blendTC.xyzz);
#endif

  OUT.Color = BilinearInterp(BarycentricCoords, ControlPt[0].Color, ControlPt[1].Color, ControlPt[2].Color, ControlPt[3].Color);

  return OUT;
}

///////////////// pixel shaders //////////////////

pixout ParticleCustomRenderPS(OutputCustomRenderVS IN)
{
  pixout OUT = (pixout)0;  
  half4 cDiffuseMap = GetDiffuseTex(diffuseTex, IN.baseTC.xy);
#if %_RT_ANIM_BLEND
  // Blend in second tile
  half4 cDiffuseMapSec = GetDiffuseTex(diffuseTex, IN.blendTC.xy);
  cDiffuseMap += (cDiffuseMapSec - cDiffuseMap) * IN.blendTC.z;
#endif

  cDiffuseMap *= saturate(IN.Color);

#ifndef SIMPLE_PARTICLE
	clip(cDiffuseMap.w - PBAlphaTest.w);
#endif

#if USE_MATERIAL    
	VisionParams.x = saturate( VisionMtlParams.x + VisionParams.x );
#endif

  half4 cFinal = saturate( VisionParams.x )* cDiffuseMap;
  cFinal.xyz *= cDiffuseMap.w;
	cFinal.xyz = dot( cFinal.xyz, 1);

#if %_RT_SOFT_PARTICLE
		float4 tcScreen = GetScreenCoords( IN.WPos );
    ApplySoftIntersection( cFinal, tcScreen, IN.baseTC.z);
#endif

  OUT.Color = cFinal;

  return OUT;
}

technique CustomRenderPassDX11
{
  pass p0
  {
    VertexShader = ParticleCustomRenderVS() ParticleVS;
    HullShader   = ParticleCustomRenderHS() ParticleHS;
    DomainShader = ParticleCustomRenderDS() ParticleDS;    
    PixelShader = ParticleCustomRenderPS() ParticlePS;

    ZEnable = true;
    ZWriteEnable = false;
    CullMode = None;

    SrcBlend = ONE;
    DestBlend = ONE;
    AlphaBlendEnable = true;

		IgnoreMaterialState = true;
  }
}

technique CustomRenderPass
{
  pass p0
  {
    VertexShader = ParticleCustomRenderVS() ParticleVS;
    PixelShader = ParticleCustomRenderPS() ParticlePS;

    ZEnable = true;
    ZWriteEnable = false;
    CullMode = None;

    SrcBlend = ONE;
    DestBlend = ONE;
    AlphaBlendEnable = true;

		IgnoreMaterialState = true;
  }
}