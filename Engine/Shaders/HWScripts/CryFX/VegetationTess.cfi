// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#if ENABLE_TESSELLATION

#include "CommonTessellation.cfi"

///////////////// hull shader //////////////////

struct HS_CONTROL_POINT_OUTPUT_VEGETATION
{
	hsControlPointShared controlPoint;

	float4 screenProj     : TEXCOORDN;
	float4 terrainParams  : TEXCOORDN;

#if !%GRASS
	float4 tangVec : TEXCOORDN;
	float4 binormVec : TEXCOORDN;
#endif

#if %_RT_FOG
	float4 AvgFogVolumeContrib : TEXCOORDN;
#endif
};

HS_CONSTANT_DATA_OUTPUT VegetationConstantsHS(InputPatch<vtxOutVegetation, 3> p, uint PatchID : SV_PrimitiveID)
{
	const float3 vP0 = p[0].vView.xyz + g_VS_WorldViewPos.xyz;
	const float3 vP1 = p[1].vView.xyz + g_VS_WorldViewPos.xyz;
	const float3 vP2 = p[2].vView.xyz + g_VS_WorldViewPos.xyz;
	HS_CONSTANT_DATA_OUTPUT output = CommonConstantsHS(vP0, vP1, vP2, g_VS_WorldViewPos.xyz, g_VS_WorldViewPos.xyz, PatchID);

	return output;
}

[domain("tri")]
[partitioning("fractional_odd")]
[outputtopology("triangle_cw")]
[outputcontrolpoints(3)]
[patchconstantfunc("VegetationConstantsHS")]
[maxtessfactor(MAX_TESS_FACTOR)]
HS_CONTROL_POINT_OUTPUT_VEGETATION VegetationHS(InputPatch<vtxOutVegetation, 3> inputPatch, uint uCPID : SV_OutputControlPointID)
{
	HS_CONTROL_POINT_OUTPUT_VEGETATION output = (HS_CONTROL_POINT_OUTPUT_VEGETATION)0;

	output.controlPoint.vView       = inputPatch[uCPID].vView;
	output.controlPoint.vNormal     = inputPatch[uCPID].vNormal;
	output.controlPoint.vBaseTC     = inputPatch[uCPID].baseTC;

	output.screenProj    = inputPatch[uCPID].screenProj;
	output.terrainParams  = inputPatch[uCPID].terrainParams;

#if !%GRASS
	output.tangVec = inputPatch[uCPID].tangVec;
	output.binormVec = inputPatch[uCPID].binormVec;
#endif

#if %_RT_FOG
	output.AvgFogVolumeContrib = inputPatch[uCPID].AvgFogVolumeContrib;
#endif

	return output;
}


///////////////// domain shader //////////////////

void FillEvalInput_Vegetation(const OutputPatch<HS_CONTROL_POINT_OUTPUT_VEGETATION, 3> triPatch, in HS_CONSTANT_DATA_OUTPUT hsConstData, in float3 vBaryCoords, inout CommonEvaluationInputDS evalInput)
{
	evalInput.vBaryCoords = vBaryCoords;
	FillEvalInputControlPoint(triPatch[0].controlPoint, triPatch[1].controlPoint, triPatch[2].controlPoint, hsConstData, evalInput);
	evalInput.bRelativePos = true;
#if !%GRASS
	FillEvalInputTangentBinormal(triPatch[0].tangVec, triPatch[1].tangVec, triPatch[2].tangVec, triPatch[0].binormVec, triPatch[1].binormVec, triPatch[2].binormVec, evalInput);
#endif
	evalInput.vViewPos = g_VS_WorldViewPos.xyz;
}

void ProcessEvalOutput_Vegetation(in CommonEvaluationOutputDS evalOutput, inout vtxOutVegetation dsOutput)
{
	dsOutput.baseTC = evalOutput.vBaseTC;
#if !%GRASS
	dsOutput.tangVec = evalOutput.vTangent;
	dsOutput.binormVec = evalOutput.vBinormal;
#endif

	dsOutput.HPosition = mul(g_VS_ViewProjZeroMatr, float4(evalOutput.vPos.xyz, 1));
}

void EvaluateVegetationSpecific(inout vtxOutVegetation output, in HS_CONTROL_POINT_OUTPUT_VEGETATION triPatch[3],
                                in float3 vBaryCoords, in CommonEvaluationOutputDS evalOutput)
{
	output.screenProj = HPosToScreenTC(output.HPosition);
	output.screenProj.z = EvalVec(triPatch[0].screenProj.z, triPatch[1].screenProj.z, triPatch[2].screenProj.z, vBaryCoords);

	output.terrainParams = EvalVec(triPatch[0].terrainParams, triPatch[1].terrainParams, triPatch[2].terrainParams, vBaryCoords);

#if %_RT_FOG
	output.AvgFogVolumeContrib = EvalVec(triPatch[0].AvgFogVolumeContrib, triPatch[1].AvgFogVolumeContrib, triPatch[2].AvgFogVolumeContrib, vBaryCoords);
#endif
}

[domain("tri")]
vtxOutVegetation VegetationDS( HS_CONSTANT_DATA_OUTPUT hsConstData, float3 vBaryCoords : SV_DomainLocation, const OutputPatch<HS_CONTROL_POINT_OUTPUT_VEGETATION, 3> TrianglePatch )
{
	vtxOutVegetation output = (vtxOutVegetation)0;

	CommonEvaluationInputDS evalInput = (CommonEvaluationInputDS)0;
	FillEvalInput_Vegetation(TrianglePatch, hsConstData, vBaryCoords, evalInput);

	CommonEvaluationOutputDS evalOutput;
	Evaluate(evalInput, evalOutput);
	ProcessEvalOutput_Vegetation(evalOutput, output);

	EvaluateVegetationSpecific(output, TrianglePatch, vBaryCoords, evalOutput);

	return output;
}

#endif
