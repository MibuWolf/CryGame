// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.


// Todo for refactor phases:
//  - Rename to GBufferPass
//	- All shared functionality should be extrated into outside functions, reuse on regular passes
//	- eg: Decal, Detail Mapping, BlendLayer, etc

#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
vert2geomZ Common_ZPassVS(app2vertGBuffer IN_common)
#else
vert2fragZ Common_ZPassVS(app2vertGBuffer IN_common)
#endif
{
  vert2fragZ OUT = (vert2fragZ)0;

  app2vertGBuffer IN = IN_common;

  streamPos vertPassPos = (streamPos)0;
  streamPos_FromGBuffer(IN, vertPassPos);
	streamPos vertPassPosPrev = (streamPos) vertPassPos;

#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
	const float3 SilPomDispl = SilPomDisplacement * TangNormal(IN.vertCommon.Tangent, IN.vertCommon.Binormal);
	vertPassPos.Position.xyz += SilPomDispl * -HeightBias;
#endif

  float4 HPosition = Pos_VS_General(g_VS_ViewProjZeroMatr, vertPassPos);

#if %_RT_MOTION_BLUR && !%_RT_ALPHABLEND
	vertPassPosPrev.PositionCurr = vertPassPos.Position;
	OUT.HPosPrev.xyz = HPosToScreenTC( Pos_Prev_VS_General(g_VS_ViewProjZeroMatr, vertPassPosPrev) ).xyw;
#endif

	float3 vPos = vertPassPos.WorldPos.xyz;

#if ENABLE_TESSELLATION && !%_RT_NO_TESSELLATION
	//relative position
	OUT.vView.xyz = vPos.xyz;
	OUT.vNormal.xyz = normalize(mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.Normal.xyz));
#else
	OUT.HPosition = HPosition;
#endif

#if !%_RT_OBJ_IDENTITY
  vPos += g_VS_WorldViewPos.xyz;
#endif
	
	float3 worldTangentS = mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[0]);
	float3 worldTangentT = mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[1]);
	float3 worldTangentN = mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[2]);

	float4 baseTC = vertPassPos.baseTC;  

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Output uv coordinates

#if %_RT_DECAL_TEXGEN_2D 
	float3 DistAtten;
	_TCModifyDecal( vertPassPos, baseTC, DistAtten );
#endif 
	
	_TCModify(baseTC, OUT.baseTC, vertPassPos.Position, vertPassPos.ObjToTangentSpace[2], TS_DIFFUSE);
#if %DECAL && !%_TT_TEXCOORD_PROJ
	OUT.baseTC.zw = baseTC.xy;
#endif

	#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
		OUT.baseTC.xy *= CM_SilPomDetailParams.xy;
	#endif

	float fAlphaTest = 0.0f;
	float fDissolve = 0.0f;
	#if %_RT_ALPHATEST || %_RT_DISSOLVE
		#if %_RT_DISSOLVE
			fAlphaTest = Get_MaterialAlphaTest();
	fDissolve = Get_SPI_Dissolve();
		#else
	fAlphaTest = Get_MaterialAlphaTest();
		#endif
		OUT.baseTC.wz = float2(fAlphaTest,fDissolve);
		#if %LEAVES
			OUT.baseTC.w = ParallelOpacityFalloff(vertPassPos.WorldPos.xyz, worldTangentN.xyz, CapOpacityFalloff, fAlphaTest);
		#endif
	#endif

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Output tangents

	OUT.vNormalWS = float4(worldTangentN.xyz, 0); // w= dissolve out sign

	#if !%GRASS
		OUT.vTangent = float4(worldTangentS, vertPassPos.Tangent.w); 
		OUT.vBinormal.xyz = worldTangentT;
	#endif

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Output color
	
	#if %VERTCOLORS || %BLENDLAYER || %DIRTLAYER
		OUT.Color = vertPassPos.Color;
		
		#if	%TEMP_VEGETATION
			// vegetation vtx color is used for bending weights. w used for baked AO
			OUT.Color.rgb = vertPassPos.Color.w;		
			#if %BLENDLAYER
				// if blend layer used, vtx alpha overlaps with alpha on vegetation. Use blue channel instead
				OUT.Color.rgb = vertPassPos.Color.z;		
			#else
				// <Deprecated> Will be removed post C3. This is needed for art to be able to optimize console materials (eg:disabling blend layer. Since veg uses vertex alpha as AO and blend layer uses color for layer blending => breaks look)
				OUT.Color.rgb = lerp(1, vertPassPos.Color.w, VertexAlphaBlendFactor);
			#endif
		#endif
	#endif

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Output blend with terrain color params

	#if %TEMP_VEGETATION && %_RT_BLEND_WITH_TERRAIN_COLOR
		float4 blendColInfo = Get_SPI_BlendWithTerrainColInfo();
		blendColInfo.w *= 0.3333;
		
		float fCameraDistance = length(g_VS_WorldViewPos.xyz - vPos.xyz);
		float fBlendFactor =  saturate( BlendTerrainCol + (fCameraDistance/ (blendColInfo.w-blendColInfo.w*BlendTerrainColDist)) );
		fBlendFactor*=fBlendFactor;
		OUT.terrainParams0.xyz = float3(blendColInfo.zz*vPos.yx+blendColInfo.xy, min(fBlendFactor, .75f));
	#endif

#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING || %PARALLAX_OCCLUSION_MAPPING || %OFFSET_BUMP_MAPPING || %_RT_ALPHABLEND || %TEMP_EYES || %LEAVES || %GRASS
  OUT.viewTS = vPos.xyz - g_VS_WorldViewPos.xyz;
#endif

#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
	vert2geomZ OUT_ext = (vert2geomZ) 0;
	OUT_ext.IN = OUT;

	{
		streamPos vertPassPosTmp = vertPassPos;
		vertPassPosTmp.Position.xyz += SilPomDispl;

		const float3 vPosExtr = mul(vertPassPosTmp.InstMatrix, vertPassPosTmp.Position).xyz;

		OUT_ext.viewExtr = mul(float3x3(worldTangentS, worldTangentT, worldTangentN), vPosExtr.xyz);
		OUT_ext.hPosExtr = Pos_VS_General(g_VS_ViewProjZeroMatr, vertPassPosTmp);

		OUT_ext.wsDirPos = vPos - g_VS_WorldViewPos.xyz;
		OUT_ext.wsDirPosExtr = vPosExtr;
	}

	return OUT_ext;
#else
  return OUT;
#endif
}

///////////////// geometry shaders //////////////////

#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
[maxvertexcount(9)]
void Common_ZPassGS(triangle vert2geomZ In[3], inout TriangleStream<geom2fragZ> OutStream)
{
	EmitPrismZ(In[0], In[1], In[2], OutStream);
}
#endif

///////////////// pixel shaders //////////////////

half GetBlendedHeight(float2 uv, half blendLayerFactor, in float blendLayer2Tiling)
{
#if !%SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
		half h = GetHeightTex(heightTex, uv);
	#if %BLENDLAYER
		half h2 = GetHeight2Tex(Height2Tex, uv * blendLayer2Tiling);
		
		h += blendLayerFactor * (h2 - h);
	#endif
#else
	half h = GetHeightTexLod(heightTex, float4(uv, 0, 0)); // TODO: find way to compute lod without gradients as they cause pixel artifacts at fin / shell transition
#endif
	return h;
}

void ApplyDirtAndBlendLayer(vert2fragZ IN, half blendFac, inout half3 diffCol, inout half3 specCol)
{
#if %DIRTLAYER
	// Deprecated. Dirt layer mostly used for tinting "cars"
	half4 dirtMap = GetCustomTex(dirtTex, IN.baseTC.xy * half2(DirtTiling, DirtTiling));
	half dirtBlendFac = DirtStrength * lerp(1.0h, dirtMap.a, DirtMapAlphaInfluence) * (1.0h - IN.Color.a);
	diffCol = lerp(diffCol, dirtMap * DirtTint, dirtBlendFac);
	specCol = lerp(specCol, specCol * DirtGlossFactor, dirtBlendFac);
#elif %BLENDLAYER
	// Deprecated. Should be unified and behave like a regular material post C3.
	half4 diffuseMap2 = GetCustomTex(Diffuse2Tex, IN.baseTC.xy * BlendLayer2Tiling);
	diffCol = lerp( diffCol, diffuseMap2.rgb, blendFac );
	specCol = lerp( specCol, BlendLayer2Specular, blendFac );
#endif
}

void ApplyVegetationTerrainColor(vert2fragZ IN, inout MaterialAttribsCommon attribs)
{
	#if %TEMP_VEGETATION
		#if %_RT_BLEND_WITH_TERRAIN_COLOR
			const float3 TERRAIN_BASE_SPEC_COLOR = 0.001f;
			const float TERRAIN_BASE_SMOOTHNESS = 0.1f;

			half4 terrainCol = GetTerrainTex(terrainBaseTex, IN.terrainParams0.xy);
			float3 terrainNor = float3(0,0,1);//GetTerrainNormal(terrainNormTex, IN.terrainParams0.xy); // disabled until levels re-exported

			attribs.NormalWorld		= lerp(attribs.NormalWorld,		terrainNor,								IN.terrainParams0.z);
			attribs.Albedo				= lerp(attribs.Albedo,				terrainCol.xyz,						IN.terrainParams0.z);
			attribs.Reflectance		= lerp(attribs.Reflectance,		TERRAIN_BASE_SPEC_COLOR,	IN.terrainParams0.z);
			attribs.Smoothness		= lerp(attribs.Smoothness,		TERRAIN_BASE_SMOOTHNESS,	IN.terrainParams0.z);
			attribs.Transmittance = lerp(attribs.Transmittance, 0,												IN.terrainParams0.z);
		#endif
	#endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
pixout_gbuffer Common_ZPassPS(geom2fragZ IN_ext)
#else
pixout_gbuffer Common_ZPassPS(vert2fragZ IN)
#endif
{
#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
  vert2fragZ IN = IN_ext.IN;
#endif

	pixout_gbuffer OUT = (pixout_gbuffer) 0;
	
	////////////////////////////////////////////////////////////////////////////////////////////////
	// Setup tangent to world basis

	half fFlipNormal = 1.0f;
	#if !%SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
		fFlipNormal *= IN.bIsFrontFace? 1.0f : -1.0f;// Support for double sided lighting, invert face sign if front facing
	#endif

	half3x3 mTangentToWS = half3x3(half3(1,0,0),half3(0,1,0),half3(0,0,1));
	#if !%GRASS
		mTangentToWS = half3x3( IN.vTangent.xyz, IN.vBinormal.xyz, IN.vNormalWS.xyz * fFlipNormal);  
	#endif
		
  ////////////////////////////////////////////////////////////////////////////////////////////////
  // Handle POM

  int mdQuality;
  half mdDisplacement;
  half mdHeightBias;
  half mdSelfShadowStrength;
  GetMicroDetailParams(mdQuality, mdDisplacement, mdHeightBias, mdSelfShadowStrength);

#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING || %PARALLAX_OCCLUSION_MAPPING
	float2 normalTexRes;
	normalsTex.GetDimensions(normalTexRes.x, normalTexRes.y);
	const float3 pomAdjustRayForNonSquareTexres = float3(rcp(normalTexRes.xy) * min(normalTexRes.x, normalTexRes.y), 1);
#else
	const float3 pomAdjustRayForNonSquareTexres = 1;
#endif

#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING || %PARALLAX_OCCLUSION_MAPPING || %OFFSET_BUMP_MAPPING || %TEMP_EYES
	half3 vViewTS = normalize(mul((float3x3)mTangentToWS, IN.viewTS) * pomAdjustRayForNonSquareTexres);
#endif

	half blendFac = 0;
	float blendLayer2Tiling = 0;
#if %BLENDLAYER
	blendLayer2Tiling = BlendLayer2Tiling;
	if (mdQuality != MICRO_DETAIL_QUALITY_SPM)
		blendFac = GetLayerBlendingValue(BlendTex, IN.baseTC.xy * BlendMaskTiling, 0, IN.Color.a, BlendFactor, BlendFalloff);
#endif

  if (mdQuality == MICRO_DETAIL_QUALITY_OBM)
  {
#if %OFFSET_BUMP_MAPPING // still needed to compile as we refer to IN.viewTS
    IN.baseTC.xy = OffsetMap(IN.baseTC.xy, -vViewTS, 2, mdDisplacement, mdHeightBias, blendFac, blendLayer2Tiling);
#endif
  }
  else if(mdQuality == MICRO_DETAIL_QUALITY_POM)
  {
#if %PARALLAX_OCCLUSION_MAPPING // still needed to compile as we refer to IN.viewTS
  #if !%TEMP_VEGETATION
    const float lod = ComputeTextureLOD(IN.baseTC.xy, normalTexRes.xy);

    const float3 offsetBest = ParallaxOcclusionMap(IN.baseTC.xy, lod, vViewTS, 15, mdDisplacement, mdHeightBias, blendFac, blendLayer2Tiling);
    IN.baseTC.xy = offsetBest.xy;
  #endif
#endif
  }
  else if(mdQuality == MICRO_DETAIL_QUALITY_SPM)
  {
#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING // still needed to compile as we refer to IN.viewTS
	#if !%TEMP_VEGETATION
		const float lod = ComputeTextureLOD(IN.baseTC.xy, normalTexRes.xy);

		const float numStepsScale = 1 - pow(abs(vViewTS.z), SilPomStepSizeViewDep);
		const float numSteps = numStepsScale * SilPomNumSteps + 1.0;
		//const float numSteps = SilPomNumSteps;

		const SilMapRes silmapRes = SilhouetteMap(IN_ext.wsTriPos, IN_ext.wsTriDispl, IN_ext.wsClipPlane, IN_ext.wsViewDir, IN_ext.texGenU, IN_ext.texGenV, lod, numSteps, mdDisplacement);
		const CbcWsRes cbcRes = ComputeBarycentricCorrespondence(silmapRes.baryHitPos, IN_ext.wsTriPos, IN_ext.wsTriDispl);

		const float3 norm = cbcRes.wsNorm * -IN.vTangent.w;
		const float3 binorm = cross(IN.vTangent.xyz, norm);
		const float3 tang = cross(norm, binorm);

		IN.vTangent.xyz = tang;
		IN.vBinormal.xyz = binorm;
		IN.baseTC.xy = silmapRes.uvHitPos * CM_SilPomDetailParams.zw;

		#if %BLENDLAYER
			blendFac = GetLayerBlendingValue(BlendTex, IN.baseTC.xy * BlendMaskTiling, 0, IN.Color.a, BlendFactor, BlendFalloff);
		#endif
		
		#if !%_RT_SAMPLE0
			#if !%_RT_DISSOLVE
				const float fDepthLinear = dot(cbcRes.wsPos, -CV_CameraFrontVector.xyz) * CV_NearFarClipDist.w;
				const float fDevDepth = (fDepthLinear * g_PS_ProjRatio.x + g_PS_ProjRatio.y) / fDepthLinear;
		
				OUT.fDepth = fDevDepth;
			#endif
		#endif
	#endif
#endif
  }

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Alpha testing
	
	#if %_RT_ALPHATEST
		half fDiffuseAlpha = GetAlphaTex(diffuseTex, IN.baseTC.xy);
		#if (%_RT_MSAA_QUALITY || %_RT_MSAA_QUALITY1) && %_RT_ALPHATEST
			GetAlphaCoverageMask( diffuseTex, IN.baseTC.xy, IN.baseTC.w, fDiffuseAlpha, OUT.uCoverageMask);
		#endif
    clip(fDiffuseAlpha - IN.baseTC.w);
	#endif
	
	#if %_RT_DISSOLVE
		const int2 vPixQuadIdx= (int2)IN.WPos.xy % 2; // 4 transparency levels for a 2x2 quad. We're using dot/abs instead, since rsx doens't support array indexing. 
		clip( (IN.baseTC.z > 0 ? 1 : -1) * (abs(dot(half4(0.0h, 0.76h, 0.5h,-1.0h), vPixQuadIdx.xxyy))-abs(IN.baseTC.z))); // todo: try using coverage mask when in MSAA mode.
  #endif
	
	////////////////////////////////////////////////////////////////////////////////////////////////
  // Output normals

  MaterialAttribsCommon attribs;
	
  half3 vNormalTS = half3(0,0,1);
	#if !%GRASS
		#if %NORMAL_MAP
			vNormalTS = GetNormalMap(normalsTex, IN.baseTC.xy);
		#endif
	#else
		attribs.NormalWorld = normalize(IN.vNormalWS.xyz);
		attribs.NormalWorld = attribs.NormalWorld * fFlipNormal;
	#endif

	#if %BLENDLAYER
		half3 vNormal2 = GetNormalMap( Bump2Tex, IN.baseTC.xy * blendLayer2Tiling );
		#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
			const float3 norm = vNormalTS;
			const float3 binorm = cross(float3(1, 0, 0), norm);
			const float3 tang = cross(norm, binorm);
			const float3x3 matLocal = float3x3(tang, -binorm, norm);
			vNormal2 = mul(vNormal2, matLocal);
		#endif
		vNormalTS = lerp( vNormalTS, vNormal2, blendFac );
	#endif

	half4 vDetail = 0;
	#if %DETAIL_MAPPING
		half3 vDetailScales = half3(DetailBumpScale, DetailDiffuseScale,DetailGlossScale);

		const float2 tcDetail = IN.baseTC.xy * CM_DetailTilingAndAlphaRef.xy;
		vDetail = GetDetailTex(detailTex, tcDetail) * vDetailScales.xxyz;

		#if %ALPHAMASK_DETAILMAP
			vDetail *= GetAlphaTex(diffuseTex, IN.baseTC.xy);
		#endif

		vNormalTS.xy += vDetail.xy;
	#endif

#if %BILLBOARD
		vNormalTS.xyz = GetNormalMap(normalsTex, IN.baseTC.xy).zyx;
#endif

	#if !%GRASS
		attribs.NormalWorld = normalize(mTangentToWS[2]);
		#if %NORMAL_MAP || %BLENDLAYER || %DETAIL_MAPPING
			attribs.NormalWorld = normalize(mul(vNormalTS, mTangentToWS));
		#endif
	#endif
	
	#if %LEAVES || %GRASS
		// Orient normal of vegetation planes towards viewer to reduce Fresnel gain and mimic some forward scattering 
		attribs.NormalWorld = normalize(attribs.NormalWorld - normalize(IN.viewTS) * NormalViewDependency);
	#endif

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Output smoothness

	half fSmoothness = MatSpecColor.w;
	fSmoothness *= GetSmoothnessTex(smoothnessTex, IN.baseTC.xy);

  #if %BLENDLAYER
		half layer2Smoothness = GetSmoothness2Tex(smoothness2Tex, IN.baseTC.xy * blendLayer2Tiling);
		fSmoothness = lerp(fSmoothness, layer2Smoothness, blendFac);
	#endif

	#if %DETAIL_MAPPING
		fSmoothness = fSmoothness + fSmoothness * vDetail.w;
	#endif
	
	attribs.Smoothness = fSmoothness;
	
	////////////////////////////////////////////////////////////////////////////////////////////////
  // Output albedo and reflectance
	
	half4 diffuseMap = GetDiffuseTex(diffuseTex, IN.baseTC.xy);
	half3 cAlbedo = diffuseMap.rgb;
	half3 cReflectance = MatSpecColor.rgb;
	
	#if %DECAL && %_RT_DECAL_TEXGEN_2D
		#if %_TT_TEXCOORD_PROJ
			cAlbedo = GetDiffuseTexProj(diffuseTex, IN.baseTC.xyzw);
		#else
			cAlbedo = GetDiffuseTex(diffuseTex, IN.baseTC.xy);
		#endif 
	#endif

	#if %SPECULAR_MAP
		cReflectance *= GetSpecularTex(specularTex, IN.baseTC.xy).rgb;
	#endif
	
	ApplyDirtAndBlendLayer(IN, blendFac, cAlbedo, cReflectance);

	#if %VERTCOLORS
		cAlbedo *= IN.Color.rgb;
	#endif

	cAlbedo *= MatDifColor.rgb; 

#if %DETAIL_MAPPING
	cAlbedo = cAlbedo + cAlbedo * vDetail.z;
#endif

#if %DECAL	
	cReflectance.xyz = GetLuminance(cReflectance.xyz);
#endif
	
	attribs.Albedo = cAlbedo;
	attribs.Reflectance = cReflectance;
	
	////////////////////////////////////////////////////////////////////////////////////////////////
	// Output SSS
	
	attribs.LightingModel = LIGHTINGMODEL_STANDARD;
	attribs.Transmittance = 0;
	attribs.ScatteringIndex = 0;
#if %SUBSURFACE_SCATTERING && !%DIRTLAYER && !%DECAL
	attribs.LightingModel = SSSIndex != 0 ? LIGHTINGMODEL_TRANSMITTANCE : attribs.LightingModel;
	attribs.ScatteringIndex = SSSIndex;
#endif

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Output translucency and SSS
	
#if (%GRASS || %LEAVES) && !%_RT_ALPHABLEND
	half fTranslucency = BackDiffuseMultiplier;
	#if %LEAVES
		fTranslucency *= GetOpacityTex(opacityTex, IN.baseTC.xy);
	#endif
	
	attribs.LightingModel = LIGHTINGMODEL_TRANSMITTANCE;
	attribs.Transmittance = saturate(fTranslucency) * TransmittanceColor.rgb;
#endif

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Output self-shadowing
	
	half fSelfShadowing = 0;

#if !%DECAL	
	if (mdQuality == MICRO_DETAIL_QUALITY_SPM || mdQuality == MICRO_DETAIL_QUALITY_POM || mdQuality == MICRO_DETAIL_QUALITY_OBM)
	{
	#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
		const float2 DetailTiling = CM_SilPomDetailParams.xy;
		//const float2 DetailTiling = float2(1, 1);
	#else
		const float2 DetailTiling = float2(1, 1);
	#endif

		const float3 light = normalize(mul((float3x3)mTangentToWS, g_PS_SunLightDir.xyz) * pomAdjustRayForNonSquareTexres);
		const float2 lightDelta = float2(light.x, light.y) * mdDisplacement * DetailTiling;

		const float2 uv = IN.baseTC.xy * DetailTiling;
		const float h0 = GetBlendedHeight(uv, blendFac, blendLayer2Tiling);
		float h = h0;

		if (mdQuality == MICRO_DETAIL_QUALITY_SPM || mdQuality == MICRO_DETAIL_QUALITY_POM)
		{
			h = max(0, GetBlendedHeight(uv + 1.000 * lightDelta, blendFac, blendLayer2Tiling));
			h = max(h, GetBlendedHeight(uv + 0.875 * lightDelta, blendFac, blendLayer2Tiling));
			h = max(h, GetBlendedHeight(uv + 0.750 * lightDelta, blendFac, blendLayer2Tiling));
			h = max(h, GetBlendedHeight(uv + 0.625 * lightDelta, blendFac, blendLayer2Tiling));
			h = max(h, GetBlendedHeight(uv + 0.500 * lightDelta, blendFac, blendLayer2Tiling));
			h = max(h, GetBlendedHeight(uv + 0.375 * lightDelta, blendFac, blendLayer2Tiling));
			h = max(h, GetBlendedHeight(uv + 0.250 * lightDelta, blendFac, blendLayer2Tiling));
			h = max(h, GetBlendedHeight(uv + 0.125 * lightDelta, blendFac, blendLayer2Tiling));
		}
		else
		{
			h = max(h, GetBlendedHeight(uv + 1.000 * lightDelta, blendFac, blendLayer2Tiling));
			h = max(h, GetBlendedHeight(uv + 0.666 * lightDelta, blendFac, blendLayer2Tiling));
			h = max(h, GetBlendedHeight(uv + 0.333 * lightDelta, blendFac, blendLayer2Tiling));
		}

		fSelfShadowing = saturate((h - h0) * mdSelfShadowStrength);
		
		if (mdSelfShadowStrength > 0)
			attribs.LightingModel = LIGHTINGMODEL_POM_SS;
	}
#endif

	attribs.SelfShadowingSun = fSelfShadowing;
	
	ApplyVegetationTerrainColor(IN, attribs);

#if %BILLBOARD
	attribs.LightingModel = LIGHTINGMODEL_TRANSMITTANCE;
	attribs.Transmittance = .15;
	attribs.Smoothness = .15;
#endif

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Output to GBuffer
	
#if %_RT_SAMPLE0
	EncodeMicroGBuffer( attribs, OUT.GBufferA, IN.WPos.xy );
#else
	EncodeGBuffer( attribs, OUT.GBufferA, OUT.GBufferB, OUT.GBufferC );
#endif

#if %_RT_SPRITE
	OUT.GBufferB.w = diffuseMap.a * 2.0;
	OUT.GBufferB.xyz *= OUT.GBufferB.xyz;
#endif
	
	////////////////////////////////////////////////////////////////////////////////////////////////
	// Velocity
	
#if %_RT_MOTION_BLUR && !%_RT_ALPHABLEND
	float2 ScreenTCPrev = IN.HPosPrev.xy / IN.HPosPrev.z;
	ScreenTCPrev = MapViewportToRaster(ScreenTCPrev);
	OUT.VelocityRT = OutputVelocityRT(IN.WPos.xy * (CV_ScreenSize.zw * 2), ScreenTCPrev);
#endif

  ////////////////////////////////////////////////////////////////////////////////////////////////
  // Alpha

  #if %_RT_ALPHABLEND      
    half fAlpha;
		
		fAlpha = GetAlphaTex(diffuseTex, IN.baseTC.xy) * MatDifColor.a;
		#if %VERTCOLORS
			fAlpha *= IN.Color.a;
		#endif
		#if %DECAL
			#if !%_TT_TEXCOORD_PROJ
				fAlpha *= GetOpacityTex(DecalOpacityTex, IN.baseTC.zw);
			#else
				fAlpha *= GetOpacityTex(DecalOpacityTex, IN.baseTC.xy);
			#endif
			#if !%DIRTLAYER
				fAlpha = saturate(pow(fAlpha * DecalAlphaMult, DecalFalloff));
			#endif
		#endif
		
		fAlpha = saturate( fAlpha );
		half fAlphaDiffuse = fAlpha;
		
		#if %DECAL && !%DIRTLAYER
			fAlphaDiffuse *= DecalDiffuseOpacity;
		#endif
		
		#if %_RT_SAMPLE0
			OUT.GBufferA.w = fAlpha;
		#else
			SetGBufferBlending( OUT.GBufferA, OUT.GBufferB, OUT.GBufferC, fAlpha, fAlphaDiffuse, fAlpha );
		#endif
  #endif

	return OUT;
}

#include "CommonZPassTess.cfi"

//////////////////////////////// technique ////////////////

technique ZPass
{
	pass p0
	{
		VertexShader = Common_ZPassVS() ZVS;
#if ENABLE_TESSELLATION
		HullShader   = Common_ZPassHS() GeneralHS;
		DomainShader = Common_ZPassDS() GeneralDS;
#endif

// TODO: Make SilPOM work with NVidia multires
#if %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
		GeometryShader = Common_ZPassGS() ZGS;
#else
		GeometryShader = $AutoGS_MultiRes();
#endif

		PixelShader = Common_ZPassPS() ZPS;

		ZEnable = true;
		ZWriteEnable = true;
		CullMode = Back;
     
#if %GRASS || %LEAVES || %HAIR_PASS
		CullMode = None;
#endif
	}
}
