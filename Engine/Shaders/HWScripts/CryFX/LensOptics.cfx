// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "Common.cfi"
#include "ShadeLib.cfi"
#include "ModificatorTC.cfi"

float Script : STANDARDSGLOBAL
<
	string Script =
		"NoPreview;"
		"LocalConstants;"
		"ShaderDrawType = Custom;"
		"ForceDrawLast;"
		"ShaderType = FX;"
>;

struct InpuptVS
{
	half3 pos : POSITION;
	half2 uv : TEXCOORD0;
	half4 color : COLOR0;
};

struct InputScreenVS
{
	half3 pos : POSITION;
	half2 uv : TEXCOORD0;
};

struct OutputVS
{
	half4 hpos:POSITION;
	half4 uv:TEXCOORD0;
	half3 center:TEXCOORD1;
	half4 color:COLOR0;
};

struct OutputScreenVS
{
	half4 hpos : POSITION;
	half2 uv : TEXCOORD0;
};

struct OutputGhostVS
{
	half4 hpos : POSITION;
	half2 uv : TEXCOORD0;
	half4 color : COLOR0;
};

struct OutputCameraOrbsVS
{
	half4 hpos : POSITION;
	half2 uv : TEXCOORD0;
	half3 litVec:TEXCOORD1;
	half4 color : COLOR0;
};

struct OutputShaftOcclusionVS
{
	half4 hpos:POSITION;
	half3 uvz:TEXCOORD0;
	half2 fsuv:TEXCOORD1;
	half4 color:COLOR0;
};

struct OutputShaftVS
{
	half4 hpos:POSITION;
	half2 uv:TEXCOORD0;
	half4 center:TEXCOORD1;
	half4 color:COLOR0;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
half4 ToneMappedPreMulAlpha( float4 OUT, float4 hdrParams )
{
	// Use-pre multiplied alpha for LDR version (consoles)
	OUT.rgb *= OUT.a;
	// Apply tone mapping on the fly
	half3 compressedCol = ( saturate((OUT * (hdrParams.x * OUT + hdrParams.y)) / (OUT * (hdrParams.x * OUT + 1.7h) + hdrParams.z) ) );
	return half4( compressedCol, OUT.a  );
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct SMeshTransformContext
{
	float2   outputDimensions;
	float2   size;
	float3x4 transform;
	float4   meshCenterAndBrt;
	float4   externTint;
	float4   dynamics;
};

OutputVS commonMeshTransform(InpuptVS IN, SMeshTransformContext context)
{
	OutputVS OUT;

	IN.pos.xy *= context.size;

#if %_RT_SAMPLE0
	half2 dir = context.meshCenterAndBrt.xy * 2 - 1;
	half2 rotSinCos = normalize( dir );
	half2 tmp = IN.pos.xy;
	IN.pos.x = tmp.x * rotSinCos.x - tmp.y * rotSinCos.y;
	IN.pos.y = tmp.y * rotSinCos.x + tmp.x * rotSinCos.y;
#endif

	IN.pos = mul( float3(IN.pos.xy,1), (float3x3)context.transform );
	IN.pos.z = 0.5;

#if %_RT_SAMPLE1
 	half2 aspectCorrectionRatio = ( half2(context.outputDimensions.xy) / max(context.outputDimensions.x, context.outputDimensions.y) ).yx;
 	IN.pos.xy *= aspectCorrectionRatio;
#endif

	OUT.hpos.xyz = half3(IN.pos.xyz  * 0.5) + context.meshCenterAndBrt.xyz;
	OUT.hpos.y = 1 - OUT.hpos.y;
	OUT.hpos.xy = OUT.hpos.xy * 2 - 1;
	OUT.hpos.z = 0;
	OUT.hpos.w = 1;

	OUT.uv.xy = IN.uv;
	OUT.uv.zw = OUT.hpos.xy;
	OUT.color = GetInputColor(IN.color) * context.meshCenterAndBrt.w * context.externTint * context.dynamics.x;
	OUT.center = half3( context.meshCenterAndBrt.x, 1-context.meshCenterAndBrt.y, context.meshCenterAndBrt.z );
	OUT.center.xy = OUT.center.xy * 2 -1;
	
	return OUT;
}

struct SComputeBasicVertexContext
{
	float4   meshCenterAndBrt;
	float2   outputDimensions;
	float2   size;
	float3x4 transform;
	float2   baseTexSize;
	float4   color;
};

void ComputeBasicVertexOutputs(InpuptVS IN, SComputeBasicVertexContext context, out half4 hpos, out half2 uvOut, out half4 colorOut)
{
	half3 localQuad;
	localQuad.xy = IN.pos.xy * context.size;
	float2 projPos = context.meshCenterAndBrt.xy;
	
#if %_RT_SAMPLE0
	half2 rotSinCos = normalize( half2(projPos.x, 1-projPos.y)*2-1 );
	half2 tmp = localQuad.xy;
	localQuad.x = tmp.x * rotSinCos.x - tmp.y * rotSinCos.y;
	localQuad.y = tmp.y * rotSinCos.x + tmp.x * rotSinCos.y;
#endif

	localQuad = mul(  half3(localQuad.xy,1), (float3x3)context.transform );
	localQuad.z = 0.5;

#if %_RT_SAMPLE5
 	half2 aspectCorrectionRatio = ( half2(context.outputDimensions.xy) / max(context.outputDimensions.x, context.outputDimensions.y) ).yx;
 	localQuad.xy *= aspectCorrectionRatio;
#endif

	half2 rectTexScalingRatio = half2(context.baseTexSize.xy) / max(context.baseTexSize.x, context.baseTexSize.y);
	localQuad.xy *= rectTexScalingRatio;
	
	projPos.y = 1-projPos.y;
	hpos.xy = projPos*2-1 + localQuad.xy;
	hpos.zw = half2(localQuad.z,1);

	uvOut = IN.uv;
	colorOut = context.color;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ghost

cbuffer CBGhost : register(b0)
{
	struct 
	{
		float4   outputDimAndSize;
		float4   occPatternInfo;
		float4   externTint;
		float3x4 xform;
		float4   dynamics;
		float4   lightProjPos;
		float4   hdrParams;
		float4   meshCenterAndBrt;
		float4   baseTexSize;
		float4   ghostTileInfo;
		float4   color;
	} cbGhost;
};

OutputGhostVS lensGhostVS( InpuptVS IN )
{
	OutputGhostVS OUT;
	
	SComputeBasicVertexContext context;
	context.meshCenterAndBrt     = cbGhost.meshCenterAndBrt;
	context.outputDimensions     = cbGhost.outputDimAndSize.xy;
	context.size                 = cbGhost.outputDimAndSize.zw;
	context.transform            = cbGhost.xform;
	context.baseTexSize          = cbGhost.baseTexSize;
	context.color                = cbGhost.color;

	ComputeBasicVertexOutputs(IN, context, OUT.hpos, OUT.uv, OUT.color);

	half2 spriteIdx2d;
	spriteIdx2d.y = floor(cbGhost.ghostTileInfo.w/(cbGhost.ghostTileInfo.x));
	spriteIdx2d.x = cbGhost.ghostTileInfo.w - spriteIdx2d.y * cbGhost.ghostTileInfo.x;

	OUT.uv = IN.uv;
	OUT.color *= cbGhost.dynamics.x;

	return OUT;
}

Texture2D    ghostTex              : register(t0);
Texture2D    ghostOcclusionTex     : register(t5);
SamplerState ssGhost               : register(s0); 

half4 lensGhostPS(  OutputGhostVS IN ) : COLOR
{
	half4 color = DecodeRGBK( GetTexture2D( ghostTex, ssGhost, IN.uv ), 32, false );
#if %_RT_SAMPLE3
	float2 uv = cbGhost.occPatternInfo.xy + half2(cbGhost.occPatternInfo.z * IN.uv.x, cbGhost.occPatternInfo.w*(1-IN.uv.y));
	color *= GetTexture2D( ghostOcclusionTex, ssGhost, uv ).r;
#endif
	return ToneMappedPreMulAlpha(color * IN.color, cbGhost.hdrParams);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Glow

cbuffer CBGlow : register(b0)
{
	struct 
	{
		float4   outputDimAndSize;
		float4   occPatternInfo;
		float4   externTint;
		float3x4 xform;
		float4   dynamics;
		float4   lightProjPos;
		float4   hdrParams;
		float4   meshCenterAndBrt;
		float4   lumaParams;
	} cbGlow;
};

OutputVS GlowVS( InpuptVS IN )
{
	SMeshTransformContext context;
	context.outputDimensions     = cbGlow.outputDimAndSize.xy;
	context.size                 = cbGlow.outputDimAndSize.zw;
	context.transform            = cbGlow.xform;
	context.meshCenterAndBrt     = cbGlow.meshCenterAndBrt;
	context.externTint           = cbGlow.externTint;
	context.dynamics             = cbGlow.dynamics;

	return commonMeshTransform(IN, context);
}

half4 GlowPS( OutputVS IN ) : COLOR
{
	#define thou IN.uv.x
	#define theta IN.uv.y
	
	half constArea = 1;
	half fadingArea = pow( lerp( constArea, 0, saturate((thou-cbGlow.lumaParams.x)/(1-cbGlow.lumaParams.x)) ), cbGlow.lumaParams.y);

	const half fadingSpan = 0.001;
	half transition = saturate( lerp( 1,  0, (cbGlow.lumaParams.x-thou)/fadingSpan )  );
	half finalGrad = lerp( constArea, fadingArea, transition );
	return ToneMappedPreMulAlpha(IN.color * finalGrad, cbGlow.hdrParams);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Chromatic ring

cbuffer CBChromaticRing : register(b0)
{
	struct 
	{
		float4   outputDimAndSize;
		float4   occPatternInfo;
		float4   externTint;
		float3x4 xform;
		float4   dynamics;
		float4   lightProjPos;
		float4   hdrParams;
		float4   meshCenterAndBrt;
	} cbChromaticRing;
};

OutputVS ChromaticRingVS( InpuptVS IN )
{
	SMeshTransformContext context;
	context.outputDimensions     = cbGlow.outputDimAndSize.xy;
	context.size                 = cbGlow.outputDimAndSize.zw;
	context.transform            = cbGlow.xform;
	context.meshCenterAndBrt     = cbGlow.meshCenterAndBrt;
	context.externTint           = cbGlow.externTint;
	context.dynamics             = cbGlow.dynamics;

	return commonMeshTransform(IN, context);
}

Texture2D    spectrumTex : register(t0);
SamplerState ssSpectrum  : register(s0);

half4 ChromaticRingPS( OutputVS IN ) : COLOR
{
	#define thou IN.uv.x
	half dist = (thou*2-1);
	half alpha = exp( -4*dist*dist ) - exp(-4);
	half3 clr = GetTexture2D( spectrumTex, ssSpectrum, half2( 0.5, 1-IN.uv.x ) ).rgb;

	return ToneMappedPreMulAlpha(half4( clr*IN.color.rgb,  alpha*IN.color.a), cbChromaticRing.hdrParams );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Iris shafts

Texture2D    irisSpectrumTex    : register(t0);
Texture2D    irisTex            : register(t1);
SamplerState ssIrisShafts       : register(s0);

half4 IrisShaftsGlowPS( OutputVS IN ) : COLOR
{
	half3 color = GetTexture2D( irisTex, ssIrisShafts, half2( IN.uv.x, 1-IN.uv.y ) ).rgb;

#if %_RT_SAMPLE2
	color *= GetTexture2D( irisSpectrumTex, ssIrisShafts, IN.uv ).rgb;
#endif
	return ToneMappedPreMulAlpha(half4(color*IN.color.rgb, IN.color.a), cbGlow.hdrParams);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Streaks

Texture2D     streaksTex    : register(t0);
SamplerState  ssStreaks     : register(s0);

half4 StreaksPS( OutputVS IN ) : COLOR
{
	half3 color = saturate( exp( -8*IN.uv.x*IN.uv.x ) );
#if %_RT_SAMPLE2
	color *= GetTexture2D( streaksTex, ssStreaks, half2( 0.5, 1-IN.uv.x ) ).rgb;
#endif
	return ToneMappedPreMulAlpha(half4( color*IN.color.rgb, IN.color.a ), cbGlow.hdrParams);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Camera Orbs

cbuffer CBCameraOrbs : register(b0)
{
	struct 
	{
		float4   outputDimAndSize;
		float4   occPatternInfo;
		float4   externTint;
		float3x4 xform;
		float4   dynamics;
		float4   lightProjPos;
		float4   hdrParams;
		float4   lightColorInfo;
		float4   lensDetailParams;
		float4   lensDetailParams2;
		float4   ambientDiffuseRGBK;
		float4   advShadingParams;
		
	} cbCameraOrbs;
};

OutputCameraOrbsVS CameraOrbsVS( InpuptVS IN )
{
	OutputCameraOrbsVS OUT;
	OUT.hpos.xyz = mul( (float3x3)cbCameraOrbs.xform, float3(IN.pos.xy,1) );
	OUT.hpos.zw = half2(0,1);

	half3 surfPos;
	surfPos.xy = OUT.hpos.xy;
	surfPos.z = 0;

	half3 lPos = half3(cbCameraOrbs.lightProjPos.x, 1-cbCameraOrbs.lightProjPos.y, cbCameraOrbs.lightProjPos.z) *2 -1;
	half3 distDiff = lPos-surfPos.xyz;

#if %_RT_SAMPLE5
	half2 aspectCorrectionRatio = ( half2(cbCameraOrbs.outputDimAndSize.xy) / max(cbCameraOrbs.outputDimAndSize.x, cbCameraOrbs.outputDimAndSize.y) ).yx;
	distDiff.xy /= aspectCorrectionRatio;
#endif

	half distSq = dot( distDiff.xy, distDiff.xy )/cbCameraOrbs.lightColorInfo.w;
	half illum = exp2( -10 * (distSq) );

	OUT.uv = IN.uv;
	OUT.color = GetInputColor(IN.color) * half4(cbCameraOrbs.lightColorInfo.xyz*illum, 1) * cbCameraOrbs.dynamics.x;
	OUT.litVec = normalize( half3( lPos.xy - surfPos.xy, 1 ) );

	return OUT;
}

Texture2D orbTex              : register(t0)
Texture2D ambientTex          : register(t1)
Texture2D lensTex             : register(t2)
Texture2D orbOcclusionTex     : register(t5)

SamplerState ssOrb            : register(s0)
SamplerState ssAmbient        : register(s1)
SamplerState ssOcclusion      : register(s5)

half detailIllum( Texture2D tex, half2 uv, half3 dxy, half3 litVec, half bumpiness )
{
	#define bumpCh r
	half center = GetTexture2D( tex, ssOrb, uv );
	half orbClrRight = GetTexture2D( tex, ssOrb, uv + dxy.xz ).bumpCh;
	half orbClrTop = GetTexture2D( tex, ssOrb, uv + dxy.zy ).bumpCh;
	half3 xVec = normalize( half3( dxy.x,0, (orbClrRight-center.bumpCh)*bumpiness ) );
	half3 yVec = normalize( half3( 0,dxy.y, (orbClrTop-center.bumpCh)*bumpiness ) );
	half3 bumpNormal = cross( yVec, xVec );
	// TODO: tangent rotation
	half3 eyeVec = half3(0,0,-1);
	half orbDiffuse = dot( litVec, bumpNormal );
	half3 eyeReflect = reflect( eyeVec, bumpNormal );
	half orbSpec = pow( saturate(dot(eyeReflect,litVec)-0.05), 7 );

	return orbSpec;
}

half4 ComputeCameraOrbsColor( OutputCameraOrbsVS IN, half4 orbClr, float4 lensDetailParams )
{
	half4 detailClr = 0;

#if %_RT_SAMPLE4
	// this is screen space, just use neighboor pixels
	half3 dxy = half3( ddx(IN.uv.x), ddy(IN.uv.y), 0 )*3;
	half detailLum = detailIllum( orbTex, IN.uv, dxy, IN.litVec, lensDetailParams.z );
	detailClr = detailLum;
	detailClr.a = 1;
#endif

#if %_RT_SAMPLE3
	float2 uv = cbCameraOrbs.occPatternInfo.xy + float2(cbCameraOrbs.occPatternInfo.z * IN.uv.x, cbCameraOrbs.occPatternInfo.w*(1-IN.uv.y));
	IN.color *= GetTexture2D( orbOcclusionTex, ssOcclusion, uv).r;
#endif

#if %_RT_SAMPLE2
	half shadow = (1-orbClr);
	shadow = saturate(pow( shadow, cbCameraOrbs.advShadingParams.x ));
	half4 ambientDirect = GetTexture2D( ambientTex, ssAmbient, IN.uv );
	half4 ambientDiffuse = DecodeRGBK( cbCameraOrbs.ambientDiffuseRGBK, 10, false );
	half4 dirtClr = IN.color * orbClr*(1-shadow) + (ambientDiffuse + ambientDirect) * saturate(shadow+cbCameraOrbs.advShadingParams.y);
	return ToneMappedPreMulAlpha(half4(dirtClr.rgb, shadow*cbCameraOrbs.advShadingParams.y ), cbCameraOrbs.hdrParams);
#else
	float4 color = IN.color * (orbClr * lensDetailParams.x +  detailClr * lensDetailParams.y);
	return ToneMappedPreMulAlpha(color, cbCameraOrbs.hdrParams);
#endif
}

half4 CameraOrbsPS( OutputCameraOrbsVS IN ) : COLOR
{
	return ComputeCameraOrbsColor( IN, GetTexture2D( orbTex, ssOrb, IN.uv ), cbCameraOrbs.lensDetailParams );
}

half4 CameraLensPS( OutputCameraOrbsVS IN ) : COLOR
{
	return ComputeCameraOrbsColor( IN, GetTexture2D( lensTex, ssOrb, IN.uv ), cbCameraOrbs.lensDetailParams2 );
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Shafts occlusion

cbuffer CBImageSpaceShafts : register(b0)
{
	struct 
	{
		float4   outputDimAndSize;
		float4   occPatternInfo;
		float4   externTint;
		float3x4 xform;
		float4   dynamics;
		float4   lightProjPos;
		float4   hdrParams;
		float4   meshCenterAndBrt;
		float4   color;
		float4   sceneDepth;
	} cbImageSpaceShafts;
};

OutputShaftOcclusionVS shaftsOccVS( InpuptVS IN )
{
	OutputShaftOcclusionVS OUT;

	SComputeBasicVertexContext context;
	context.meshCenterAndBrt     = cbImageSpaceShafts.meshCenterAndBrt;
	context.outputDimensions     = cbImageSpaceShafts.outputDimAndSize.xy;
	context.size                 = cbImageSpaceShafts.outputDimAndSize.zw;
	context.transform            = cbImageSpaceShafts.xform;
	context.baseTexSize          = float4(1, 1, 0, 0);
	context.color                = cbImageSpaceShafts.color;

	float2 uv;
	ComputeBasicVertexOutputs(IN, context, OUT.hpos, uv, OUT.color);

	OUT.uvz = half3( uv, cbImageSpaceShafts.sceneDepth.x );
	OUT.fsuv = OUT.hpos.xy*0.5+0.5;
	OUT.fsuv.y = 1-OUT.fsuv.y;

	return OUT;
}

Texture2D    shaftTex   : register(t0);
Texture2D    depthTex   : register(t1);
SamplerState ssShafts   : register(s0);

half4 shaftsOccPS( OutputShaftOcclusionVS IN ) : COLOR
{
	float depth = GetTexture2D(depthTex, ssShafts, IN.fsuv);
	half4 baseClr = GetTexture2D(shaftTex, ssShafts, IN.uvz.xy );
	half occ = saturate( sign(depth-IN.uvz.z) ); 

	half2 ndcUV = IN.uvz.xy*2-1;
	half vig = 1-length(ndcUV);

	return ToneMappedPreMulAlpha(occ*vig*baseClr, cbImageSpaceShafts.hdrParams);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Shafts gen

OutputShaftVS shaftsVS( InpuptVS IN )
{
	OutputShaftVS OUT;
	
	SComputeBasicVertexContext context;
	context.meshCenterAndBrt     = cbImageSpaceShafts.meshCenterAndBrt;
	context.outputDimensions     = cbImageSpaceShafts.outputDimAndSize.xy;
	context.size                 = cbImageSpaceShafts.outputDimAndSize.zw;
	context.transform            = cbImageSpaceShafts.xform;
	context.baseTexSize          = float4(1, 1, 0, 0);
	context.color                = cbImageSpaceShafts.color;

	ComputeBasicVertexOutputs(IN, context, OUT.hpos, OUT.uv, OUT.color);
	
	OUT.uv.y = 1-OUT.uv.y;
	OUT.center.xy = cbImageSpaceShafts.meshCenterAndBrt.xy;
	OUT.center.zw = OUT.hpos.xy*0.5+0.5;
	OUT.center.w = 1-OUT.center.w;
	
	return OUT;
}

Texture2D shaftOcclusionTex : register(t0)

half4 shaftsPS( OutputShaftVS IN ) : COLOR
{
	const int N_SAMPLE = 30;
	half2 duv = (IN.center.zw - IN.center.xy) / N_SAMPLE;
	half decayFactor = pow( 0.98,30.0/N_SAMPLE );
	half4 color = half4( GetTexture2D(shaftOcclusionTex, ssShafts, IN.center.zw).rgb, 1 ) * decayFactor;
	#define decay (color.w)
	half2 cuv = IN.center.zw;
	for( int i=0; i<N_SAMPLE; i++ )
	{
		cuv -= duv;
		color.rgb += GetTexture2D(shaftOcclusionTex, ssShafts, cuv ).rgb * decay;
		decay *= decayFactor;
	}
	const half ssFalloff = decayFactor * 0.01;  // falloff curve base factor
	half2 ndcUV = IN.uv.xy*2-1;
	half vig = saturate( 1-pow( dot(ndcUV,ndcUV), 0.25) );
	return ToneMappedPreMulAlpha(half4(color.rgb*IN.color.rgb*vig/N_SAMPLE, IN.color.a), cbImageSpaceShafts.hdrParams);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Shafts blend

OutputScreenVS shaftBlendVS( InputScreenVS IN )
{
	OutputScreenVS OUT;
	OUT.hpos.xy = IN.uv * 2 - 1;
	OUT.hpos.zw = float2(0, 1);
		
	OUT.uv = float2( IN.uv.x, 1-IN.uv.y );
	return OUT;
}

half4 shaftBlendPS( OutputScreenVS IN ) : COLOR
{
	half4 shaftColor = GetTexture2D(shaftTex, ssShafts, IN.uv );
	half4 finalBlendColor = half4( shaftColor.rgb*shaftColor.a, 1 );
	return ToneMappedPreMulAlpha(finalBlendColor, cbImageSpaceShafts.hdrParams);
}

////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
technique Enable
{
	CustomRE LensOptics
	{
	}
	
	pass GhostTest
	{
		VertexShader = lensGhostVS() LensOpticsVS;
		PixelShader  = lensGhostPS() LensOpticsPS;
	}
}

technique Ghost
{
	pass p0 
	{
		VertexShader = lensGhostVS() LensOpticsVS;
		PixelShader = lensGhostPS() LensOpticsPS;
	}
}

technique Glow
{
	pass p0 
	{
		VertexShader = GlowVS() LensOpticsVS;
		PixelShader  = GlowPS() LensOpticsPS;
	}
}

technique ChromaticRing
{
	pass p0 
	{
		VertexShader = ChromaticRingVS() LensOpticsVS;
		PixelShader  = ChromaticRingPS() LensOpticsPS;
	}
}

technique IrisShafts
{
	pass p0
	{
		VertexShader = GlowVS()           LensOpticsVS;
		PixelShader  = IrisShaftsGlowPS() LensOpticsPS;
	}
}

technique Streaks
{
	pass p0
	{
		VertexShader = GlowVS() LensOpticsVS;
		PixelShader  = StreaksPS() LensOpticsPS;
	}
}

technique CameraOrbs
{
	pass p0
	{
		VertexShader = CameraOrbsVS() LensOpticsVS;
		PixelShader = CameraOrbsPS() LensOpticsPS;
	}
}

technique CameraLens
{
	pass p0
	{
		VertexShader = CameraOrbsVS() LensOpticsVS;
		PixelShader = CameraLensPS() LensOpticsPS;
	}
}

technique ImageSpaceShaftsOcclusion
{
	pass p0
	{
		VertexShader = shaftsOccVS() LensOpticsVS;
		PixelShader  = shaftsOccPS() LensOpticsPS;
	}
}

technique ImageSpaceShaftsGen
{
	pass p0
	{
		VertexShader = shaftsVS() LensOpticsVS;
		PixelShader  = shaftsPS() LensOpticsPS;
	}
}

technique ImageSpaceShaftsBlend
{
	pass p0
	{
		VertexShader = shaftBlendVS() LensOpticsVS;
		PixelShader  = shaftBlendPS() LensOpticsPS;
	}
}

