// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

float4 vfViewPos				: PB_CameraPos;
float4 vfParams					: PB_VolumetricFogParams;
float4 vfRampParams			: PB_VolumetricFogRampParams;
float4 vfSunDir					: PB_VolumetricFogSunDir;

float3 vfColGradBase		: PB_FogColGradColBase;
float3 vfColGradDelta		: PB_FogColGradColDelta;
float4 vfColGradParams	: PB_FogColGradParams;
float4 vfColGradRadial	: PB_FogColGradRadial;

struct SFogParams
{
	float3 viewPos; // PB_CameraPos
	float  padding0;

	// PB_VolumetricFogParams
	float  heightDensityScale;
	float  heightDensityAtBaseHeight;
	float  heightDiffFromBase;
	float  expHeightDiffFromBase;

	// PB_VolumetricFogRampParams
	float4 rampParams;

	// PB_VolumetricFogSunDir
	float3 sunDir;
	float  densityClamp;

	// PB_FogColGradColBase
	float3 colGradBase;
	float  padding1;

	// PB_FogColGradColDelta
	float3 colGradDelta;
	float  padding2;

	// PB_FogColGradParams
	float heightColGradScale;
	float heightColGradOffset;
	float radialSizeCtrl;
	float radialLobeCtrl;

	// PB_FogColGradRadial
	float3 radialColor;
	float  invZFar;
};

////////////////////////////////////////////////////////////////////////////
SFogParams GetFogParamsInternal()
{
	SFogParams params;

	params.viewPos.xyz = GetWorldViewPos();
	params.padding0 = 0.0f;

	params.heightDensityScale = vfParams.x;
	params.heightDensityAtBaseHeight = vfParams.y;
	params.heightDiffFromBase = vfParams.z;
	params.expHeightDiffFromBase = vfParams.w;

	params.rampParams = vfRampParams;

	params.sunDir = vfSunDir.xyz;
	params.densityClamp = vfSunDir.w;

	params.colGradBase = vfColGradBase;
	params.padding1 = 0.0f;

	params.colGradDelta = vfColGradDelta;
	params.padding2 = 0.0f;

	params.heightColGradScale = vfColGradParams.x;
	params.heightColGradOffset = vfColGradParams.y;
	params.radialSizeCtrl = vfColGradParams.z;
	params.radialLobeCtrl = vfColGradParams.w;

	params.radialColor = vfColGradRadial.xyz;
	params.invZFar = vfColGradRadial.w;

	return params;
}

////////////////////////////////////////////////////////////////////////////
// impl

float ComputeVolumetricFogInternal(in float3 cameraToWorldPos, in SFogParams fogParams)
{
	float fogInt = 1.0;

	const float t = fogParams.heightDensityScale * cameraToWorldPos.z;
	if (abs(t) > 0.01)
	{
		// Subtraction of extreme range difference such as (exp(t) - 1) causes a fog glich, it should be kept appropriate range.
		// NOTE: fogInt *= ((exp(t) - 1.0) / t) * exp(heightDiffFromBase) causes a fog glich.
		fogInt *= (exp(t + fogParams.heightDiffFromBase) - fogParams.expHeightDiffFromBase) / t;
	}
	else
	{
		fogInt *= fogParams.expHeightDiffFromBase;
	}

	// NOTE: heightDensityAtBaseHeight = log2(e) * fogDensity * exp(heightDensityScale * CV_WorldViewPos.z + heightOffset) / exp(heightDiffFromBase);
	const float l = length(cameraToWorldPos);
	const float u = l * fogParams.heightDensityAtBaseHeight;
	fogInt *= u;

	float f = saturate(exp2(-fogInt));

	half r = saturate(l * fogParams.rampParams.x + fogParams.rampParams.y);
	r = r * (2 - r);
	r = r * fogParams.rampParams.z + fogParams.rampParams.w;

	f = (1 - f) * r;
	return max(1 - f, fogParams.densityClamp);
}

// RET.xyz = fog color (HDR)
// RET.w = fog factor to lerp scene/object color with (i.e. lerp(RET.xyz, sceneColor.xyz, RET.w))
float4 GetVolumetricFogColorInternal(
	in float3 worldPos,
	in float3 cameraToWorldPos,
	in float radialFogShadowInfluence,
	in float ambientFogShadowInfluence,
	in SFogParams fogParams)
{
	const float fog = ComputeVolumetricFogInternal(cameraToWorldPos, fogParams);

	half h = saturate(worldPos.z * fogParams.heightColGradScale + fogParams.heightColGradOffset);
	h = h * (2 - h);

	half3 fogColor = (fogParams.colGradBase + h * fogParams.colGradDelta) * ambientFogShadowInfluence;

	const half l = saturate(length(cameraToWorldPos) * fogParams.invZFar);
	const half radialLobe = pow(l, fogParams.radialLobeCtrl);
	const half radialSize = exp2(dot(normalize(cameraToWorldPos), fogParams.sunDir.xyz) * -fogParams.radialSizeCtrl + fogParams.radialSizeCtrl); // exp2(-fogParams.radialSizeCtrl * (1-cos(x))

	fogColor += radialLobe * radialSize * fogParams.radialColor * radialFogShadowInfluence;

	return float4(fogColor, fog);
}

float4 GetVolumetricFogColorInternal(in float3 worldPos, in SFogParams fogParams)
{
	const float3 camToWorld = worldPos - fogParams.viewPos.xyz;
	return GetVolumetricFogColorInternal(worldPos, camToWorld, 1, 1, fogParams);
}


////////////////////////////////////////////////////////////////////////////
// delegates

float4 GetVolumetricFogColor(in float3 worldPos, in float3 cameraToWorldPos, in float radialFogShadowInfluence, in float ambientFogShadowInfluence)
{
	const SFogParams fogParams = GetFogParamsInternal();
	return GetVolumetricFogColorInternal(worldPos, cameraToWorldPos, radialFogShadowInfluence, ambientFogShadowInfluence, fogParams);
}

float4 GetVolumetricFogColor(in SFogParams fogParams, in float3 worldPos, in float3 cameraToWorldPos, in float radialFogShadowInfluence, in float ambientFogShadowInfluence)
{
	return GetVolumetricFogColorInternal(worldPos, cameraToWorldPos, radialFogShadowInfluence, ambientFogShadowInfluence, fogParams);
}

float4 GetVolumetricFogColor(in float3 worldPos, in float3 cameraToWorldPos)
{
	const SFogParams fogParams = GetFogParamsInternal();
	return GetVolumetricFogColorInternal(worldPos, cameraToWorldPos, 1, 1, fogParams);
}

float4 GetVolumetricFogColor(in SFogParams fogParams, in float3 worldPos, in float3 cameraToWorldPos)
{
	return GetVolumetricFogColorInternal(worldPos, cameraToWorldPos, 1, 1, fogParams);
}

float4 GetVolumetricFogColor(in float3 worldPos)
{
	const SFogParams fogParams = GetFogParamsInternal();
	return GetVolumetricFogColorInternal(worldPos, fogParams);
}

float4 GetVolumetricFogColor(in SFogParams fogParams, in float3 worldPos)
{
	return GetVolumetricFogColorInternal(worldPos, fogParams);
}

float GetVolumetricFogDensity(in float3 worldPos)
{
	const SFogParams fogParams = GetFogParamsInternal();
	const float3 camToWorld = worldPos - fogParams.viewPos.xyz;
	return ComputeVolumetricFogInternal(camToWorld, fogParams);
}




////////////////////////////////////////////////////////////////////////////
// Volumetric fog using volume texture

//#define SAMPLE_DISTRIBUTION_LINEAR

#define VOLUMETRIC_FOG_SAMPLE_COEFFICIENT					(2.0f)

struct VolumetricFogLight
{
	float3 cDiffuse;
	float fFallOff;
	float radialLobe;
	float dotLE;
	float k;
	float k2;
};

struct VolumetricFogSunLight
{
	float fFallOff;
	float dotLE;
	float blendFactor;
	float blendMode;
	float3 cDiffuse1;
	float3 cDiffuse2;
	float2 anisotropy1;
	float2 anisotropy2;
};

struct VolumetricFogTexcoord
{
	float3  texcoord;
	float   range;
	float   linearDepth;
};

struct VolumetricFogSampling
{
	Texture3D<float4>   volumetricFogTex;
	TextureCube<float4> globalEnvProbeTex0;
	TextureCube<float4> globalEnvProbeTex1;

	SamplerState        trilinearClampSState;
};

struct SVolumetricFogParams
{
	// PB_VolumetricFogSunDir
	float3 sunDir;
	float  padding0;

	// PB_VolumetricFogSamplingParams
	float  nearDist;
	float  invFarMinusNearDist;
	float  maxIndex;
	float  invMaxIndex;

	float2 screenSize; // PB_ScreenSize.xy
	float  farMinusNearDist; // PB_VolumetricFogDistributionParams.y
	float  invMaxIndexMinusOne; // PB_VolumetricFogDistributionParams.z

	float3 viewPos; // PB_CameraPos
	float  framwCountJitter; // PB_VolumetricFogDistributionParams.w

	float  scatterCoefficient; // PB_VolumetricFogScatteringParams.x
	float  extinctionCoefficient; // PB_VolumetricFogScatteringParams.y
	float  blendFactor; // PB_VolumetricFogScatteringBlendParams.x
	float  blendMode; // PB_VolumetricFogScatteringBlendParams.y

	// SunColor * FogAlbedoColor1
	float3 cDiffuse1; // PB_VolumetricFogScatteringColor
	float  padding1;

	// SunColor * FogAlbedoColor2
	float3 cDiffuse2; // PB_VolumetricFogScatteringSecondaryColor
	float  padding2;

	// x: anisotoropy factor k1, y: 1.0 - k1 * k1
	float2 anisotropy1; //PB_VolumetricFogScatteringParams.zw
	float2 anisotropy2; //PB_VolumetricFogScatteringColor.w, PB_VolumetricFogScatteringSecondaryColor.w

	// PB_VolumetricFogHeightDensityParams
	float  heightDensityScale;
	float  densityAtViewer;
	float  fogVisibility;
	float  clampTransmittance;

	// PB_VolumetricFogHeightDensityRampParams
	float  rampStart;
	float  rampEnd;
	float  oneOverRampDiff;
	float  rampStartOverRampDiff;

	// PB_VolumetricFogDistanceParams
	float  farDistTopLeft;
	float  farDistTopCenter;
	float  farDistCenterLeft;
	float  farDistCenter;

	// PB_VolumetricFogGlobalEnvProbe0
	float3 globalProbeColor0;
	float  globalProbeAttenuation0;

	// PB_VolumetricFogGlobalEnvProbe1
	float3 globalProbeColor1;
	float  globalProbeAttenuation1;

	// PB_time
	float4 timeParams;
};

// TODO: remove these textures after completely moving to new graphics pipeline.
Texture3D<float4> VolumetricFogTexture : TS_VolumetricFog;
TextureCube<float4> vfGlobalEnvProbeTexture0 : register(t25) = TS_VolumetricFogGlobalEnvProbe0;
TextureCube<float4> vfGlobalEnvProbeTexture1 : register(t26) = TS_VolumetricFogGlobalEnvProbe1;
SamplerState vfTrilinearClampSState : SS_TrilinearClamp;

// x:near distance, y:reciprocal of far minus near distance, z:depth resolution of volume tex, w:reciprocal of depth resolution
float4 vfSamplingParams : PB_VolumetricFogSamplingParams;

// x:near distance, y:far minus near distance, z:reciprocal of depth resolution minus one, w: frame count for jittering
float4 vfDistributionParams : PB_VolumetricFogDistributionParams;

// x: scattering factor, y: extinction factor, z: anisotoropy, w: one minus squared anisotoropy
float4 vfScatteringParams : PB_VolumetricFogScatteringParams;

// x: blend factor of two radial lobes, y: blend mode of two radial lobes, z,w: not used
float4 vfScatteringBlendParams : PB_VolumetricFogScatteringBlendParams;

// xyz: sun color multiplied by a fog albedo, w: secondary anisotoropy
float4 vfScatteringColor : PB_VolumetricFogScatteringColor;

// xyz: sun color multiplied by a fog albedo, w: one minus squared secondary anisotoropy
float4 vfScatteringSecondaryColor : PB_VolumetricFogScatteringSecondaryColor;

// x: height scale, y: log2(e) * fogDensity * exp(heightScale * vfViewPos.z + heightOffset)
// z: global fog visibility, w: max density clamp
float4 vfHeightDensityParams : PB_VolumetricFogHeightDensityParams;

// x: ramp start distance, y: ramp end distance, z: 1 / (RampEnd - RampStart), w: RampStart / (RampEnd - RampStart)
float4 vfHeightDensityRampParams : PB_VolumetricFogHeightDensityRampParams;

// x: far distance at top left corner of screen, y: far distance at top, z: far distance at left, w: far distance at center of screen
float4 vfDistanceParams : PB_VolumetricFogDistanceParams;

// xyz: primary global env probe color multiplied by a fog albedo, w: attenuation of primary global env probe
float4 vfGlobalEnvProbeParams0 : PB_VolumetricFogGlobalEnvProbe0;

// xyz: secondary global env probe color multiplied by a fog albedo, w: attenuation of secondary global env probe
float4 vfGlobalEnvProbeParams1 : PB_VolumetricFogGlobalEnvProbe1;

float4 vfTimeParams = { PB_time 1.0, PB_time 0.5, PB_time 0.25, PB_time 0.125};

SVolumetricFogParams vfGetVolumetricFogParamsInternal()
{
	SVolumetricFogParams params;

	params.sunDir = vfSunDir.xyz;
	params.padding0 = 0.0f;

	params.nearDist = vfSamplingParams.x;
	params.invFarMinusNearDist = vfSamplingParams.y;
	params.maxIndex = vfSamplingParams.z;
	params.invMaxIndex = vfSamplingParams.w;

	params.screenSize = CV_ScreenSize.xy;
	params.farMinusNearDist = vfDistributionParams.y;
	params.invMaxIndexMinusOne = vfDistributionParams.z;

	params.viewPos = GetWorldViewPos();
	params.framwCountJitter = vfDistributionParams.w;

	params.scatterCoefficient = vfScatteringParams.x;
	params.extinctionCoefficient = vfScatteringParams.y;
	params.blendFactor = vfScatteringBlendParams.x;
	params.blendMode = vfScatteringBlendParams.y;

	params.cDiffuse1 = vfScatteringColor.xyz;
	params.padding1 = 0.0f;

	params.cDiffuse2 = vfScatteringSecondaryColor.xyz;
	params.padding2 = 0.0f;

	params.anisotropy1.x = vfScatteringParams.z;
	params.anisotropy1.y = vfScatteringParams.w;
	params.anisotropy2.x = vfScatteringColor.w;
	params.anisotropy2.y = vfScatteringSecondaryColor.w;

	params.heightDensityScale = vfHeightDensityParams.x;
	params.densityAtViewer = vfHeightDensityParams.y;
	params.fogVisibility = vfHeightDensityParams.z;
	params.clampTransmittance = vfHeightDensityParams.w;

	params.rampStart = vfHeightDensityRampParams.x;
	params.rampEnd = vfHeightDensityRampParams.y;
	params.oneOverRampDiff = vfHeightDensityRampParams.z;
	params.rampStartOverRampDiff = vfHeightDensityRampParams.w;

	params.farDistTopLeft = vfDistanceParams.x;
	params.farDistTopCenter = vfDistanceParams.y;
	params.farDistCenterLeft = vfDistanceParams.z;
	params.farDistCenter = vfDistanceParams.w;

	params.globalProbeColor0 = vfGlobalEnvProbeParams0.xyz;
	params.globalProbeAttenuation0 = vfGlobalEnvProbeParams0.w;

	params.globalProbeColor1 = vfGlobalEnvProbeParams1.xyz;
	params.globalProbeAttenuation1 = vfGlobalEnvProbeParams1.w;

	params.timeParams = vfTimeParams;

	return params;
}

uint vfGetClipVolumeStencilID(int nStencilVal)
{
	const int BIT_STENCIL_STATIC = 0x0000007F;
	const int BIT_STENCIL_INSIDE_VOLUME = 0x00000040;// originally defined in ResolveStencilPS in DeferredShading.cfx
	return max(nStencilVal - BIT_STENCIL_INSIDE_VOLUME, 1);
}

float GetJitterInternal(in uint2 pixelCoord, in float2 temporalJitter)
{
	float2 n = pixelCoord.xy + temporalJitter.xy;
	float3 magic = {0.06711056f, 0.00583715f, 52.9829189f};
	float jitter = frac(magic.z * frac(dot(n.xy, magic.xy)));
	return jitter;
}

float GetJitteredTexcoordDepthInternal(
	in float2 screenPos,
	in float texcoordDepth,
	in float invMaxIndex,
	in float2 time)
{
	float jitter = GetJitterInternal(screenPos.xy, time.xy);
	jitter *= invMaxIndex;
	return (-1.0f * jitter) + texcoordDepth;
}

float GetVolumetricFogInscatteringSchlickPhaseFunction(float dotLE, float k, float oneMinusK2)
{
	// Schlick phase function
	const float k2 = oneMinusK2;// k2 = 1.0 - k * k
	float h = -((k * dotLE) - 1.0f);
	return (k2 / (4.0f * PI * h * h));
}

float GetVolumetricFogInscatteringHenyeyGreensteinPhaseFunction(float dotLE, float g, float oneMinusG2)
{
	// Henyey-Greenstein phase function
	const float g2 = oneMinusG2;// g2 = 1.0 - g * g
	float h = (1.0f + (g * g) - (2 * g * dotLE));
	return (g2 / (4.0f * PI * pow(h, 1.5f)));
}

float GetVolumetricFogInscatteringSideRadialPhaseFunction(float dotLE)
{
	float factor = (1.0f - abs(dotLE));
	return (factor * (1.0f / (PI * PI)));
	//return (factor * factor * (3.0f / (8.0 * PI)));
}

float3 GetVolumetricFogInscattering(in VolumetricFogLight light, bool isotoropic)
{
	float phaseFunc;
	if(isotoropic)
	{
		// isotropic scattering
		phaseFunc = 1.0f / (4.0f * PI);
	}
	else
	{
		const float dotLE = light.dotLE;

		float mainRadialLobe = GetVolumetricFogInscatteringSchlickPhaseFunction(dotLE, light.k, light.k2);

		float sideRadialLobe = GetVolumetricFogInscatteringSideRadialPhaseFunction(dotLE);

		// blend main radial lobe with side radial lobe.
		phaseFunc = lerp(mainRadialLobe, sideRadialLobe, light.radialLobe);
	}

	// calculate inscattering
	const float attenuation = phaseFunc * light.fFallOff;
	return attenuation * light.cDiffuse;
}

float3 GetVolumetricFogInscatteringSun(in VolumetricFogSunLight light)
{
	const float primaryPhaseFunc = GetVolumetricFogInscatteringSchlickPhaseFunction(light.dotLE, light.anisotropy1.x, light.anisotropy1.y);
	const float secondaryPhaseFunct = GetVolumetricFogInscatteringSchlickPhaseFunction(light.dotLE, light.anisotropy2.x, light.anisotropy2.y);
	const float primaryRadiation = primaryPhaseFunc * light.fFallOff;
	const float secondaryRadiation = secondaryPhaseFunct * light.fFallOff;
	const float3 ins0 = primaryRadiation * light.cDiffuse1;
	const float3 ins1 = secondaryRadiation * light.cDiffuse2;

	// blendMode parameter enables any blending between additive and alpha blending.
	return (ins0 * (1.0f - (light.blendFactor * light.blendMode))) + (ins1 * light.blendFactor);
}

float4 GetVolumetricFogAnalyticalColor(
	in SVolumetricFogParams params,
	in VolumetricFogSampling vfs,
	in float3 cameraToWorldPos,
	in float lengthToTarget,
	in bool fullSpan = false)
{
	float3 inscatter = float3(0.0f, 0.0f, 0.0f);

	float4 diffuseProbe0 = float4(0.0f, 0.0f, 0.0f, 0.0f);
	float4 diffuseProbe1 = float4(0.0f, 0.0f, 0.0f, 0.0f);
	if(params.globalProbeAttenuation0 > 0.0f)
	{
		diffuseProbe0 = vfs.globalEnvProbeTex0.SampleLevel( vfs.trilinearClampSState, cameraToWorldPos, 0 );
		diffuseProbe0.rgb = params.globalProbeAttenuation0 * DecodeHDRCubemap( diffuseProbe0 ) * params.globalProbeColor0.rgb;
	}
	if(params.globalProbeAttenuation1 > 0.0f)
	{
		diffuseProbe1 = vfs.globalEnvProbeTex1.SampleLevel( vfs.trilinearClampSState, cameraToWorldPos, 0 );
		const float attn = (1.0f - params.globalProbeAttenuation0) * params.globalProbeAttenuation1;
		diffuseProbe1.rgb = attn * DecodeHDRCubemap( diffuseProbe1 ) * params.globalProbeColor1.rgb;
	}

	// exponential fog density parameters
	const float d = lengthToTarget;// distance from camera to target matches ray-marching volumetric fog.
	const float L = params.heightDensityScale;
	const float M = cameraToWorldPos.z / d;

	// NOTE: volFogDensityAtViewer = log2(e) * fogDensity * exp(heightDensityScale * viewPos.z + heightOffset);
	const float volFogDensityAtViewer = params.densityAtViewer;

	const float extinctionCoefficient = params.extinctionCoefficient;
	const float rampStart = params.rampStart;
	const float rampEnd = params.rampEnd;
	const float transitionDistance = fullSpan ? 0.1f : params.farDistCenter;

	VolumetricFogSunLight vfLight;
	vfLight.dotLE = dot(params.sunDir.xyz, normalize(cameraToWorldPos));
	vfLight.fFallOff = 1.0f;
	vfLight.blendFactor = params.blendFactor;
	vfLight.blendMode = params.blendMode;
	vfLight.cDiffuse1 = params.cDiffuse1.xyz; // SunColor * FogAlbedoColor
	vfLight.cDiffuse2 = params.cDiffuse2.xyz; // SunColor * FogAlbedoColor
	vfLight.anisotropy1.x = params.anisotropy1.x;
	vfLight.anisotropy1.y = params.anisotropy1.y; // 1.0 - k * k
	vfLight.anisotropy2.x = params.anisotropy2.x;
	vfLight.anisotropy2.y = params.anisotropy2.y; // 1.0 - k * k
	inscatter += GetVolumetricFogInscatteringSun(vfLight);

	float invExtinction = rcp(extinctionCoefficient);
	inscatter *= params.scatterCoefficient * invExtinction;

	float LM = L * M;
	LM = abs(LM) < 0.000001f ? 0.000001f : LM;
	float invLM = rcp(LM);
	float cLM = -extinctionCoefficient * volFogDensityAtViewer * invLM;

	float d2 = min(transitionDistance, d);
	float minD = min(d, transitionDistance < rampStart ? rampStart : transitionDistance);
	float maxD = min(d, rampEnd);
	float sd = max(rampEnd, d2);

	float logeLM = 1.442695f * LM;// = log2(e) * LM
	float expLMd = exp2(logeLM * d);

	float4 fogColor;

	// fog transmittance from rampEnd to the end of depth
	// note: transmittance = exp(-extinction * (DensityIntegral(depth) - DensityIntegral(rampEnd)))
	// = exp(-extinction * ((GlobalDensity / (heightDensityScale * cameraToWorldPos.z / distance) * (exp(heightDensityScale * (cameraToWorldPosEnd.z + viewPos.z)) - exp(heightDensityScale * (cameraToWorldPosStart.z + viewPos.z))))));
	float T0 = saturate(exp2(cLM * (expLMd - exp2(logeLM * sd))));
	fogColor.a = T0;

	VolumetricFogLight fragLight;
	fragLight.fFallOff = 1.0f;
	fragLight.radialLobe = 0.0f;
	fragLight.dotLE = 1.0f;
	fragLight.k = 0.0f;
	fragLight.k2 = 1.0f;
	fragLight.cDiffuse = diffuseProbe0.rgb + diffuseProbe1.rgb;
	inscatter += GetVolumetricFogInscattering(fragLight, true);

	float trns = 1.0f;
	fogColor.xyz = 0.0f;

	// short ramp distance causes unstable calculation result.
	// it can be ignored because it doesn't affect final result much.
	// ramping isn't needed when start distance of analytical fog is behind ramp end.
	if(rampEnd - rampStart > 1.0f && transitionDistance < rampEnd)
	{
		LM = abs(LM) < 0.0001f ? 0.0001f : LM;
		logeLM = 1.442695f * LM;// log2(e) * LM

		float CC = rcp(LM * LM * (rampStart - rampEnd));
		float cCC = -extinctionCoefficient * volFogDensityAtViewer * CC;
		float A0 = exp2(logeLM * maxD) * (LM * (rampStart - maxD) + 1.0f);
		float A1 = exp2(logeLM * minD) * (LM * (rampStart - minD) + 1.0f);

		// integral of fog transmittance with depth based ramp from rampStart to rampEnd
		// It's needed for proper decay of volumetric fog.
		trns = saturate(exp2(cCC * (A0 - A1)));
		fogColor.a *= trns;

		// integral of inscattering with depth based ramp from rampStart to rampEnd
		float V = exp2(logeLM * rampStart);
		float IE = -exp2(cCC * (A0 - V));
		float IS = -exp2(cCC * (A1 - V));
		fogColor.xyz += inscatter * saturate(IE - IS);
	}

	// integral of inscattering from rampEnd to the end of depth
	float IE = -T0;// = -saturate(exp2(cLM * (expLMd - exp2(logeLM * sd))))
	float IS = -1;// = -exp2(extinctionCoefficient * volFogDensityAtViewer / LM * (-exp(LM * sd2) + exp(LM * sd2)));
	fogColor.xyz += trns * inscatter * (IE - IS);

	return fogColor;
}

float4 GetVolumetricFogAnalyticalColor(
	in VolumetricFogSampling vfs,
	in float3 cameraToWorldPos,
	in float lengthToTarget,
	in bool fullSpan = false)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();
	return GetVolumetricFogAnalyticalColor(params, vfs, cameraToWorldPos, lengthToTarget, fullSpan);
}

// TODO: remove after completely moving to new graphics pipeline.
float4 GetVolumetricFogAnalyticalColor(
	in float3 cameraToWorldPos,
	in float lengthToTarget,
	in bool fullSpan = false)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();

	VolumetricFogSampling vfs;
	vfs.volumetricFogTex = VolumetricFogTexture;
	vfs.globalEnvProbeTex0 = vfGlobalEnvProbeTexture0;
	vfs.globalEnvProbeTex1 = vfGlobalEnvProbeTexture1;
	vfs.trilinearClampSState = vfTrilinearClampSState;

	return GetVolumetricFogAnalyticalColor(params, vfs, cameraToWorldPos, lengthToTarget, fullSpan);
}

// TODO: remove after completely moving to new graphics pipeline.
float4 GetVolumetricFogAnalyticalColor(
	in float3 cameraToWorldPos,
	in bool fullSpan = false)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();

	VolumetricFogSampling vfs;
	vfs.volumetricFogTex = VolumetricFogTexture;
	vfs.globalEnvProbeTex0 = vfGlobalEnvProbeTexture0;
	vfs.globalEnvProbeTex1 = vfGlobalEnvProbeTexture1;
	vfs.trilinearClampSState = vfTrilinearClampSState;

	return GetVolumetricFogAnalyticalColor(params, vfs, cameraToWorldPos, length(cameraToWorldPos), fullSpan);
}

// TODO: remove after completely moving to new graphics pipeline.
float4 GetVolumetricFogAnalyticalColorByWorldPos(
	in float3 worldPos,
	in bool fullSpan = false)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();

	VolumetricFogSampling vfs;
	vfs.volumetricFogTex = VolumetricFogTexture;
	vfs.globalEnvProbeTex0 = vfGlobalEnvProbeTexture0;
	vfs.globalEnvProbeTex1 = vfGlobalEnvProbeTexture1;
	vfs.trilinearClampSState = vfTrilinearClampSState;

	float3 camToWorld = worldPos - params.viewPos.xyz;
	return GetVolumetricFogAnalyticalColor(params, vfs, camToWorld, length(camToWorld), fullSpan);
}

float4 BlendVolumetricFogWithGlobalFog(
	in SVolumetricFogParams params,
	in float4 volumetricFog,
	in float4 globalFog,
	in VolumetricFogTexcoord vtc)
{
	volumetricFog.xyz = params.fogVisibility * volumetricFog.w * globalFog.xyz + volumetricFog.xyz;
	volumetricFog.a = volumetricFog.w * globalFog.a;

	return volumetricFog;
}

float4 BlendVolumetricFogWithGlobalFog(
	in float4 volumetricFog,
	in float4 globalFog,
	in VolumetricFogTexcoord vtc)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();
	return BlendVolumetricFogWithGlobalFog(params, volumetricFog, globalFog, vtc);
}

float4 ClampFinalFogDensity(
	in SVolumetricFogParams params,
	in float4 volumetricFog)
{
	// Final Density Clamp decays final fog outcome.
	volumetricFog.xyz = volumetricFog.xyz * (1.0f - params.clampTransmittance);
	volumetricFog.a = max(volumetricFog.a, params.clampTransmittance);

	return volumetricFog;
}

float4 ClampFinalFogDensity(in float4 volumetricFog)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();
	return ClampFinalFogDensity(params, volumetricFog);
}

float GetVolumetricFogLinearDepth(
	in SVolumetricFogParams params,
	in float depthIndex)
{
#if SAMPLE_DISTRIBUTION_LINEAR
	return params.farMinusNearDist * saturate(depthIndex * params.invMaxIndexMinusOne) + params.nearDist;
#else
	const float c = VOLUMETRIC_FOG_SAMPLE_COEFFICIENT;
	return params.farMinusNearDist * pow(saturate(depthIndex * params.invMaxIndexMinusOne), c) + params.nearDist;
#endif
}

float GetVolumetricFogLinearDepth(in float depthIndex)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();
	return GetVolumetricFogLinearDepth(params, depthIndex);
}

float GetVolumetricFogDepthTexcoord(
	in SVolumetricFogParams params,
	in float linearDepth)
{
#if SAMPLE_DISTRIBUTION_LINEAR
	float d = (linearDepth - params.nearDist) * params.invFarMinusNearDist;
#else
	const float c = VOLUMETRIC_FOG_SAMPLE_COEFFICIENT;
	float d = pow(((linearDepth - params.nearDist) * params.invFarMinusNearDist), (1.0f / c));
#endif
	d = (0.5f - d) * params.invMaxIndex + d; // = (0.5f + ((maxIndex - 1.0f) * d)) * invMaxIndex;
	return d;
}

float GetVolumetricFogDepthTexcoord(in float linearDepth)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();
	return GetVolumetricFogDepthTexcoord(params, linearDepth);
}

void RectifyVolumetricFogTexcoordAndRangeApproxInternal(
	in SVolumetricFogParams params,
	inout VolumetricFogTexcoord vtc)
{
	float2 atc = abs(vtc.texcoord.xy * 2.0f - 1.0f);
	vtc.range = lerp(
		lerp(vtc.range, params.farDistCenterLeft, atc.x),
		lerp(params.farDistTopCenter, params.farDistTopLeft, atc.x),
		atc.y);
	vtc.texcoord.z = min(vtc.range, vtc.texcoord.z);
}

void RectifyVolumetricFogTexcoordAndRangeInternal(
	inout VolumetricFogTexcoord vtc,
	in float lengthToTarget)
{
	float correctionFactor = (vtc.linearDepth / lengthToTarget);
	vtc.range *= correctionFactor;
	vtc.texcoord.z = min(vtc.range, vtc.texcoord.z);
}

VolumetricFogTexcoord GetVolumetricFogTexcoordParamByScreenProj(
	in SVolumetricFogParams params,
	in float4 screenProj,
	in bool rectifiedRangeApprox = true,
	in float lengthToTarget = 10000000.0f)
{
	VolumetricFogTexcoord vtc;
	vtc.texcoord.xy = screenProj.xy / screenProj.w;
	vtc.linearDepth = screenProj.w;
	vtc.texcoord.z = vtc.linearDepth;
	vtc.range = params.farDistCenter;

	if(rectifiedRangeApprox)
	{
		RectifyVolumetricFogTexcoordAndRangeApproxInternal(params, vtc);
	}
	else
	{
		RectifyVolumetricFogTexcoordAndRangeInternal(vtc, lengthToTarget);
	}

	vtc.texcoord.z = GetVolumetricFogDepthTexcoord(params, vtc.texcoord.z);

	return vtc;
}

VolumetricFogTexcoord GetVolumetricFogTexcoordParamByScreenProj(
	in float4 screenProj,
	in bool rectifiedRangeApprox = true,
	in float lengthToTarget = 10000000.0f)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();
	return GetVolumetricFogTexcoordParamByScreenProj(params, screenProj, rectifiedRangeApprox, lengthToTarget);
}

VolumetricFogTexcoord GetVolumetricFogTexcoordParamByScreenPos(
	in SVolumetricFogParams params,
	in float4 screenPos,
	in bool rectifiedRangeApprox = true,
	in float lengthToTarget = 10000000.0f)
{
	VolumetricFogTexcoord vtc;
	vtc.texcoord.xy = screenPos.xy * CV_ScreenSize.zw * 2.0f;
	vtc.linearDepth = screenPos.w;
	vtc.texcoord.z = vtc.linearDepth;
	vtc.range = params.farDistCenter;

	if(rectifiedRangeApprox)
	{
		RectifyVolumetricFogTexcoordAndRangeApproxInternal(params, vtc);
	}
	else
	{
		RectifyVolumetricFogTexcoordAndRangeInternal(vtc, lengthToTarget);
	}

	vtc.texcoord.z = GetVolumetricFogDepthTexcoord(params, vtc.texcoord.z);

	return vtc;
}

VolumetricFogTexcoord GetVolumetricFogTexcoordParamByScreenPos(
	in float4 screenPos,
	in bool rectifiedRangeApprox = true,
	in float lengthToTarget = 10000000.0f)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();
	return GetVolumetricFogTexcoordParamByScreenPos(params, screenPos, rectifiedRangeApprox, lengthToTarget);
}

VolumetricFogTexcoord GetVolumetricFogTexcoordParamByScreenTexcoordAndDepth(
	in SVolumetricFogParams params,
	in float2 screenTC,
	in float linearDepth,
	in bool rectifiedRangeApprox = true,
	in float lengthToTarget = 10000000.0f)
{
	VolumetricFogTexcoord vtc;
	vtc.texcoord.xy = screenTC;
	vtc.linearDepth = linearDepth;
	vtc.texcoord.z = vtc.linearDepth;
	vtc.range = params.farDistCenter;

	if(rectifiedRangeApprox)
	{
		RectifyVolumetricFogTexcoordAndRangeApproxInternal(params, vtc);
	}
	else
	{
		RectifyVolumetricFogTexcoordAndRangeInternal(vtc, lengthToTarget);
	}

	vtc.texcoord.z = GetVolumetricFogDepthTexcoord(params, vtc.texcoord.z);

	return vtc;
}

VolumetricFogTexcoord GetVolumetricFogTexcoordParamByScreenTexcoordAndDepth(
	in float2 screenTC,
	in float linearDepth,
	in bool rectifiedRangeApprox = true,
	in float lengthToTarget = 10000000.0f)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();
	return GetVolumetricFogTexcoordParamByScreenTexcoordAndDepth(params, screenTC, linearDepth, rectifiedRangeApprox, lengthToTarget);
}

float4 GetVolumetricFogValue(
	in VolumetricFogSampling vfs,
	in VolumetricFogTexcoord vtc)
{
	float3 tc = vtc.texcoord.xyz;
	float4 v = vfs.volumetricFogTex.SampleLevel(vfs.trilinearClampSState, tc.xyz, 0.0f);
	return v;
}

// TODO: remove after completely moving to new graphics pipeline.
float4 GetVolumetricFogValue(in VolumetricFogTexcoord vtc)
{
	VolumetricFogSampling vfs;
	vfs.volumetricFogTex = VolumetricFogTexture;
	vfs.trilinearClampSState = vfTrilinearClampSState;

	return GetVolumetricFogValue(vfs, vtc);
}

float4 GetVolumetricFogValueJittered(
	in SVolumetricFogParams params,
	in VolumetricFogSampling vfs,
	in VolumetricFogTexcoord vtc)
{
	float3 tc = vtc.texcoord.xyz;
	tc.z = GetJitteredTexcoordDepthInternal(tc.xy * params.screenSize.xy, tc.z, params.invMaxIndex, params.timeParams.xw);
	float4 v = vfs.volumetricFogTex.SampleLevel(vfs.trilinearClampSState, tc.xyz, 0.0f);
	return v;
}

float4 GetVolumetricFogValueJittered(
	in VolumetricFogSampling vfs,
	in VolumetricFogTexcoord vtc)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();

	float3 tc = vtc.texcoord.xyz;
	tc.z = GetJitteredTexcoordDepthInternal(tc.xy * params.screenSize.xy, tc.z, params.invMaxIndex, params.timeParams.xw);
	float4 v = vfs.volumetricFogTex.SampleLevel(vfs.trilinearClampSState, tc.xyz, 0.0f);
	return v;
}

// TODO: remove after completely moving to new graphics pipeline.
float4 GetVolumetricFogValueJittered(in VolumetricFogTexcoord vtc)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();

	VolumetricFogSampling vfs;
	vfs.volumetricFogTex = VolumetricFogTexture;
	vfs.trilinearClampSState = vfTrilinearClampSState;

	return GetVolumetricFogValueJittered(params, vfs, vtc);
}

void ApplyVolumetricFog(
	in SVolumetricFogParams params,
	in float4 volumetricFog,
	in float4 globalFog,
	in VolumetricFogTexcoord vtc,
	inout float3 color)
{
	volumetricFog = BlendVolumetricFogWithGlobalFog(params, volumetricFog, globalFog, vtc);

	volumetricFog = ClampFinalFogDensity(params, volumetricFog);

	color.xyz = (color.xyz * volumetricFog.w) + volumetricFog.xyz;
}

void ApplyVolumetricFog(
	in float4 volumetricFog,
	in float4 globalFog,
	in VolumetricFogTexcoord vtc,
	inout float3 color)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();
	ApplyVolumetricFog(params, volumetricFog, globalFog, vtc, color);
}

void ApplyVolumetricFogTransmittance(
	in SVolumetricFogParams params,
	in float4 volumetricFog,
	in float4 globalFog,
	in VolumetricFogTexcoord vtc,
	inout float3 color)
{
	volumetricFog = BlendVolumetricFogWithGlobalFog(params, volumetricFog, globalFog, vtc);

	volumetricFog = ClampFinalFogDensity(params, volumetricFog);

	color.xyz = color.xyz * volumetricFog.w;
}

void ApplyVolumetricFogTransmittance(
	in float4 volumetricFog,
	in float4 globalFog,
	in VolumetricFogTexcoord vtc,
	inout float3 color)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();
	ApplyVolumetricFogTransmittance(params, volumetricFog, globalFog, vtc, color);
}

void ApplyVolumetricFogAnalytical(
	in SVolumetricFogParams params,
	in float4 volumetricFogAnalytical,
	inout float3 color)
{
	volumetricFogAnalytical.xyz *= params.fogVisibility;

	volumetricFogAnalytical = ClampFinalFogDensity(params, volumetricFogAnalytical);

	color.xyz = (color.xyz * volumetricFogAnalytical.w) + volumetricFogAnalytical.xyz;
}

void ApplyVolumetricFogAnalytical(
	in float4 volumetricFogAnalytical,
	inout float3 color)
{
	SVolumetricFogParams params = vfGetVolumetricFogParamsInternal();
	ApplyVolumetricFogAnalytical(params, volumetricFogAnalytical, color);
}
