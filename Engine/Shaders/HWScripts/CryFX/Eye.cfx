// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "Common.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
				"Public;"           
				"SupportsAttrInstancing;"
			#if %VERTCOLORS
        "VertexColors;"
			#endif
			#if %EYE_AO_OVERLAY
				"EyeOverlay;"
			#elif %EYE_SPECULAR_OVERLAY
				"ForceDrawFirst;"  // Draw before other objects in transparent list (important for eyelashes)
			#else
				"ForceZpass;"
				"SupportsDeferredShading;"
			#endif
				"ShaderDrawType = Light;"
				"ShaderType = General;"
>;

////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Custom shading pass structure /////////////////////////////////////

struct CustomForwardShadingAttribs
{
	float3x3  matTangentToWS;
	float2    baseTC;
	float4    screenProj;
	float3    corneaNormal;
	float3    concavityNormalTS;
	float3    vertexNormal;
	float     irisMask;
};


#include "ShadeLib.cfi"
#include "ForwardShading.cfi"
#include "VertexLib.cfi"

//////////////////////////////// Samplers ////////////////

Texture2D Fwd_EyeOverlayTex : register(t41);

ENVIRONMENTCUBEMAP
DISSOLVE_NOISE_MAP

Texture2D corneaBumpTex : register(t9)
<
  UIName = "Cornea Bump Map";
  UIDescription = "Bump map for the cornea";
> = TM_Custom;

sampler2D sceneDiffuseMapSampler = sampler_state
{
  Texture = $SceneDiffuse;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = POINT;
  AddressU = Clamp;
  AddressV = Clamp;
};

Texture2DArray<float4> sunShadowMask : register(t38) = TS_ShadowMask;

// Tweakables /////////////////

#if !%EYE_AO_OVERLAY && !%EYE_SPECULAR_OVERLAY
	half IrisDepth
	< 
		register = REG_PM_PARAM_0.x;
		string UIHelp = "Set iris depth";                     
		string UIName = "Iris Depth";  
  
		string UIWidget = "slider";
		float UIMin = 0.0;
		float UIMax = 0.1;
		float UIStep = 0.001;
	> = 0.005;

	half ScleraSSS
	<
		register = REG_PM_PARAM_0.y;
		string UIHelp = "Change the subsurface scattering amount for the sclera";
		string UIName = "Sclera SSS";
		string UIWidget = "slider";
		float UIMin = 0.0;
		float UIMax = 1.0;
		float UIStep = 0.005;
	> = 0.4;

	half IrisSSS
	<
		register = REG_PM_PARAM_0.z;
		string UIHelp = "Change the subsurface scattering amount for the iris";
		string UIName = "Iris SSS";
		string UIWidget = "slider";
		float UIMin = 0.0;
		float UIMax = 2.0;
		float UIStep = 0.005;
	> = 0.6;

	half IrisShadowing
	<
		register = REG_PM_PARAM_0.w;
		string UIHelp = "Strength of shadowing on small details in the iris";
		string UIName = "Iris Shadowing";
		string UIWidget = "slider";
		float UIMin = 0.0;
		float UIMax = 15.0;
		float UIStep = 0.1;
	> = 5.0;
	
	half4 IrisColor
	<
	  register = REG_PM_PARAM_1;
	  string UIHelp = "Alter iris color";                   
	  string UIName = "Iris Color";    

	  string UIWidget = "color";
	> = {0.5, 0.5, 0.5, 1.0};
		
	half CorneaRefraction
	<
		register = REG_PM_PARAM_2.x;
		string UIHelp = "Change the strength of refraction caused by the cornea";
		string UIName = "Cornea Refraction";
		string UIWidget = "slider";
		float UIMin = 0.0;
		float UIMax = 1.0;
		float UIStep = 0.005;
	> = 0.01;
		
	half CorneaSmoothness
	<
		register = REG_PM_PARAM_2.y;
		string UIHelp = "Change the smoothness/gloss of the sclera";
		string UIName = "Cornea Smoothness";
		string UIWidget = "slider";
		float UIMin = 0.0;
		float UIMax = 1.0;
		float UIStep = 0.005;
	> = 1;
#elif %EYE_AO_OVERLAY
	half DiffOccStrength
	< 
	  register = REG_PM_PARAM_2.z;
	  string UIHelp = "Set strength of diffuse occlusion";                     
	  string UIName = "Diffuse occlusion strength";  
  
	  string UIWidget = "slider";
	  float UIMin = 0.0;
	  float UIMax = 1.0;
	  float UIStep = 0.001;
	> = 1.0;

	half SpecOccStrength
	< 
	  register = REG_PM_PARAM_2.w;
	  string UIHelp = "Set strength of specular occlusion";                     
	  string UIName = "Specular occlusion strength";  
  
	  string UIWidget = "slider";
	  float UIMin = 0.0;
	  float UIMax = 1.0;
	  float UIStep = 0.001;
	> = 1.0;
#endif

#if %EYE_SPECULAR_OVERLAY
	half DepthBiasScale
	< 
	  register = REG_PM_PARAM_3.x;
	  string UIHelp = "Scale of depth bias to avoid clipping.";                     
	  string UIName = "Depth bias scale";  
  
	  string UIWidget = "slider";
	  float UIMin = 0.0;
	  float UIMax = 1.0;
	  float UIStep = 0.001;
	> = 0.1;
#endif

vert2FragGeneral EyeVS(app2vertGeneral IN)
{
  vert2FragGeneral OUT = (vert2FragGeneral)0;
  
  streamPos vertPassPos = (streamPos)0;
  vs_shared_output( IN, OUT, vertPassPos, false );

#if %EYE_SPECULAR_OVERLAY
  // pull overlay z in front
  OUT.HPosition = OUT.HPosition * CV_DecalZFightingRemedy.x - CV_DecalZFightingRemedy.wwyw * (1.h - DepthBiasScale) / OUT.HPosition.w;
#endif

  return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Pixel shader
////////////////////////////////////////////////////////////////////////////////////////////////////

float GetSunShadowMask(float4 screenProj)
{
	float maskValue = 0;
	
#if !%_RT_SECONDARY_VIEW	
	float2 tcScreen = screenProj.xy / screenProj.w;
	int4 vPixCoord = int4(tcScreen * CV_ScreenSize.xy, 0, 0);
	maskValue = sunShadowMask.Load(vPixCoord).r;
#endif
	
	return maskValue;
}

float2 ComputeEyeParallax(in float h0, in float2 baseTC, in float lod, in float3 viewDirNrm, in float displacement)
{
	static const int numSteps = 8;
	const float step = 1.0h / numSteps;

	float2 delta = float2(viewDirNrm.x, viewDirNrm.y) * displacement / (-viewDirNrm.z * numSteps); // / max(-viewDirNrm.z * numSteps, 0.1)
	
	float height = 1.0h - step;
	float4 offset = float4(baseTC + delta, 0, lod);
	float h1 = GetHeightTexLod(heightTex, offset);

	for (int i=0; i<numSteps; i++)
	{
		[flatten]
		if (h1 >= height)
			break;

		h0 = h1;

		height -= step;
		offset.xy += delta;

		h1 = GetHeightTexLod(heightTex, offset);
	}

	float4 offsetBest = offset;
	float error = 1.0;

	float t1 = height;
	float t0 = t1 + step;

	float delta1 = t1 - h1;
	float delta0 = t0 - h0;

	float4 intersect = float4(delta * numSteps, delta * numSteps + baseTC);

	for (int i=0; i<10; i++)
	{
		[flatten]
		if (abs(error) <= 0.01)
			break;

		float denom = delta1 - delta0;
		float t = (t0 * delta1 - t1 * delta0) / denom;
		offsetBest.xy = -t * intersect.xy + intersect.zw;

		float h2 = GetHeightTexLod(heightTex, offsetBest);

		error = t - h2;
		if (error < 0)
		{
			delta1 = error;
			t1 = t;
		}
		else
		{
			delta0 = error;
			t0 = t;
		}
	}
	return offsetBest.xy - baseTC.xy;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void Callback_ShadingDirect(in ForwardShadingAttribs attribs, in ForwardLightParams light, out float3 diffuseAcc, out float3 specularAcc)
{
	half3 cDiffuse = 0;

#if %EYE_SPECULAR_OVERLAY
	// Specular Term
	half3 cSpecular = BlinnBRDF(attribs.normal, -normalize(attribs.worldPos), light.lightVec, attribs.smoothness) * attribs.reflectance.xyz;
	cSpecular *= saturate( dot(attribs.normal, light.lightVec) );
#else
	
	half fNdotLVertex = dot(light.lightVec, attribs.custom.vertexNormal);
	half fNdotLCornea = dot(light.lightVec, attribs.custom.corneaNormal);
	
	// Energy conserving wrap lighting for Iris SSS
	half cIrisShading = pow( saturate( (dot(attribs.normal, light.lightVec) + IrisSSS) / (1 + IrisSSS) ), 2 ) * (2 + 1) / (2 * (1 + IrisSSS));
	
	// Apply simple light scattering effect
	const float3 vLightTS = mul(attribs.custom.matTangentToWS, light.lightVec);
	half scattering = 0.5 + saturate(pow(dot(vLightTS, attribs.custom.concavityNormalTS), 8)) * 2;
	cIrisShading *= lerp( 1, scattering, pow(saturate(fNdotLVertex + 0.2), 0.2) );
	
	// Energy conserving wrap lighting for Sclera SSS
	half scleraWrapDenom = 1 + ScleraSSS;
	half cScleraShading = saturate((fNdotLVertex + ScleraSSS) / (scleraWrapDenom * scleraWrapDenom));

	// Blend between sclera and iris shading and apply light color and intensity
	cDiffuse.rgb = lerp(cScleraShading, cIrisShading, attribs.custom.irisMask);

	// Specular term (use Blinn BRDF with moderate max exponent to avoid excessive aliasing of tiny highlights)
	half3 cSpecular = BlinnBRDF(attribs.custom.corneaNormal, -normalize(attribs.worldPos), light.lightVec, attribs.smoothness) * attribs.reflectance;
	cSpecular *= fNdotLCornea;

	// Iris self-shadowing
	if (light.type == LT_DIRECTIONAL)
	{
		const float2 lightDelta = float2(vLightTS.x, vLightTS.y) * IrisDepth;
		const float2 uv = attribs.custom.baseTC.xy;
		
		const float h0 = GetHeightTex(heightTex, half4(uv, 0, 0));
		float h = max(h0, GetHeightTex(heightTex, half4(uv + 1.000 * lightDelta, 0, 0)));
		h = max(h, GetHeightTex(heightTex, half4(uv + 0.666 * lightDelta, 0, 0)));
		h = max(h, GetHeightTex(heightTex, half4(uv + 0.333 * lightDelta, 0, 0)));
		cDiffuse.rgb *= 1.0h - saturate((h - h0) * IrisShadowing) * attribs.custom.irisMask;
	}
#endif

	diffuseAcc = cDiffuse.xyz * light.illuminance;
	specularAcc = cSpecular.xyz * light.illuminance;
}

#include "TiledShading.cfi"

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

pixout EyePS(vert2FragGeneral IN)
{
  pixout OUT = (pixout) 0;  
    
#if %EYE_AO_OVERLAY
  half4 cDiffuseMap = GetDiffuseTex(diffuseTex, IN.baseTC.xy);
  half4 cSpecularMap = GetSpecularTex(specularTex, IN.baseTC.xy);

  half fDiffOcc = cDiffuseMap.w * DiffOccStrength;
  half fSpecOcc = lerp(1.h, cSpecularMap.w, SpecOccStrength);

  OUT.Color = half4(fDiffOcc, fSpecOcc, 0, 0);
#else
	ForwardShadingAttribs attribs = (ForwardShadingAttribs) 0;
	
	float3 vNormal = cross(IN.vTangent.xyz, IN.vBinormal.xyz) * IN.vTangent.w;
	
	attribs.screenUV = IN.screenProj.xy / IN.screenProj.w;
	attribs.worldPos = IN.vView.xyz;
	
#if %EYE_SPECULAR_OVERLAY
	attribs.albedo = GetDiffuseTex(diffuseTex, IN.baseTC.xy).rgb;
	attribs.reflectance = MatSpecColor.xyz;
	attribs.normal = normalize(vNormal.xyz);  // Use vertex normal
	attribs.normalSpecProbe = attribs.normal;
	attribs.smoothness =  MatSpecColor.w;
#else
	float3x3 matTangentToWS = float3x3(IN.vTangent.xyz, IN.vBinormal.xyz, vNormal.xyz);
	attribs.custom.matTangentToWS = matTangentToWS;
	attribs.custom.vertexNormal = vNormal;
	
	attribs.reflectance = MatSpecColor.xyz;
	attribs.smoothness = MatSpecColor.w * GetSmoothnessTex(smoothnessTex, IN.baseTC.xy);
	half irisMask = GetDiffuseTex(diffuseTex, IN.baseTC.xy).w;
	attribs.smoothness = lerp(attribs.smoothness, CorneaSmoothness, irisMask);
	
	float3 viewVecTS = mul(matTangentToWS, -normalize(IN.vView.xyz)).xyz;
	float irisDepth = GetHeightTex(heightTex, IN.baseTC.xy).x;
	float2 normalTexRes = 512;
	normalsTex.GetDimensions(normalTexRes.x, normalTexRes.y);

	const float lod = ComputeTextureLOD(IN.baseTC.xy, normalTexRes.xy);
	float2 texOffset = ComputeEyeParallax(irisDepth, IN.baseTC, lod, viewVecTS, IrisDepth * 10.0f);
	
	half3 corneaNormalMap = GetNormalMap(corneaBumpTex, IN.baseTC.xy);
	attribs.custom.corneaNormal = normalize(mul(corneaNormalMap, matTangentToWS));
	attribs.normalSpecProbe = attribs.custom.corneaNormal;
	
	irisMask = GetDiffuseTex(diffuseTex, IN.baseTC.xy + texOffset).w;
	texOffset += refract(viewVecTS, corneaNormalMap, 0.75f) * CorneaRefraction * irisMask;
	attribs.custom.baseTC = IN.baseTC.xy + texOffset;

	half4 diffuseMap = GetDiffuseTex(diffuseTex, IN.baseTC.xy + texOffset);
	attribs.custom.irisMask = diffuseMap.w;
	// Apply iris color
	attribs.albedo = lerp(saturate(2 * IrisColor * diffuseMap.xyz), diffuseMap.xyz, pow(1.h - diffuseMap.w, 8.h)) * MatDifColor.xyz;
	
	half3 normalMap = GetNormalMap(normalsTex, IN.baseTC.xy + texOffset).xyz;
	attribs.normal = normalize(mul(normalMap, matTangentToWS));
	
	half3 vConcavityNormal;
	vConcavityNormal.xy = -GetXYNormalMap(corneaBumpTex, IN.baseTC.xy + texOffset) * 4;
	vConcavityNormal.z = sqrt(saturate(1.h + dot(vConcavityNormal.xy, -vConcavityNormal.xy)));
	attribs.custom.concavityNormalTS = normalize(vConcavityNormal);
#endif
	
	half3 diffuseAcc = 0;
	half3 specularAcc = 0;
	
	// Handle direct lighting from sun
	{
		ForwardLightParams lightParams;
		lightParams.type = LT_DIRECTIONAL;
		lightParams.lightVec = CV_SunLightDir.xyz;
		lightParams.illuminance = CV_SunColor.xyz * (1 - GetSunShadowMask(IN.screenProj).r);
		
		Callback_ShadingDirect(attribs, lightParams, diffuseAcc, specularAcc);
  }

#if %_RT_TILED_SHADING	
	#if !%EYE_SPECULAR_OVERLAY
		const bool applyProbes = true;
	#else
		const bool applyProbes = false;
	#endif
	
	#if %_RT_PER_INSTANCE_CB_TEMP	
		TiledForwardShading(attribs, diffuseAcc, specularAcc, ssFwdBilinearWrap, ssFwdComparison, false, applyProbes, true);
	#else
		TiledForwardShading(attribs, diffuseAcc, specularAcc, TrilinearClampSamplerState, SampStateComp, false, applyProbes, true);
	#endif
#endif

	half4 cFinal = half4(0, 0, 0, 1);

#if %EYE_SPECULAR_OVERLAY
	cFinal.rgb = specularAcc * attribs.albedo.x * IN.Color.x;
#else
	half2 occlusionMap = half2(0, 1);
	#if !%_RT_SECONDARY_VIEW && %_RT_PER_INSTANCE_CB_TEMP
		occlusionMap = GetTexture2DProj(Fwd_EyeOverlayTex, ssFwdBilinearWrap, IN.screenProj).xy;
	#elif !%_RT_SECONDARY_VIEW
		occlusionMap = GetTexture2DProj(sceneDiffuseMapSampler, IN.screenProj).xy;
	#endif
	
	half3 diffuseOccl = 1 - occlusionMap.xxx * half3(0.85, 0.95, 1);
	half3 cDiffuse = diffuseAcc * diffuseOccl * attribs.albedo;
	half3 cSpecular = specularAcc * occlusionMap.y; 
	cFinal.rgb = cDiffuse + cSpecular;
#endif
	
#if !%_RT_PER_INSTANCE_CB_TEMP
	// Fog
	#if %_RT_FOG && !%_RT_DECAL_TEXGEN_2D
		#if %_RT_VOLUMETRIC_FOG
			VolumetricFogTexcoord vtc = GetVolumetricFogTexcoordParamByScreenProj(IN.screenProj);
			float4 vf = GetVolumetricFogValue(vtc);
			half4 globalFogColor = IN.AvgFogVolumeContrib.xyzw;
			ApplyVolumetricFog(vf, globalFogColor, vtc, cFinal.rgb);
		#else
			ComputeGlobalFogPS(cFinal.rgb, IN.vView.w);
			cFinal.rgb = IN.AvgFogVolumeContrib.xyz + cFinal.rgb * IN.AvgFogVolumeContrib.w;
		#endif
	#endif
#else
	const float3 worldPos = IN.vView.xyz + GetWorldViewPos();
	Fwd_ApplyFog(worldPos, IN.vView.xyz, IN.WPos, cFinal.rgb);
#endif

  OUT.Color = cFinal;
#endif
 
  return OUT; 
}

//////////////////////////////// technique ////////////////

technique General
<
#if !%EYE_SPECULAR_OVERLAY && !%EYE_AO_OVERLAY  // No special passes for overlays
	string Script = 
		"TechniqueZ=ZPass;"
		"TechniqueMotionBlur=MotionBlurPass;"
		"TechniqueCustomRender=CustomRenderPass;"
		"TechniqueShadowGen=ShadowGen;"         
		"TechniqueDebug=DebugPass;"
#endif
>
{
	pass p0
	{
	VertexShader = EyeVS() EyeVS;
	PixelShader = EyePS() EyePS;  

	ZEnable = true;
#if %EYE_SPECULAR_OVERLAY || %EYE_AO_OVERLAY
	ZWriteEnable = false;
	#if %EYE_SPECULAR_OVERLAY
		SrcBlend = ONE;
		DestBlend = ONE;
		AlphaBlendEnable = true;
	#endif
#else	
	ZWriteEnable = true; // this is explicit disabled when zpass enabled 
	CullMode = Back;
	ZFunc = LEqual;
#endif
	}    
}


//////////////////////////////// Common techniques ////////////////

#include "CommonZPass.cfi"
#include "CommonMotionBlurPass.cfi"
#include "ShadowCommon.cfi"
#include "CommonShadowGenPass.cfi"
#include "CommonDebugPass.cfi"
#include "CommonViewsPass.cfi"