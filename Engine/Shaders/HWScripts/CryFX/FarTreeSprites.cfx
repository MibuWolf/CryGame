// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.


// Notes for refactoring:
// - Output geometry normal as well to sprite atlas, remove 2_sprite option (should be default); try pack 16 bit per each to avoid extra memory

#include "Common.cfi"
#include "ShadeLib.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script = "ShaderDrawType = Custom;"
                  "ShaderType = General;"
                  "PreprType = GenerateSprites;"
									"ForceDrawLast;"
									"SupportsFullDeferredShading;"
                  "ForceZpass;"
>;

/// Un-Tweakables //////////////////////
float4 SpritesOutdoorAOVertInfo;
float4 TexAtlasSize;

float4 BaseTCMatrix    : PB_TerrainBaseMatrix;

sampler2D BaseSampler  : register(s0);		// linear

sampler2D dissolveNoiseSampler : register(s2);

sampler2D TerrainInfoSampler0  : register(s3)
{
  sRGBLookup = true;
};

/////////////////////////////

struct a2v
{
  float4 Position : POSITION; //in object space
  float2 baseTC   : TEXCOORD0;
  IN_C0
};

struct v2f
{
  float4 Position  : POSITION;  //in projection space

	float4 baseTC    : TEXCOORD0_centroid;

  float4 OutdoorAOInfo   : TEXCOORD1;

  float4 shadowTC  : TEXCOORD2;
#if %_RT_FOG
  float4 localFogColor : TEXCOORD3;
#endif
  OUT_C0
};

struct v2f_z
{
#if %_PS
  float4 WPos      : SV_Position;
#else
  float4 HPosition : SV_Position;  //in projection space  
#endif

  float4 baseTC    : TEXCOORD0_centroid;
  float4 ZInfo     : TEXCOORD1; // w is uzed during impostors gen
};

///////////////// vertex shader //////////////////

v2f_z SpriteVS_Z(a2v IN)
{
  v2f_z OUT = (v2f_z)0; 

  // Position in screen space.
  float4 vPos = IN.Position;
  OUT.Position = mul(g_VS_ViewProjMatr, vPos);

  float4 inColor = GetInputColor(IN.Color);
  OUT.baseTC.xy = IN.baseTC.xy;
  OUT.baseTC.z = inColor.b; // pass custom alpha ref
  OUT.baseTC.w = inColor.r*2.0f - 1.0f; // dissolve multiply

  OUT.ZInfo.w = OUT.Position.w * g_VS_NearFarClipDist.w;
	
	OUT.ZInfo.xyz = ( vfViewPos - vPos ); // aproximate normal + reuse ZInfo unused xyz interpolator components
	
  return OUT;
}

v2f SpriteVS(a2v IN)
{
  v2f OUT = (v2f)0; 

  // Position in screen space.
  float4 vPos = IN.Position;
  OUT.Position = mul(g_VS_ViewProjMatr, vPos);
  
  OUT.baseTC.xy = IN.baseTC.xy;

  OUT.Color = GetInputColor(IN.Color);


  OUT.baseTC.zw = float2(IN.baseTC.x + (OUT.Color.r<0.5 ? TexAtlasSize.w*32 : TexAtlasSize.w*64), IN.baseTC.y); // use higher lod    
  
#if %_RT_FOG
#if !%_RT_VOLUMETRIC_FOG
	OUT.localFogColor = GetVolumetricFogColor( vPos );
#else
	OUT.localFogColor = GetVolumetricFogAnalyticalColorByWorldPos( vPos );
#endif
#endif

  int nQuality = GetShaderQuality();
  //if( nQuality > QUALITY_LOW )
  {
	  OUT.OutdoorAOInfo.x = SpritesOutdoorAOVertInfo.z*vPos.y+SpritesOutdoorAOVertInfo.x;
	  OUT.OutdoorAOInfo.y = SpritesOutdoorAOVertInfo.z*vPos.x+SpritesOutdoorAOVertInfo.y;
	  OUT.OutdoorAOInfo.z = vPos.z-SpritesOutdoorAOVertInfo.w; // vertex z relative to terrain sector min z
  }

  OUT.shadowTC = HPosToScreenTC(OUT.Position);

  return OUT;
}


half4 tex2DBilinearSprites( sampler2D MapSampler, float2 texTC, out half fSunContribution )
{
  const float4 MapParams = TexAtlasSize;

	// MapParams.xy = texture size
	// MapParams.zw = texture texel size

  float fAdjust = 255.0f/256.0f;

  if(0)//true)
  {
	float2 f = frac( texTC.xy * MapParams.xy );

	half4 t00 = tex2D( MapSampler, texTC );
	half4 t10 = tex2D( MapSampler, texTC + MapParams.zw * float2( 1.0, 0.0 ) );
	half4 t01 = tex2D( MapSampler, texTC + MapParams.zw * float2( 0.0, 1.0 ) );
	half4 t11 = tex2D( MapSampler, texTC + MapParams.zw * float2( 1.0, 1.0 ) );

	half4 T = half4(t00.a, t10.a, t01.a, t11.a) * fAdjust;

	half4 S =  frac(T * 2.0h.xxxx);

	half4 tA = lerp( t00, t10, f.x );
    	half SA = lerp( S.x, S.y, f.x );

	half4 tB = lerp( t01, t11, f.x );
	half SB = lerp( S.z, S.w, f.x );

   	fSunContribution = lerp( SA, SB, f.y );

	return lerp( tA, tB, f.y );
  }
  else
  {
    	half4 cSprite = tex2D( MapSampler, texTC);
    
    	fSunContribution = cSprite.a;   
      
	return cSprite;
  }

}


float tex2DBilinearSpritesZ( sampler2D MapSampler, float2 texTC)
{
  float fAlpha; 
  const float4 MapParams = TexAtlasSize;

	// MapParams.xy = texture size
	// MapParams.zw = texture texel size

  if(0)//true)
  {
	float2 f = frac( texTC.xy * MapParams.xy );

	half4 t00 = tex2D( MapSampler, texTC );
	half4 t10 = tex2D( MapSampler, texTC + MapParams.zw * float2( 1.0, 0.0 ) );
	half4 t01 = tex2D( MapSampler, texTC + MapParams.zw * float2( 0.0, 1.0 ) );
	half4 t11 = tex2D( MapSampler, texTC + MapParams.zw * float2( 1.0, 1.0 ) );

	half4 T = half4(t00.a, t10.a, t01.a, t11.a);

	half4 vAlpha = step(128.0h/255.0h,T);
   	half2 vAlpha2 = lerp( vAlpha.xz, vAlpha.yw, f.x );

	fAlpha = lerp( vAlpha2.x, vAlpha2.y, f.y );

	return fAlpha;
  }
  else
  {
	half4 cSprite = tex2D( MapSampler, texTC);
    
      	fAlpha = cSprite.a;
      	return fAlpha;
  }
}

///////////////// pixel shader //////////////////

half4 GetTerrainColor(sampler2D s, float2 terrainTC, half fTerrNdotL, half shadowOccl, half3 Ambient)
{
	half4 terrainInfo = GetTerrainTex(s, terrainTC);
	terrainInfo.xyz = terrainInfo.xyz * (g_PS_SunColor.xyz*fTerrNdotL*(1-shadowOccl)*(terrainInfo.a*0.6666h+0.3333h) + Ambient); 
	return terrainInfo;
}

pixout SpritePS(v2f IN)
{
  pixout OUT;

  int nQuality = GetShaderQuality();
  
	half SpriteAlphaRef = 0.1h;
	
	#if %_RT_NOZPASS
		SpriteAlphaRef = IN.Color.b;
	#endif
   
  // load the base
  half fSunContribution;
  half4 baseColor = tex2DBilinearSprites(BaseSampler, IN.baseTC.xy, fSunContribution); 

  half4 cDiffuseAccRT = DecodeLightBuffer( GetSceneTexProj( sceneDiffuseAccTex, IN.shadowTC.xyzw) ); 

	half shadowOccl = 1.0h;
	half3 vAORatios = 1.h;

   // Debug output
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   DebugOutput(OUT.Color, IN.baseTC);
   return OUT;
 #endif

	half3 vSun = fSunContribution * g_PS_SunColor;
	vSun *= (1-shadowOccl);

  half3 vAmb = cDiffuseAccRT.xyz;

	half3 vFinalDif = baseColor.rgb * (vAmb + vSun);

#ifdef %_RT_BLEND_WITH_TERRAIN_COLOR
	half4 terrainColor = GetTerrainColor(TerrainInfoSampler0, IN.OutdoorAOInfo.xy, IN.Color.g, shadowOccl, vAmb);
	vFinalDif.xyz = lerp(terrainColor.xyz, vFinalDif.xyz, 0.7f);
#endif

#if %_RT_FOG
#if !%_RT_VOLUMETRIC_FOG
  OUT.Color.xyz = lerp(IN.localFogColor.xyz, vFinalDif.xyz, IN.localFogColor.w);
#else
	VolumetricFogTexcoord vtc = GetVolumetricFogTexcoordParamByScreenPos(IN.Position);
	float4 vf = GetVolumetricFogValue(vtc);
	ApplyVolumetricFog(vf, IN.localFogColor, vtc, vFinalDif.rgb);
#endif
#else  
  OUT.Color.xyz = vFinalDif.xyz;
#endif

  OUT.Color.xyz *= PS_HDR_RANGE_ADAPT_MAX;

  OUT.Color.w = 1.0f;

  HDROutput(OUT, OUT.Color, 1);

  return OUT;
}

// 2 textures sprites version (Sun and Amb)
pixout Sprite2PS(v2f IN)
{
  pixout OUT;
  int nQuality = GetShaderQuality();
  
  half SpriteAlphaRef = 0.1;
  
  #if %_RT_NOZPASS
    SpriteAlphaRef = IN.Color.b;
  #endif
   
  // load the base
  half4 vSun = tex2D(BaseSampler, IN.baseTC.xy);
  half4 vAmb = tex2D(BaseSampler, IN.baseTC.zw);
  half fAlpha = vSun.a;
  //clip(fAlpha - .5f);

  //OUT.Color.xyz = vAmb.xyz;
  //return OUT;
  
  half shadowOccl = 1.0h;
	half3 vAORatios = 1.f;

   // Debug output
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   DebugOutput(OUT.Color, IN.baseTC);
   return OUT;
 #endif

	// apply real-time shadows
	vSun *= (1-shadowOccl) * vAORatios.y;
	vAmb *= vAORatios.x;

	// combine final color
  half3 vFinalDif = vSun + vAmb;

  if( nQuality > QUALITY_LOW )
  {
#ifdef %_RT_BLEND_WITH_TERRAIN_COLOR
    half4 terrainColor = GetTerrainColor(TerrainInfoSampler0, IN.OutdoorAOInfo.xy, IN.Color.g, shadowOccl, vAORatios.x);
    vFinalDif.xyz = lerp(terrainColor.xyz, vFinalDif.xyz, 0.5f);
#endif
  }

  clip(fAlpha - .5f);

#if %_RT_FOG
#if !%_RT_VOLUMETRIC_FOG
  OUT.Color.xyz = lerp(IN.localFogColor.xyz, vFinalDif.xyz, IN.localFogColor.w);
#else
	VolumetricFogTexcoord vtc = GetVolumetricFogTexcoordParamByScreenPos(IN.Position);
	float4 vf = GetVolumetricFogValue(vtc);
	ApplyVolumetricFog(vf, IN.localFogColor, vtc, vFinalDif.rgb);
#endif
#else  
  OUT.Color.xyz = vFinalDif.xyz;
#endif
  OUT.Color.w = fAlpha;

  HDROutput(OUT, OUT.Color, 1);

  return OUT;
}

pixout SpriteFuncPS(v2f IN)
{
#if %_RT_SAMPLE1        // 2 textures sprite
  return Sprite2PS(IN);
#else
  return SpritePS(IN);
#endif
}

pixout_gbuffer SpritePS_Z(v2f_z IN)
{
  pixout_gbuffer OUT = (pixout_gbuffer) 0.5;

	half SpriteAlphaRef = saturate(IN.baseTC.z)*256.0h/255.0h;
	half DissolveMul = IN.baseTC.w;

	const int2 vPixQuadIdx= (int2)IN.HPosition.xy % 2; // 4 transparency levels for a 2x2 quad. We're using dot/abs instead, since rsx doens't support array indexing. 
	clip( DissolveMul * (abs(dot(half4(0.0h, 0.76h, 0.5h,-1.0h), vPixQuadIdx.xxyy))-SpriteAlphaRef)); // todo: try using coverage mask when in MSAA mode.

  // load the base
	half4 diffCol = tex2D(BaseSampler, IN.baseTC.xy); 
	diffCol.rgb *= diffCol.rgb;
	diffCol.a = diffCol.a>0.0h;
	//#if (%_RT_MSAA_QUALITY || %_RT_MSAA_QUALITY1) && %_RT_ALPHATEST
	//	GetAlphaCoverageMask( BaseSampler, IN.baseTC.xy, 1.0h/255.0h, diffCol.a, OUT.uCoverageMask, true);
	//#endif
	
	// Alpha testing
	clip(diffCol.a - 1.0h/255.0h);
	
	MaterialAttribsCommon attribs = MaterialAttribsDefault();
	attribs.NormalWorld = normalize(IN.ZInfo.xyz);
	attribs.Albedo = diffCol.rgb;
	
	EncodeGBuffer( attribs, OUT.GBufferA, OUT.GBufferB, OUT.GBufferC );

  return OUT;
}

pixout_gbuffer Sprite2PS_Z(v2f_z IN)
{
  pixout_gbuffer OUT = (pixout_gbuffer) 0.5;

  half4 vSun = tex2D(BaseSampler, IN.baseTC.xy);
  half fAlpha = vSun.a;

	// Alpha test
	clip(fAlpha - 0.5);
	
	/*
	// on consoles we always use alpha test 
	OUT.NormalRT.rgb= half3(0.5,1,0.5f);
	OUT.NormalRT.a = 1.h;
	*/
	
	// TheoM: just fixing compile error here. Should probably transform (0.5, 1, 0.5) to worldspace for correctness
	MaterialAttribsCommon attribs = MaterialAttribsDefault();
	attribs.NormalWorld =  half3(0.5,1,0.5f);
	EncodeGBuffer( attribs, OUT.GBufferA, OUT.GBufferB, OUT.GBufferC );

  return OUT;
}

pixout_gbuffer SpriteZFuncPS(v2f_z IN)
{
#if %_RT_SAMPLE1        // 2 textures sprite
  return Sprite2PS_Z(IN);
#else
  return SpritePS_Z(IN);
#endif
}

//////////////////////////////// technique ////////////////

technique General
<
  string Script = 
        "TechniqueZ=General_Z;"        
>
{
  pass p0
  {
    VertexShader = SpriteVS();
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = None;
    
    PixelShader = SpriteFuncPS() SpritePS;
  }
}

technique General_Z
{
  pass p0
  {
    VertexShader = SpriteVS_Z();
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = None;
    
    PixelShader = SpriteZFuncPS() SpritePS;
  }
}

v2f Sprite_DebugVS(a2v IN)
{
  v2f OUT = (v2f)0; 

  // Position in screen space.
  float4 vPos = IN.Position;
  OUT.Position = float4(
			2.0f * (vPos.xy + 0.5f) / float2(64, 64) - 1.0f, vPos.zw);
  
  OUT.baseTC.xy = IN.baseTC.xy;
  
  float4 inColor = GetInputColor(IN.Color);
  OUT.Color = inColor;
  
  return OUT;
}

pixout Sprite_DebugPS(v2f IN)
{
  pixout OUT;
  int nQuality = GetShaderQuality();
  
	half SpriteAlphaRef = 0.1h;
	
	#if %_RT_NOZPASS
	  SpriteAlphaRef = IN.Color.b;
	#endif
   
  // load the base
  half fSunContribution, fAlpha;
  half4 baseColor = tex2DBilinearSprites(BaseSampler, IN.baseTC.xy, fSunContribution); 
	half3 vFinalDif = baseColor.xyz;

  OUT.Color.xyz = vFinalDif.xyz;
  OUT.Color.w = 1.0f;// fAlpha;

  HDROutput(OUT, OUT.Color, 1);

  return OUT;
}

technique General_Debug
{
  pass p0
  {
    VertexShader = Sprite_DebugVS();
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = None;
    
    PixelShader = Sprite_DebugPS();
  }
}

/////////////////////// eof ///



