// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "Common.cfi"
#include "ShadeLib.cfi"
#include "PostEffectsLib.cfi"

float Script : STANDARDSGLOBAL
<
  string Script =
           "NoPreview;"
           "LocalConstants;"
           "ShaderDrawType = Custom;"
           "ShaderType = PostProcess;"
>; 

//////////////////////////////////////////////////////////////////////////////////////////////
// Variables and constants
//////////////////////////////////////////////////////////////////////////////////////////////

#define PACK_PRECISION 65536.0f
#define INV_PACK_PRECISION (1.0f/65536.0f)

//////////////////////////////////////////////////////////////////////////////////////////////
// Structs
//////////////////////////////////////////////////////////////////////////////////////////////

struct pixoutPOM
{
  float4 Color0 : COLOR0;
  float4 Color1 : COLOR1;
};

struct pixoutSnow
{
	float4 Normals  : COLOR0;
	float4 Diffuse  : COLOR1;
	float4 Specular : COLOR2;
	float4 Blending : COLOR3;
};

//////////////////////////////////////////////////////////////////////////////////////////////
// Functions
//////////////////////////////////////////////////////////////////////////////////////////////

float2 PackDepth( float fDepth )
{
	//return float2( int(fDepth) << 16, fDepth );

	// Distribute precision to 2 channels.
 	float fIntPart;  
 	float fFracPart = modf(fDepth * PACK_PRECISION, fIntPart);  
 	return float2(fIntPart * INV_PACK_PRECISION, fFracPart);
}

float UnpackDepth( float2 fPackedDepth )
{
	//return (int(fPackedDepth.x) >> 16) + fPackedDepth.y;//(data.x / 255 + data.y * 255/256)
	return (fPackedDepth.y * INV_PACK_PRECISION + fPackedDepth.x);
}

float UnpackDepthScaled( float2 fPackedDepth )
{
	return UnpackDepth( fPackedDepth ) * CV_NearFarClipDist.y;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// Pixel Shaders
//////////////////////////////////////////////////////////////////////////////////////////////

Texture2D sceneDiffuseTex : register(t0);
Texture2D sceneNormalTex : register(t1);
Texture2D sceneSpecularTex : register(t2);
Texture2D depthTex : register(t3) = $ZTarget;
Texture2D snowDerivativesTex : register(t4) = "%ENGINE%/EngineAssets/Textures/perlinNoiseDerivatives.tif";
Texture2D snowSpatterTex : register(t5) = "%ENGINE%/EngineAssets/Textures/Frozen/snow_spatter.tif";
Texture2D frostBubblesBumpTex : register(t6) = "%ENGINE%/EngineAssets/Textures/Frozen/frost_noise4.tif";
Texture2D snowFrostBumpTex : register(t7) = "%ENGINE%/EngineAssets/Textures/Frozen/frost_noise3.dds";
Texture3D volumeNoiseTex : register(t8) = "%ENGINE%/EngineAssets/Textures/noise3d.dds";
Texture2D snowOcclusionTex : register(t9) = $RainOcclusion;

SamplerState pointClampSampler : register(s0) = SS_PointClamp;
SamplerState trilinearWrapSampler : register(s1) = SS_TrilinearWrap;
SamplerState pointBorderWhiteSampler : register(s2);
SamplerState bilinearWrapSampler : register(s3) = SS_MaterialBilinearWrap;

float4 g_fWaterLevel : PB_WaterLevel;
float4 g_SnowVolumeParams;
float4 g_SnowMultipliers;
float4 g_WindDirection;
float4 g_SnowOcc_WindOffs;
float3x4 g_SnowOcc_TransMat;

pixoutSnow DeferredSnowPS( vtxOut IN )
{
	pixoutSnow OUT = (pixoutSnow) 0;

	OUT.Diffuse = sceneDiffuseTex.Sample(pointClampSampler, IN.baseTC.xy);
	OUT.Normals = sceneNormalTex.Sample(pointClampSampler, IN.baseTC.xy);
	OUT.Specular = sceneSpecularTex.Sample(pointClampSampler, IN.baseTC.xy);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Get world depth and position.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	const float fDepth = GetLinearDepth(depthTex, IN.baseTC.xy);
	const float3 vPosition = ReconstructWorldPos(IN.WPos.xy, fDepth);

	half3 vView = normalize(g_VS_WorldViewPos.xyz - vPosition.xyz);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	// Decode gbuffer data
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	MaterialAttribsCommon attribs = DecodeGBuffer( OUT.Normals, OUT.Diffuse, OUT.Specular );

	half3 vNormal = attribs.NormalWorld;

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Compute XYZ blending for world-space texture sampling.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	half3 vSurfBlend = abs( vNormal.xyz );
	vSurfBlend = saturate( vSurfBlend - 0.25 );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Compute perturbed normal using partial derivatives.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	half3 vSnowNormal = vNormal;

	float3 vSigmaX = ddx( vPosition.xyz );
	float3 vSigmaY = ddy( vPosition.xyz );

	float3 vR1 = cross(vSigmaY, vNormal);
	float3 vR2 = cross(vNormal, vSigmaX);
	float fDet = dot(vSigmaX, vR1);

	// Fetch deriavtive sampler.
	float3 vPosDeriv = vPosition * 1.7f;
	half2 dHdST = EXPAND(snowDerivativesTex.Sample(trilinearWrapSampler, vPosDeriv.xy)) * vSurfBlend.z;
	dHdST += EXPAND(snowDerivativesTex.Sample(trilinearWrapSampler, vPosDeriv.yz)) * vSurfBlend.x;
	dHdST += EXPAND(snowDerivativesTex.Sample(trilinearWrapSampler, vPosDeriv.zx)) * vSurfBlend.y;
	dHdST *= 8.h;

	float2 dHdxy = float2( dot(dHdST.xy, vSigmaX.xy), dot(dHdST.xy, vSigmaY.xy) );

	float3 vGrad = sign(fDet) * ( dHdxy.x * vR1 + (dHdxy.y * vR2) );
	vSnowNormal = (abs(fDet) * vNormal - vGrad);
	vSnowNormal /= length(vSnowNormal) + 1e-6;

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Compute attenuation factor.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	half fAttenuation = saturate( GetAttenuation(g_SnowVolumeParams.xyz - vPosition.xyz, g_SnowVolumeParams.w) );
	half fWaterAtten = saturate((vPosition.z - g_fWaterLevel.x + 0.125h) * 4.h);
	fAttenuation *= (fWaterAtten * fWaterAtten);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Fetch spattering mask.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	half3 vSpatterTC = vPosition.xyz * 10.0h;
	half fSpatter = snowSpatterTex.Sample(trilinearWrapSampler, vSpatterTC.yz).x * vSurfBlend.x;
	fSpatter += snowSpatterTex.Sample(trilinearWrapSampler, vSpatterTC.zx).x * vSurfBlend.y;
	fSpatter += snowSpatterTex.Sample(trilinearWrapSampler, vSpatterTC.xy).x * vSurfBlend.z;
	half fSpatterVariation = fSpatter * 0.1h * saturate(1.0h - g_SnowMultipliers.x * 0.1h);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Compute variation.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	float3 tcVariation = vPosition * 0.5f;
	float fFrostVariation = volumeNoiseTex.SampleLevel(trilinearWrapSampler, tcVariation.xyz * 0.25h, 0.0f).w;
	fFrostVariation *= volumeNoiseTex.SampleLevel(trilinearWrapSampler, tcVariation.xyz * 0.5h + fFrostVariation, 0.0f).w * 2;
	fFrostVariation *= volumeNoiseTex.SampleLevel(trilinearWrapSampler, tcVariation.xyz * 1.25h + (fFrostVariation - fSpatterVariation * fFrostVariation), 0.0f).w * 4;
	fFrostVariation = saturate(fFrostVariation * 0.5h - 0.125h);
	float fFreezingVariation = fFrostVariation;

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Compute frost pattern.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	half2 vDisp = fFrostVariation * 0.01h;
	half fFrostOnSides = saturate(saturate(vNormal.z - 0.3h) * 10.h);

	half3 vFrostTC = vPosition.xyz * 2.5h + vDisp.xyx;
	half4 vFrostNoise = snowFrostBumpTex.Sample(trilinearWrapSampler, vFrostTC.yz) * vSurfBlend.x; 
	vFrostNoise += snowFrostBumpTex.Sample(trilinearWrapSampler, vFrostTC.zx) * vSurfBlend.y; 
	vFrostNoise += snowFrostBumpTex.Sample(trilinearWrapSampler, vFrostTC.xy) * vSurfBlend.z;
	vFrostNoise.xyz = normalize(vFrostNoise.xyz);
	vFrostNoise.w = dot(vFrostNoise.xyz, 0.33) * 2 - 1;

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Compute occlusion using occlusion buffer (if active).
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	half fOcclusion = 1.h;
#if %_RT_SAMPLE0
	const half2 vOffs = half2(0, 1.h / RAIN_OCC_MAP_SIZE);

	// Occlusion coordinates, offset along normal for some variation and spattered for nice transition.
	half3 vOccMapCoords = mul((float3x4)g_SnowOcc_TransMat, float4(vPosition.xyz, 1.f));
	vOccMapCoords.y = 1.h - vOccMapCoords.y;
	vOccMapCoords.xy += g_SnowOcc_WindOffs.xy;
	vOccMapCoords.z += 0.025h;

	// Fetch occlusion buffer.
	half4 vOccDepth;
	vOccDepth.x = snowOcclusionTex.Sample(pointBorderWhiteSampler, vOccMapCoords.xy).x;
	vOccDepth.y = snowOcclusionTex.Sample(pointBorderWhiteSampler, vOccMapCoords.xy + vOffs.yx).x;
	vOccDepth.z = snowOcclusionTex.Sample(pointBorderWhiteSampler, vOccMapCoords.xy + vOffs.xy).x;
	vOccDepth.w = snowOcclusionTex.Sample(pointBorderWhiteSampler, vOccMapCoords.xy + vOffs.yy).x;

	// bilinear interpolation for smooth transition
	half4 bOccCheck = (vOccDepth==1.0f) ? 1.0f : saturate(512.0h * (vOccMapCoords.z - (255.h/256.h - vOccDepth)));
	const half2 vTexelPos = frac(vOccMapCoords.xy * RAIN_OCC_MAP_SIZE);
	bOccCheck.xy = lerp(bOccCheck.xy, bOccCheck.zw, vTexelPos.y);
	fOcclusion = lerp(bOccCheck.x, bOccCheck.y, vTexelPos.x);
#endif

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Snow and forst accumulation amounts.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	half fAmount = min(10.h, g_SnowMultipliers.x) * fAttenuation * fOcclusion;
	half fSnowAmount = max(1e-6h, 10.h / max(1e-6h, fAmount));
	half fFrostAmount = saturate(g_SnowMultipliers.y * fAttenuation * fOcclusion);
	half fFrostPower = max(0.5h, (2.0h - min(1.h, g_SnowMultipliers.y)) * fAttenuation);
	half fSurfaceFreezing = g_SnowMultipliers.z;

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Compute frost bubbles.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	half3 vParallax = vView * saturate(vFrostNoise.w) * 0.25h;

	// Unfortunately using world-space, need to sample on every axis.
	// If we can get smooth/face normals, we can do frac(vPosition)*4 and apply vSurfBlend for UVs and sample only 4 times for parallax.
	vFrostTC *= 2.0;
	half3 vBubbles = 0;

	vBubbles.x += frostBubblesBumpTex.Sample(bilinearWrapSampler, vFrostTC.yz + float2(0.25h,0) + vParallax.yz).w;
	vBubbles.y += frostBubblesBumpTex.Sample(bilinearWrapSampler, vFrostTC.zx + float2(0.25h,0) + vParallax.zx).w;
	vBubbles.z += frostBubblesBumpTex.Sample(bilinearWrapSampler, vFrostTC.xy + float2(0.25h,0) + vParallax.xy).w;

	vBubbles.x += frostBubblesBumpTex.Sample(bilinearWrapSampler, vFrostTC.yz + (float2(0,0.15h) + 2.h * vParallax.yz)).w;
	vBubbles.y += frostBubblesBumpTex.Sample(bilinearWrapSampler, vFrostTC.zx + (float2(0,0.15h) + 2.h * vParallax.zx)).w;
	vBubbles.z += frostBubblesBumpTex.Sample(bilinearWrapSampler, vFrostTC.xy + (float2(0,0.15h) + 2.h * vParallax.xy)).w;

	vBubbles.x += frostBubblesBumpTex.Sample(bilinearWrapSampler, vFrostTC.yz + (float2(0.35h,0.75h) + 3.h * vParallax.yz)).w;
	vBubbles.y += frostBubblesBumpTex.Sample(bilinearWrapSampler, vFrostTC.zx + (float2(0.35h,0.75h) + 3.h * vParallax.zx)).w;
	vBubbles.z += frostBubblesBumpTex.Sample(bilinearWrapSampler, vFrostTC.xy + (float2(0.35h,0.75h) + 3.h * vParallax.xy)).w;

	vBubbles *= vSurfBlend;

	half3 vBubblesFrost = pow(vBubbles * fFrostVariation * fFrostAmount, fFrostPower);
	half2 fBubbles = saturate(half2(dot(vBubbles, 1.h), dot(vBubblesFrost, 1.h)) - 0.25h);
	fFrostVariation = saturate(fFrostVariation - saturate(1.h - fAmount * 0.1h));

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Compute frost glitter.
	half2 fGlitterBubbles = fBubbles * ((fBubbles * 0.333h > 0.2h) ? 20.h : 1.h);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Compute snow diffuse variation and blending
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	half fIceTop = saturate(1.h - 0.4h * fFrostVariation);
	half fIceTopZ = saturate((pow(vNormal.z, fSnowAmount)- 0.2h) * 10.h);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Output blending data for displacement
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	OUT.Blending.r = fBubbles.y;
	OUT.Blending.g = fIceTop;
	OUT.Blending.b = saturate(fSurfaceFreezing * vNormal.z * fFreezingVariation * fAttenuation);
	OUT.Blending.a = fIceTopZ * saturate(fFrostVariation * 8.h);
	OUT.Blending.r += OUT.Blending.b * saturate( dot(OUT.Diffuse.rgb, 1) * 1.5f );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Output diffuse results
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	attribs.Albedo = lerp( attribs.Albedo, fIceTop, OUT.Blending.a ) + OUT.Blending.r; 

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Output normals results
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	attribs.NormalWorld = lerp( vNormal.xyz, vSnowNormal.xyz, OUT.Blending.a );

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Output specular/gloss results
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	attribs.Smoothness = lerp( attribs.Smoothness, fSpatter * 0.4, OUT.Blending.a ) + fGlitterBubbles.y;
	attribs.Reflectance = lerp( attribs.Reflectance, fSpatter * (40.0 / 255.0), OUT.Blending.a ) + fGlitterBubbles.y;

	EncodeGBuffer( attribs, OUT.Normals, OUT.Diffuse, OUT.Specular );

	return OUT;
}

//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////

Texture2D dspSnowTex : register(t0);
Texture2D dspDepthTex : register(t1) = $ZTarget;
Texture2D dspSceneNormalTex : register(t2) = TS_SceneNormals;

SamplerState dspPointClampSampler : register(s0);

float3x4 g_CameraMatrix;

pixout DeferredSnowPOM_PS( vtxOut IN )
{
	pixout OUT = (pixout) 0;

	const float fDepth = CV_NearFarClipDist.y * dspDepthTex.Sample(dspPointClampSampler, IN.baseTC.xy).x;
	const float3 vNormal = DecodeGBufferNormal(dspSceneNormalTex.Sample(dspPointClampSampler, IN.baseTC.xy));
	const float4 cSnowMap = dspSnowTex.Sample(dspPointClampSampler, IN.baseTC.xy);

	const float displace = -512.h * cSnowMap.a;// / fDepth;

	const float3 ss_normal = (mul( g_CameraMatrix, vNormal.xyz ));
	const float ys = IN.baseTC.y * 2.0 - 1.0;
	const float dy = ss_normal.y * displace * 0.01;

	OUT.Color.x = (dy / (fDepth + 1e-6)) * 0.1 + 0.5;
	OUT.Color.y = saturate(-ss_normal.y) / (fDepth + 1e-6);

	return OUT;
}

//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////

Texture2D dspmHeightTex : register(t0);
Texture2D dspmDepthTex : register(t1) = $ZTarget;

SamplerState dspmPointClampSampler : register(s0);

pixout_fp DeferredSnowPOM_Min_PS( vtxOut IN )
{
	pixout_fp OUT = (pixout_fp) 0;

	OUT.Color.xy = dspmHeightTex.Sample( dspmPointClampSampler, IN.baseTC.xy );
	OUT.Color.xy = min(OUT.Color, dspmHeightTex.Sample( dspmPointClampSampler, IN.baseTC.xy + CV_ScreenSize.zw * half2( 0, 4) ));
	OUT.Color.xy = min(OUT.Color, dspmHeightTex.Sample( dspmPointClampSampler, IN.baseTC.xy + CV_ScreenSize.zw * half2( 0,-4) ));

	// Distribute precision to 2 channels.
	const float fDepth = dspmDepthTex.Sample(dspmPointClampSampler, IN.baseTC.xy).x;
	OUT.Color.zw = PackDepth( fDepth );

	return OUT;
}

//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
// Iterative POM, shader will run 3 times using small sample counts.
// This way we don't sample 100x+ to get decent results on edges.

Texture2D dspaSceneTargetTex : register(t0);
Texture2D dspaSnowTex : register(t1);

SamplerState dspaLinearClampSampler : register(s0);

float4 g_DisplacementParams;

pixoutPOM DeferredSnowPOM_Apply_PS( vtxOut IN )
{
	pixoutPOM OUT = (pixoutPOM) 0;

	float4 NB0 = dspaSnowTex.Sample(dspaLinearClampSampler, IN.baseTC.xy);
	float fDepth = UnpackDepth(NB0.zw);

	// Pass-through for early out.
	OUT.Color0 = dspaSceneTargetTex.Sample(dspaLinearClampSampler, IN.baseTC.xy);
#if %_RT_SAMPLE0
	OUT.Color1 = fDepth;
#else
	OUT.Color1 = NB0;
#endif
	fDepth *= CV_NearFarClipDist.y;

	const float bumpScale = 0.0375f * g_DisplacementParams.x;
	const int numSteps = 10;
	const float step = 1.0 / numSteps;

	const float borderSize = 0.2f * NB0.y;
	const float borderDist = 1.h - IN.baseTC.y;
	const float edgeWeight = borderDist >= borderSize ? 1 : pow(borderDist / borderSize, 0.75f);

	const float2 delta = half2(0, -1) * edgeWeight * bumpScale / numSteps;
	const float2 baseTC = IN.baseTC.xy - 0.5 * numSteps * delta.xy;
	float2 offset = baseTC.xy + delta.xy;

	float height = 1 - step;
	float4 NB1 = dspaSnowTex.Sample(dspaLinearClampSampler, offset.xy);
	float fDepthOff = UnpackDepthScaled(NB1.zw);

	for (int i=0; i<numSteps; i++)
	{
		if (NB1.x < height)
		{
			NB0 = NB1;

			height -= step;
			offset.xy += delta;

			NB1 = dspaSnowTex.SampleLevel(dspaLinearClampSampler, offset.xy, 0.0f);
			fDepthOff = UnpackDepthScaled(NB1.zw);
		}
	}

	// Early out depth-test.
	if(fDepthOff > fDepth || NB1.x < 0.5)
		return OUT;

	float2 offsetBest = offset;
	float error = 1.0;

	float t1 = height;
	float t0 = t1 + step;

	float delta1 = t1 - NB1.x;
	float delta0 = t0 - NB0.x;

	const float4 intersect = float4(delta.xy * numSteps, delta.xy * numSteps + baseTC.xy);

	for (int i=0; i<2; i++)
	{
		if (abs(error) > 0.01)
		{
			const float denom = delta1 - delta0;
			const float t = (t0 * delta1 - t1 * delta0) / denom;
			offsetBest.xy = -t * intersect.xy + intersect.zw;

			const float4 NB = dspaSnowTex.SampleLevel(dspaLinearClampSampler, offsetBest.xy, 0.0f);

			error = t - NB.x;
			if (error < 0)
			{
				delta1 = error;
				t1 = t;
			}
			else
			{
				delta0 = error;
				t0 = t;
			}
		}
	}

	OUT.Color0 = dspaSceneTargetTex.SampleLevel(dspaLinearClampSampler, offsetBest.xy, 0.0f);

	const float4 vDepthPOM = dspaSnowTex.SampleLevel(dspaLinearClampSampler, offsetBest.xy, 0.0f);
#if %_RT_SAMPLE0
	OUT.Color1 = UnpackDepth(vDepthPOM.zw);
#else
	OUT.Color1 = vDepthPOM;
#endif

	return OUT;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// Techniques
//////////////////////////////////////////////////////////////////////////////////////////////

technique Snow
{
	pass p0
	{
		VertexShader = FullscreenTriVS();
		PixelShader = DeferredSnowPS() HDRPostProcessPS;
		CullMode = None;
	}
}

technique ParallaxMapPrepass
{
	pass p0
	{
		VertexShader = FullscreenTriVS();
		PixelShader = DeferredSnowPOM_PS();
		CullMode = None;
	}
}

technique ParallaxMapMin
{
	pass p0
	{
		VertexShader = FullscreenTriVS();
		PixelShader = DeferredSnowPOM_Min_PS();
		CullMode = None;
	}
}

technique ParallaxMapApply
{
	pass p0
	{
		VertexShader = FullscreenTriVS();
		PixelShader = DeferredSnowPOM_Apply_PS() HDRPostProcessPS;
		CullMode = None;
	}
}

/////////////////////// eof ///
