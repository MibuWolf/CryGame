// CRYENGINE Source Code File
// Copyright 2001-2016 Crytek GmbH. All rights reserved.

// shared structures for compute skinning
struct DualQuat
{
	float4 rotation;
	float4 translation;
};

struct CSSkinVertexOut
{
	float3 pos; float pad1;
	float4 qtangent;
	float3 tangent; float pad2;
	float3 bitangent; float pad3;
	float2 uv; float2 pad4;
};

// common functions

// 6 instructions
float3 transform_quat_vec(const float4 quat, const float3 vec) 
{
	float3 r2,r3;  
	r2	= cross(quat.xyz,vec);	//mul+mad 
	r2	= quat.w*vec+r2;		//mad 
	r3	= cross(quat.xyz,r2);	//mul+mad 
	r3	= r3*2+vec;				//mad 
	return r3;
}

// 8 instructions
float3x3 quat_to_mat(const float4 quat) 
{
  float3 r0,r1,r2;  float4 q2;
  float3 c0 = float3(-1,0,1);

  q2    = quat+quat;				//add
  r2    = q2.w*c0.xyz;				//mul
  r0    = quat.wzy*r2.zxz+c0.xyy;	//mad ->tangent
  r0    = quat.x*q2.xyz+r0;			//mad 
  r1    = quat.zwx*r2.zzx+c0.yxy;	//mad ->binormal
  r1    = quat.y*q2.xyz+r1;	        //mad
  r2	= cross(r0,r1);				//mul+mad ->binormal

  return float3x3(r0,r1,r2);
}

// 5 instructions
float4 transform_quat_quat(const float4 q, const float4 p) 
{
	float4 c, r;
	c.xyz = cross(q.xyz, p.xyz);	// 2 CROSS
	c.w = -dot(q.xyz, p.xyz);		// 1 DOT3
	r = p * q.w + c;				// 1 MAD
	r.xyz = q * p.w + r;			// 1 MAD
	return r;
}

float3x4 convert_dq_to_mat(float4 nq, float4 dq)
{
	float3  t=(nq.w*dq.xyz - dq.w*nq.xyz + cross(nq.xyz,dq.xyz)); 
	float3 v2=nq.xyz+nq.xyz;
	float xx=1-v2.x*nq.x;	float yy=v2.y*nq.y;	float xw=v2.x*nq.w;
	float xy=v2.y*nq.x;		float yz=v2.z*nq.y;	float yw=v2.y*nq.w;
	float xz=v2.z*nq.x;		float zz=v2.z*nq.z;	float zw=v2.z*nq.w;
	float3x4 r;
	r._m00=1-yy-zz;	r._m01=xy-zw;	r._m02=xz+yw;	r._m03=t.x+t.x;
	r._m10=xy+zw;	r._m11=xx-zz;	r._m12=yz-xw;	r._m13=t.y+t.y;
	r._m20=xz-yw;	r._m21=yz+xw;	r._m22=xx-yy;	r._m23=t.z+t.z;
	return r; 
}

float4 mat_to_quat(float3x3 m)
{
	float4 q;
	float s,p,tr = m._m00 + m._m11 + m._m22;
	q.w=1;q.x=0;q.y=0;q.z=0;
	if(tr>0)
	{
		s=sqrt(tr+1.0f);
		p=0.5f/s;
		q.w=s*0.5f;
		q.x=(m._m21-m._m12)*p;
		q.y=(m._m02-m._m20)*p;
		q.z=(m._m10-m._m01)*p;
	}
	else if ((m._m00>=m._m11) && (m._m00>=m._m22))
	{
		s=sqrt(m._m00-m._m11-m._m22+1.0f);
		p=0.5f/s;
		q.w=(m._m21-m._m12)*p;
		q.x=s*0.5f;
		q.y=(m._m10+m._m01)*p;
		q.z=(m._m20+m._m02)*p;
	}
	else if ((m._m11>=m._m00) && (m._m11>=m._m22))
	{
		s=sqrt(m._m11-m._m22-m._m00+1.0f);
		p=0.5f/s;
		q.w=(m._m02-m._m20)*p;
		q.x=(m._m01+m._m10)*p;
		q.y=s*0.5f;
		q.z=(m._m21+m._m12)*p;
	}
	else if ((m._m22>=m._m00) && (m._m22>=m._m11))
	{
		s=sqrt(m._m22-m._m00-m._m11+1.0f);
		p=0.5f/s;
		q.w=(m._m10-m._m01)*p;
		q.x=(m._m02+m._m20)*p;
		q.y=(m._m12+m._m21)*p;
		q.z=s*0.5f;
	}
	return q; 
}

float3 transform_dq_vec(in DualQuat dualQuat, in float3 v)
{
	return transform_quat_vec(dualQuat.rotation,v)+(dualQuat.rotation.w*dualQuat.translation-dualQuat.translation.w*dualQuat.rotation+cross(dualQuat.rotation.xyz,dualQuat.translation.xyz))*2.f;
}