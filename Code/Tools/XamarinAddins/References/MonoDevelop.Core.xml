<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoDevelop.Core</name>
    </assembly>
    <members>
        <member name="P:MonoDevelop.Core.UserException.AlreadyReportedToUser">
            <summary>
            If true, it means that the error has already been reported to the user (for example, by showing a dialog), so it doesn't have to be reported again.
            </summary>
            <value><c>true</c> if already reported to user; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MonoDevelop.Core.Runtime.RunInMainThread(System.Action)">
            <summary>
            Runs an action in the main thread (usually the UI thread). The method returns a task, so it can be awaited.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Runtime.RunInMainThread``1(System.Func{``0})">
            <summary>
            Runs a function in the main thread (usually the UI thread). The method returns a task, so it can be awaited.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Runtime.RunInMainThread``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs an action in the main thread (usually the UI thread). The method returns a task, so it can be awaited.
            </summary>
            <remarks>This version of the method is useful when the operation to be executed in the main
            thread is asynchronous.</remarks>
        </member>
        <member name="M:MonoDevelop.Core.Runtime.RunInMainThread(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs an action in the main thread (usually the UI thread). The method returns a task, so it can be awaited.
            </summary>
            <remarks>This version of the method is useful when the operation to be executed in the main
            thread is asynchronous.</remarks>
        </member>
        <member name="P:MonoDevelop.Core.Runtime.IsMainThread">
            <summary>
            Returns true if current thread is GUI thread.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Runtime.AssertMainThread">
            <summary>
            Asserts that the current thread is the main thread. It will throw an exception if it isn't.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessService.GetDebugExecutionMode">
            <summary>
            Returns the debug execution mode set
            </summary>
            <remarks>The returned mode set can be used to run applications in debug mode</remarks>
        </member>
        <member name="M:MonoDevelop.Core.Execution.RemoteProcessObject.Dispose">
            <summary>
            Disposes the object, and kills the remote process if there are no more remote objects running on it
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.RemoteProcessObject.Shutdown">
            <summary>
            Shutdowns the remote process that is running this instance.
            </summary>
            <remarks>
            This method can only be used if the remote process is not shared with other objects.
            </remarks>
        </member>
        <member name="T:MonoDevelop.Core.Execution.IExecutionHandler">
            <summary>
            A handler that can execute commands of a specific type
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.IExecutionHandler.CanExecute(MonoDevelop.Core.Execution.ExecutionCommand)">
            <summary>
            Determines whether this instance can execute the specified command.
            </summary>
            <returns>
            <c>true</c> if this instance can execute the specified command; otherwise, <c>false</c>.
            </returns>
            <param name='command'>
            Command.
            </param>
        </member>
        <member name="M:MonoDevelop.Core.Execution.IExecutionHandler.Execute(MonoDevelop.Core.Execution.ExecutionCommand,MonoDevelop.Core.Execution.OperationConsole)">
            <summary>
            Executes the specified command
            </summary>
            <param name='command'>
            The command
            </param>
            <param name='console'>
            Console where to log the output
            </param>
        </member>
        <member name="T:MonoDevelop.Core.Execution.ITargetedExecutionHandler">
            <summary>
            An execution handler that executes on a particular execution target.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ITargetedExecutionHandler.Target">
            <summary>
            The execution target
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Execution.IExecutionMode">
            <summary>
            A user visible mode for executing commands. It can be for example a specific debugger of profiler.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Execution.IExecutionModeSet">
            <summary>
            A collection of exectution modes
            </summary>
            <remarks>
            For example, the mode set "Debug" provides several execution modes
            for all the supported debuggers
            </remarks>
        </member>
        <member name="P:MonoDevelop.Core.Execution.IExecutionModeSet.Name">
            <summary>
            Name of the execution mode set
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.IExecutionModeSet.ExecutionModes">
            <summary>
            Execution modes provided by this set
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Execution.ExecutionCommand">
            <summary>
            Set of parameters to be used to execute a file or project
            </summary>
            <remarks>
            This is the base class for types of commands that can be used
            to run a project or file. This class only contains the data
            required to run the project, but not the actual execution logic.
            The execution logic is provided by classes that implement
            IExecutionHandler. A project generates an ExecutionCommand
            instance, and a user can select a IExecutionHandler to
            run it.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionCommand.Target">
            <summary>
            Execution target. For example, a specific device.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Execution.LocalConsole">
            <summary>
            This is an implementation of the IConsole interface which allows reading
            the output generated from a process, and writing its input.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.LocalConsole.SetDone">
            <summary>
            Flushes and closes the readers and writers
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.LocalConsole.InWriter">
            <summary>
            This writer can be used to provide the input of the console.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.LocalConsole.OutReader">
            <summary>
            Output of the process.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.LocalConsole.ErrorReader">
            <summary>
            Error log of the process
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.LocalConsole.LogReader">
            <summary>
            Log of the process
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Execution.ProcessArgumentBuilder">
            <summary>
            Builds a process argument string.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessArgumentBuilder.Add(System.String)">
            <summary>
            Adds an argument without escaping or quoting.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessArgumentBuilder.Add(System.String[])">
            <summary>
            Adds multiple arguments without escaping or quoting.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessArgumentBuilder.AddQuotedFormat(System.String,System.Object[])">
            <summary>
            Adds a formatted argument, quoting and escaping as necessary.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessArgumentBuilder.AddQuoted(System.String)">
            <summary>Adds an argument, quoting and escaping as necessary.</summary>
            <remarks>The .NET process class does not support escaped 
            arguments, only quoted arguments with escaped quotes.</remarks>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessArgumentBuilder.AddQuoted(System.String[])">
            <summary>
            Adds multiple arguments, quoting and escaping each as necessary.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ProcessArgumentBuilder.Quote(System.String)">
            <summary>Quotes a string, escaping if necessary.</summary>
            <remarks>The .NET process class does not support escaped 
            arguments, only quoted arguments with escaped quotes.</remarks>
        </member>
        <member name="T:MonoDevelop.Core.Execution.ExecutionTarget">
            <summary>
            A target that can execute a command. For example, a specific device when doing mobile development
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionTarget.Name">
            <summary>
            Display name of the device
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionTarget.FullName">
            <summary>
            The display name of the item when it is selected
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionTarget.Id">
            <summary>
            Unique identifier of the target
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionTarget.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoDevelop.Core.Execution.ExecutionTarget"/> is enabled.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionTarget.Notable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoDevelop.Core.Execution.ExecutionTarget"/> is notable.
            </summary>
            <remarks>
            This is introduced to be able to highlight execution targets for whatever reason makes sense for the project. 
            For example, the android add-in uses this to indicate which emulators are currently running but other addins can use this
            for their own purposes
            </remarks>
        </member>
        <member name="P:MonoDevelop.Core.Execution.ExecutionTarget.ParentGroup">
            <summary>
            Target group on which this target is included
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Execution.ICommandFactory">
            <summary>
            Used to create commands from file paths
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.ICommandFactory.CreateCommand(System.String)">
            <summary>
            Creates a command, or returns null if a command can't be created from the given path
            </summary>
            <returns>The command, or null if a command can't be created from the given path</returns>
            <param name="path">Path.</param>
        </member>
        <member name="T:MonoDevelop.Core.Execution.OperationConsole">
            <summary>
            A console where an operation can use to write output or read input
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.OperationConsole.In">
            <summary>
            Input stream
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.OperationConsole.Out">
            <summary>
            Output stream
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.OperationConsole.Error">
            <summary>
            Error stream
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.OperationConsole.Log">
            <summary>
            Log stream
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.OperationConsole.Debug(System.Int32,System.String,System.String)">
            <summary>
            Writes debug information to the console
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.OperationConsole.CancellationToken">
            <summary>
            Gets the cancelation token to be used to cancel the operation that is using the console
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.OperationConsole.WithCancelCallback(System.Action)">
            <summary>
            Returns a console that wraps this console, but it overrides the cancel
            operation, so instead of signaling the cancel token, it executes
            the provided action.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Execution.RemoteProcessConnection.IsReachable">
            <summary>
            If true, the remote process is either connected or connecting
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Execution.IMessageInterceptor.PreProcessMessage(MonoDevelop.Core.Execution.BinaryMessage)">
            <summary>
            Give a chance to an implementor to peek at messages before they are sent.
            </summary>
            <returns><c>true</c>, if message should sent, <c>false</c> if it should be discarded.</returns>
        </member>
        <member name="M:MonoDevelop.Core.FileService.IsFolderCaseSensitive(MonoDevelop.Core.FilePath)">
            <summary>
            Returns true if the folder is in a case sensitive file system
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.FileService.GetPhysicalFileName(MonoDevelop.Core.FilePath)">
            <summary>
            Gets the real name of a file. In case insensitive file systems the name may have a different case.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.FileService.RequestFileEdit(MonoDevelop.Core.FilePath,System.Boolean)">
            <summary>
            Requests permission for modifying a file
            </summary>
            <param name="fileName">The file to be modified</param>
            <param name="throwIfFails">If set to false, it will catch the exception that would've been thrown.</param>
            <remarks>This method must be called before trying to write any file. It throws an exception if permission is not granted.</remarks>
        </member>
        <member name="M:MonoDevelop.Core.FileService.SystemDirectoryRename(System.String,System.String)">
            <summary>
            Renames a directory
            </summary>
            <param name="sourceDir">Source directory</param>
            <param name="destDir">Destination directory</param>
            <remarks>
            It works like Directory.Move, but it supports changing the case of a directory name in case-insensitive file systems
            </remarks>
        </member>
        <member name="M:MonoDevelop.Core.FileService.RemoveDirectoryIfEmpty(System.String)">
            <summary>
            Removes the directory if it's empty.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.FileService.MakePathSeparatorsNative(System.String)">
            <summary>
            Makes the path separators native.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.ConfigurationProperty`1">
            <summary>
            The Property wrapper wraps a global property service value as an easy to use object.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.ConfigurationProperty`1.Set(`0)">
            <summary>
            Set the property to the specified value.
            </summary>
            <param name='newValue'>
            The new value.
            </param>
            <returns>
            true, if the property has changed, false otherwise.
            </returns>
        </member>
        <member name="P:MonoDevelop.Core.PropertyService.DataPath">
            <summary>
            Location of data files that are bundled with MonoDevelop itself.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.LoggingService.CreateLogFile(System.String)">
            <summary>
            Creates a session log file with the given identifier.
            </summary>
            <returns>A TextWriter, null if the file cannot be created.</returns>
        </member>
        <member name="M:MonoDevelop.Core.LoggingService.LogInternalError(System.Exception)">
            <summary>
            Reports that an unexpected error has occurred, but the IDE will continue executing.
            Error information is sent to the crash reporting service
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:MonoDevelop.Core.LoggingService.LogInternalError(System.String,System.Exception)">
            <summary>
            Reports that an unexpected error has occurred, but the IDE will continue executing.
            Error information is sent to the crash reporting service
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:MonoDevelop.Core.LoggingService.LogFatalError(System.String,System.Exception)">
            <summary>
            Reports that a fatal error has occurred, and that the IDE will shut down.
            Error information is sent to the crash reporting service
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Exception</param>
        </member>
        <member name="P:MonoDevelop.Core.Serialization.DataNode.IsDefaultValue">
            <summary>
            Gets or sets a value indicating whether this instance is default value.
            </summary>
            <remarks>This flag is set when an object is serialized using the IncludeDefaultValues or IncludeDeletedValues</remarks>
        </member>
        <member name="P:MonoDevelop.Core.Serialization.SerializationContext.IncludeDefaultValues">
            <summary>
            When set to true, properties with default values are serialized
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Serialization.SerializationContext.IncludeDeletedValues">
            <summary>
            When set to true, properties with default values are serialized, and properties that have
            been removed are serialized as a DataDeletedValue.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Serialization.DataDeletedNode">
            <summary>
            A data node that represents a value that has been deleted.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.MonoTargetRuntime.GetMonoExecutableForAssembly(System.String)">
            <summary>
            Get the Mono executable best matching the assembly architecture flags.
            </summary>
            <remarks>Returns a fallback Mono executable, if a match cannot be found.</remarks>
            <returns>The Mono executable that should be used to execute the assembly.</returns>
            <param name="assemblyPath">Assembly path.</param>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.DisplayName">
            <summary>
            Display name of the runtime. For example "The Mono Runtime 2.6"
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.Id">
            <summary>
            Unique identifier of this runtime. For example "Mono 2.6".
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.DisplayRuntimeName">
            <summary>
            Core display name of the runtime. For example "The Mono Runtime"
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.RuntimeId">
            <summary>
            Core identifier the runtime. For example, if there are several
            versions of Mono installed, each of them will have "Mono" as RuntimeId
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.Version">
            <summary>
            Version of the runtime.
            This string is strictly for displaying to the user or logging. It should never be used for version checks.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.IsRunning">
            <summary>
            Returns 'true' if this runtime is the one currently running MonoDevelop.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetExecutionHandler">
            <summary>
            Returns an IExecutionHandler which can be used to execute commands in this runtime.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.AssemblyContext">
            <summary>
            Returns an IAssemblyContext which can be used to discover assemblies through this runtime.
            It includes assemblies from directories manually registered by the user.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetRuntime.RuntimeAssemblyContext">
            <summary>
            Returns an IAssemblyContext which can be used to discover assemblies provided by this runtime
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetAssemblyDebugInfoFile(System.String)">
            <summary>
            Given an assembly file name, returns the corresponding debug information file name.
            (.mdb for Mono, .pdb for MS.NET)
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.ExecuteAssembly(System.String,System.String)">
            <summary>
            Executes an assembly using this runtime
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.ExecuteAssembly(System.String,System.String,MonoDevelop.Core.Assemblies.TargetFramework)">
            <summary>
            Executes an assembly using this runtime and the specified framework.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.ExecuteAssembly(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Executes an assembly using this runtime.
            </summary>
            <param name="pinfo">
            Information of the process to execute
            </param>
            <returns>
            The started process.
            </returns>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.ExecuteAssembly(System.Diagnostics.ProcessStartInfo,MonoDevelop.Core.Assemblies.TargetFramework)">
            <summary>
            Executes an assembly using this runtime and the specified framework.
            </summary>
            <param name="pinfo">
            Information of the process to execute
            </param>
            <param name="fx">
            Framework on which the assembly has to be executed.
            </param>
            <returns>
            The started process.
            </returns>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetToolsExecutionEnvironment(MonoDevelop.Core.Assemblies.TargetFramework)">
            <summary>
            Returns a list of environment variables that should be set when running tools using this runtime
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetToolPath(MonoDevelop.Core.Assemblies.TargetFramework,System.String)">
            <summary>
            Looks for the specified tool in this runtime. The name can be a script or a .exe.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetToolsPaths(MonoDevelop.Core.Assemblies.TargetFramework)">
            <summary>
            Returns a list of paths which can contain tools for this runtime.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetMSBuildBinPath(System.String)">
            <summary>
            Returns the MSBuild bin path for this runtime.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetMSBuildToolsPath(System.String)">
            <summary>
            Returns the MSBuild bin path for this runtime.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetMSBuildExtensionsPath">
            <summary>
            Returns the MSBuild extensions path.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.GetGacDirectories">
            <summary>
            Returns all GAC locations for this runtime.
            </summary>
        </member>
        <member name="E:MonoDevelop.Core.Assemblies.TargetRuntime.Initialized">
            <summary>
            This event is fired when the runtime has finished initializing. Runtimes are initialized
            in a background thread, so they are not guaranteed to be ready just after the IDE has
            finished loading. If the runtime is already initialized when the event is subscribed, then the
            subscribed handler will be automatically invoked.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.RegisterPackage(MonoDevelop.Core.Assemblies.SystemPackageInfo,System.String[])">
            <summary>
            Registers a package. It can be used by add-ins to register a package for a set of assemblies
            they provide.
            </summary>
            <param name="pinfo">
            Information about the package.
            </param>
            <param name="assemblyFiles">
            Assemblies that belong to the package
            </param>
            <returns>
            The registered package
            </returns>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.RegisterPackage(MonoDevelop.Core.Assemblies.SystemPackageInfo,System.Boolean,System.String[])">
            <summary>
            Registers a package.
            </summary>
            <param name="pinfo">
            Information about the package.
            </param>
            <param name="isInternal">
            Set to true if this package is provided by an add-in and is not installed in the system.
            </param>
            <param name="assemblyFiles">
            The assemblies of the package.
            </param>
            <returns>
            A <see cref="T:MonoDevelop.Core.Assemblies.SystemPackage"/>
            </returns>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetRuntime.IsInstalled(MonoDevelop.Core.Assemblies.TargetFramework)">
            <summary>
            Checks if a framework is installed in this runtime.
            </summary>
            <param name="fx">
            The runtime to check.
            </param>
            <returns>
            True if the framework is installed
            </returns>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.TargetFramework.CanReferenceAssembliesTargetingFramework(MonoDevelop.Core.Assemblies.TargetFramework)">
            <summary>
            Determines whether projects targeting this framework can reference assemblies targeting the framework specified by fx.
            </summary>
            <returns><c>true</c> if projects targeting this framework can reference assemblies targeting the framework specified by fx; otherwise, <c>false</c>.</returns>
            <param name="fx">The target framework</param>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.SystemAssemblyService.GetAssemblyReferences(System.String)">
            <summary>
            Simply get all assembly reference names from an assembly given it's file name.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Assemblies.SystemAssemblyService.GetAssemblyManifestResources(System.String)">
            <summary>
            Simply get all assembly manifest resources from an assembly given it's file name.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.MonoRuntimeInfo.MonoVersion">
            <summary>
            This string is strictly for displaying to the user or logging. It should never be used for version checks.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Assemblies.TargetFrameworkMoniker">
            <summary>
            Unique identifier for a target framework.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetFrameworkMoniker.Identifier">
            <summary>
            The root identifier of the framework, e.g. ".NETFramework" or "Silverlight"
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetFrameworkMoniker.Version">
            <summary>
            The version of the framework.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Assemblies.TargetFrameworkMoniker.Profile">
            <summary>
            Optional. A named subset of a particular framework version, e.g. "Client".
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.StringParsing.IStringTagProvider.GetTags(System.Type)">
            <summary>
            Returns a list of tags that this provider can extract from objects
            of the provided type. If the provided type can be null, in which
            case it must return global tags (that is, tags which are not attached
            to a particular object).
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.StringParsing.IStringTagProvider.GetTagValue(System.Object,System.String)">
            <summary>
            Returns the value of a tag. The instance is an object of a type supported
            by the provider, that is, the GetTags method returned tags for the object type.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.LaneStringMatcher.GetMatch(System.String)">
            <summary>
            Gets the match indices.
            </summary>
            <returns>
            The indices in the text which are matched by our filter.
            </returns>
            <param name='text'>
            The text to match.
            </param>
        </member>
        <member name="M:MonoDevelop.Core.Text.BacktrackingStringMatcher.GetMatch(System.String)">
            <summary>
            Gets the match indices.
            </summary>
            <returns>
            The indices in the text which are matched by our filter.
            </returns>
            <param name='text'>
            The text to match.
            </param>
        </member>
        <member name="T:MonoDevelop.Core.Text.ISegment">
            <summary>
            An (Offset,Length)-pair.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.ISegment.Offset">
            <summary>
            Gets the start offset of the segment.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.ISegment.Length">
            <summary>
            Gets the length of the segment.
            </summary>
            <remarks>For line segments (IDocumentLine), the length does not include the line delimeter.</remarks>
        </member>
        <member name="P:MonoDevelop.Core.Text.ISegment.EndOffset">
            <summary>
            Gets the end offset of the segment.
            </summary>
            <remarks>EndOffset = Offset + Length;</remarks>
        </member>
        <member name="T:MonoDevelop.Core.Text.TextSegment">
            <summary>
            An (Offset, Length) pair representing a text span.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.TextSegment.Offset">
            <summary>
             Gets the start offset of the segment. 
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="P:MonoDevelop.Core.Text.TextSegment.Length">
            <summary>
            Gets the length of the segment. 
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:MonoDevelop.Core.Text.TextSegment.EndOffset">
            <summary>
            Gets the end offset of the segment. 
            </summary>
            <remarks>
            EndOffset = Offset + Length;
            </remarks>
            <value>
            The end offset.
            </value>
        </member>
        <member name="P:MonoDevelop.Core.Text.TextSegment.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
            <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoDevelop.Core.Text.TextSegment.IsInvalid">
            <summary>
            Gets a value indicating whether this instance is invalid.
            </summary>
            <value>
            <c>true</c> if this instance is invalid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextSegment.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoDevelop.Core.Text.TextSegment"/> struct.
            </summary>
            <param name='offset'>
            The offset of the segment.
            </param>
            <param name='length'>
            The length of the segment.
            </param>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextSegment.IsInside(System.Int32)">
            <summary>
            Determines whether this instance is inside the specified offset. 
            </summary>
            <returns>
            <c>true</c> if this instance is inside the specified offset (upper bound inclusive); otherwise, <c>false</c>.
            </returns>
            <param name='offset'>
            The offset offset.
            </param>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextSegment.Equals(MonoDevelop.Core.Text.TextSegment)">
            <summary>
            Determines whether the specified <see cref="T:MonoDevelop.Core.Text.TextSegment"/> is equal to the current <see cref="T:MonoDevelop.Core.Text.TextSegment"/>.
            </summary>
            <param name='other'>
            The <see cref="T:MonoDevelop.Core.Text.TextSegment"/> to compare with the current <see cref="T:MonoDevelop.Core.Text.TextSegment"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:MonoDevelop.Core.Text.TextSegment"/> is equal to the current
            <see cref="T:MonoDevelop.Core.Text.TextSegment"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextSegment.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:MonoDevelop.Core.Text.TextSegment"/>.
            </summary>
            <param name='obj'>
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:MonoDevelop.Core.Text.TextSegment"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:MonoDevelop.Core.Text.TextSegment"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextSegment.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:MonoDevelop.Core.Text.TextSegment"/> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextSegment.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:MonoDevelop.Core.Text.TextSegment"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:MonoDevelop.Core.Text.TextSegment"/>.
            </returns>
        </member>
        <member name="T:MonoDevelop.Core.Text.AbstractSegment">
            <summary>
            An abstract implementation of the ISegment (Offset, Length) pair representing a text span.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.AbstractSegment.Offset">
            <summary>
             Gets the start offset of the segment. 
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="P:MonoDevelop.Core.Text.AbstractSegment.Length">
            <summary>
            Gets the length of the segment. 
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:MonoDevelop.Core.Text.AbstractSegment.EndOffset">
            <summary>
            Gets the end offset of the segment. 
            </summary>
            <remarks>
            EndOffset = Offset + Length;
            </remarks>
            <value>
            The end offset.
            </value>
        </member>
        <member name="P:MonoDevelop.Core.Text.AbstractSegment.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
            <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoDevelop.Core.Text.AbstractSegment.IsInvalid">
            <summary>
            Gets a value indicating whether this instance is invalid.
            </summary>
            <value>
            <c>true</c> if this instance is invalid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoDevelop.Core.Text.AbstractSegment.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoDevelop.Core.Text.TextSegment"/> struct.
            </summary>
            <param name='offset'>
            The offset of the segment.
            </param>
            <param name='length'>
            The length of the segment.
            </param>
        </member>
        <member name="M:MonoDevelop.Core.Text.AbstractSegment.#ctor(MonoDevelop.Core.Text.ISegment)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoDevelop.Core.Text.TextSegment"/> struct.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Text.ISegmentExtensions">
            <summary>
            Extension methods for <see cref="T:MonoDevelop.Core.Text.ISegment"/>.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.ISegmentExtensions.Contains(MonoDevelop.Core.Text.ISegment,System.Int32,System.Int32)">
            <summary>
            Gets whether <paramref name="segment"/> fully contains the specified segment.
            </summary>
            <remarks>
            Use <c>segment.Contains(offset, 0)</c> to detect whether a segment (end inclusive) contains offset;
            use <c>segment.Contains(offset, 1)</c> to detect whether a segment (end exclusive) contains offset.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Core.Text.ISegmentExtensions.Contains(MonoDevelop.Core.Text.ISegment,MonoDevelop.Core.Text.ISegment)">
            <summary>
            Gets whether <paramref name="segment"/> fully contains the specified segment.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.ISegmentExtensions.Contains(MonoDevelop.Core.Text.ISegment,System.Int32)">
            <summary>
            Gets whether the offset is within the <paramref name="segment"/>.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.ISegmentExtensions.IsInside(MonoDevelop.Core.Text.ISegment,System.Int32)">
            <summary>
            Gets whether the offset is within the <paramref name="segment"/>.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.ISegmentExtensions.OverlapsWith(MonoDevelop.Core.Text.ISegment,MonoDevelop.Core.Text.ISegment)">
            <summary>
            Determines whether <paramref name="other"/> overlaps this span. Two spans are considered to overlap 
            if they have positions in common and neither is empty. Empty spans do not overlap with any 
            other span.
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.UnicodeNewline.LF">
            <summary>
            Line Feed, U+000A
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.UnicodeNewline.CR">
            <summary>
            Carriage Return, U+000D
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.UnicodeNewline.NEL">
            <summary>
            Next Line, U+0085
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.UnicodeNewline.VT">
            <summary>
            Vertical Tab, U+000B
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.UnicodeNewline.FF">
            <summary>
            Form Feed, U+000C
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.UnicodeNewline.LS">
            <summary>
            Line Separator, U+2028
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.UnicodeNewline.PS">
            <summary>
            Paragraph Separator, U+2029
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Text.NewLine">
            <summary>
            Defines unicode new lines according to  Unicode Technical Report #13
            http://www.unicode.org/standard/reports/tr13/tr13-5.html
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.NewLine.CR">
            <summary>
            Carriage Return, U+000D
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.NewLine.LF">
            <summary>
            Line Feed, U+000A
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.NewLine.NEL">
            <summary>
            Next Line, U+0085
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.NewLine.VT">
            <summary>
            Vertical Tab, U+000B
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.NewLine.FF">
            <summary>
            Form Feed, U+000C
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.NewLine.LS">
            <summary>
            Line Separator, U+2028
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.NewLine.PS">
            <summary>
            Paragraph Separator, U+2029
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.NewLine.GetDelimiterLength(System.Char,System.Func{System.Char})">
            <summary>
            Determines if a char is a new line delimiter.
            </summary>
            <returns>0 == no new line, otherwise it returns either 1 or 2 depending of the length of the delimiter.</returns>
            <param name="curChar">The current character.</param>
            <param name="nextChar">A callback getting the next character (may be null).</param>
        </member>
        <member name="M:MonoDevelop.Core.Text.NewLine.GetDelimiterLength(System.Char,System.Char)">
            <summary>
            Determines if a char is a new line delimiter.
            </summary>
            <returns>0 == no new line, otherwise it returns either 1 or 2 depending of the length of the delimiter.</returns>
            <param name="curChar">The current character.</param>
            <param name="nextChar">The next character (if != LF then length will always be 0 or 1).</param>
        </member>
        <member name="M:MonoDevelop.Core.Text.NewLine.TryGetDelimiterLengthAndType(System.Char,System.Int32@,MonoDevelop.Core.Text.UnicodeNewline@,System.Func{System.Char})">
            <summary>
            Determines if a char is a new line delimiter.
            </summary>
            <returns>0 == no new line, otherwise it returns either 1 or 2 depending of the length of the delimiter.</returns>
            <param name="curChar">The current character.</param>
            <param name = "length">The length of the delimiter</param>
            <param name = "type">The type of the delimiter</param>
            <param name="nextChar">A callback getting the next character (may be null).</param>
        </member>
        <member name="M:MonoDevelop.Core.Text.NewLine.TryGetDelimiterLengthAndType(System.Char,System.Int32@,MonoDevelop.Core.Text.UnicodeNewline@,System.Char)">
            <summary>
            Determines if a char is a new line delimiter.
            </summary>
            <returns>0 == no new line, otherwise it returns either 1 or 2 depending of the length of the delimiter.</returns>
            <param name="curChar">The current character.</param>
            <param name = "length">The length of the delimiter</param>
            <param name = "type">The type of the delimiter</param>
            <param name="nextChar">The next character (if != LF then length will always be 0 or 1).</param>
        </member>
        <member name="M:MonoDevelop.Core.Text.NewLine.GetDelimiterType(System.Char,System.Func{System.Char})">
            <summary>
            Gets the new line type of a given char/next char.
            </summary>
            <returns>0 == no new line, otherwise it returns either 1 or 2 depending of the length of the delimiter.</returns>
            <param name="curChar">The current character.</param>
            <param name="nextChar">A callback getting the next character (may be null).</param>
        </member>
        <member name="M:MonoDevelop.Core.Text.NewLine.GetDelimiterType(System.Char,System.Char)">
            <summary>
            Gets the new line type of a given char/next char.
            </summary>
            <returns>0 == no new line, otherwise it returns either 1 or 2 depending of the length of the delimiter.</returns>
            <param name="curChar">The current character.</param>
            <param name="nextChar">The next character (if != LF then length will always be 0 or 1).</param>
        </member>
        <member name="M:MonoDevelop.Core.Text.NewLine.IsNewLine(System.Char)">
            <summary>
            Determines if a char is a new line delimiter. 
            
            Note that the only 2 char wide new line is CR LF and both chars are new line
            chars on their own. For most cases GetDelimiterLength is the better choice.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.NewLine.GetString(MonoDevelop.Core.Text.UnicodeNewline)">
            <summary>
            Gets the new line as a string.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Text.ITextSource">
            <summary>
            A read-only view on a (potentially mutable) text source.
            The IDocument interface derives from this interface.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.ITextSource.Version">
            <summary>
            Gets a version identifier for this text source.
            Returns null for unversioned text sources.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.ITextSource.UseBOM">
            <summary>
            Determines if a byte order mark was read or is going to be written.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.ITextSource.Encoding">
            <summary>
            Encoding of the text that was read from or is going to be saved to.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.ITextSource.Length">
            <summary>
            Gets the total text length.
            </summary>
            <returns>The length of the text, in characters.</returns>
            <remarks>This is the same as Text.Length, but is more efficient because
             it doesn't require creating a String object.</remarks>
        </member>
        <member name="P:MonoDevelop.Core.Text.ITextSource.Text">
            <summary>
            Gets the whole text as string.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.ITextSource.Item(System.Int32)">
            <summary>
            Gets a character at the specified position in the document.
            </summary>
            <paramref name="offset">The index of the character to get.</paramref>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to TextLength-1).</exception>
            <returns>The character at the specified position.</returns>
            <remarks>This is the same as Text[offset], but is more efficient because
             it doesn't require creating a String object.</remarks>
        </member>
        <member name="M:MonoDevelop.Core.Text.ITextSource.GetCharAt(System.Int32)">
            <summary>
            Gets a character at the specified position in the document.
            </summary>
            <paramref name="offset">The index of the character to get.</paramref>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to TextLength-1).</exception>
            <returns>The character at the specified position.</returns>
            <remarks>This is the same as Text[offset], but is more efficient because
             it doesn't require creating a String object.</remarks>
        </member>
        <member name="M:MonoDevelop.Core.Text.ITextSource.GetTextAt(System.Int32,System.Int32)">
            <summary>
            Retrieves the text for a portion of the document.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
            <remarks>This is the same as Text.Substring, but is more efficient because
             it doesn't require creating a String object for the whole document.</remarks>
        </member>
        <member name="M:MonoDevelop.Core.Text.ITextSource.CreateReader">
            <summary>
            Creates a new TextReader to read from this text source.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.ITextSource.CreateReader(System.Int32,System.Int32)">
            <summary>
            Creates a new TextReader to read from this text source.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.ITextSource.WriteTextTo(System.IO.TextWriter)">
            <summary>
            Writes the text from this document into the TextWriter.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.ITextSource.WriteTextTo(System.IO.TextWriter,System.Int32,System.Int32)">
            <summary>
            Writes the text from this document into the TextWriter.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.ITextSource.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies text from the source index to a destination array at destinationIndex.
            </summary>
            <param name="sourceIndex">The start offset copied from.</param>
            <param name="destination">The destination array copied to.</param>
            <param name="destinationIndex">The destination index copied to.</param>
            <param name="count">The number of characters to be copied.</param>
        </member>
        <member name="M:MonoDevelop.Core.Text.ITextSource.CreateSnapshot">
            <summary>
            Creates an immutable snapshot of this text source.
            Unlike all other methods in this interface, this method is thread-safe.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.ITextSource.CreateSnapshot(System.Int32,System.Int32)">
            <summary>
            Creates an immutable snapshot of a part of this text source.
            Unlike all other methods in this interface, this method is thread-safe.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextSourceExtension.GetTextAt(MonoDevelop.Core.Text.ITextSource,MonoDevelop.Core.Text.ISegment)">
            <summary>
            Retrieves the text for a portion of the document.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextSourceExtension.WriteTextTo(MonoDevelop.Core.Text.ITextSource,System.String)">
            <summary>
            Writes the text from this document into a file.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextSourceExtension.WriteTextTo(MonoDevelop.Core.Text.ITextSource,System.IO.TextWriter,MonoDevelop.Core.Text.ISegment)">
            <summary>
            Writes the text from this document into the TextWriter.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextSourceExtension.CreateReader(MonoDevelop.Core.Text.ITextSource,MonoDevelop.Core.Text.ISegment)">
            <summary>
            Creates a new TextReader to read from this text source.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextSourceExtension.CreateSnapshot(MonoDevelop.Core.Text.ITextSource,MonoDevelop.Core.Text.ISegment)">
            <summary>
            Creates an immutable snapshot of a part of this text source.
            Unlike all other methods in this interface, this method is thread-safe.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Text.TextChangeEventArgs">
            <summary>
            Describes a change of the document text.
            This class is thread-safe.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.TextChangeEventArgs.Offset">
            <summary>
            The offset at which the change occurs.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.TextChangeEventArgs.RemovedText">
            <summary>
            The text that was removed.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.TextChangeEventArgs.RemovalLength">
            <summary>
            The number of characters removed.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.TextChangeEventArgs.InsertedText">
            <summary>
            The text that was inserted.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.TextChangeEventArgs.InsertionLength">
            <summary>
            The number of characters inserted.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.TextChangeEventArgs.ChangeDelta">
            <summary>
            InsertionLength - RemovalLength
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextChangeEventArgs.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new TextChangeEventArgs object.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextChangeEventArgs.#ctor(System.Int32,MonoDevelop.Core.Text.ITextSource,MonoDevelop.Core.Text.ITextSource)">
            <summary>
            Creates a new TextChangeEventArgs object.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextChangeEventArgs.GetNewOffset(System.Int32)">
            <summary>
            Gets the new offset where the specified offset moves after this document change.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextChangeEventArgs.Invert">
            <summary>
            Creates TextChangeEventArgs for the reverse change.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Text.StringTextSource">
            <summary>
            Implements the ITextSource interface using a string.
            Note that objects from this class are immutable.
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Text.StringTextSource.Empty">
            <summary>
            Gets a text source containing the empty string.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.StringTextSource.UseBOM">
            <summary>
            Determines if a byte order mark was read or is going to be written.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.StringTextSource.Encoding">
            <summary>
            Encoding of the text that was read from or is going to be saved to.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.StringTextSource.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a new StringTextSource with the given text.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.StringTextSource.#ctor(System.String,MonoDevelop.Core.Text.ITextSourceVersion,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a new StringTextSource with the given text.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.StringTextSource.Version">
            <inheritdoc/>
        </member>
        <member name="P:MonoDevelop.Core.Text.StringTextSource.Length">
            <inheritdoc/>
        </member>
        <member name="P:MonoDevelop.Core.Text.StringTextSource.Text">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Core.Text.StringTextSource.CreateSnapshot">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Core.Text.StringTextSource.CreateSnapshot(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Core.Text.StringTextSource.GetCharAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Core.Text.StringTextSource.GetTextAt(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Core.Text.StringTextSource.CreateReader">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Core.Text.StringTextSource.CreateReader(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Core.Text.StringTextSource.WriteTextTo(System.IO.TextWriter)">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Core.Text.StringTextSource.WriteTextTo(System.IO.TextWriter,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MonoDevelop.Core.Text.StringTextSource.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:MonoDevelop.Core.Text.TextFileUtility">
            <summary>
            This class handles text input from files, streams and byte arrays with auto-detect encoding.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextFileUtility.GetBuffer(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Returns a byte array containing the text encoded by a specified encoding &amp; bom.
            </summary>
            <param name="text">The text to encode.</param>
            <param name="encoding">The encoding.</param>
            <param name="hadBom">If set to <c>true</c> a bom will be prepended.</param>
        </member>
        <member name="T:MonoDevelop.Core.Text.TextFileUtility.UnicodeVerifier">
            <summary>
            Unicode verifier
            </summary> 
        </member>
        <member name="T:MonoDevelop.Core.Text.TextFileUtility.WindowsCodePageVerifier">
            <summary>
            Code page 1252 was the long time default on windows. This encoding is a superset of ISO 8859-1.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.TextFileUtility.WindowsCodePageVerifier.WindowsCodePage">
            <summary>
            Try to guess the windows code page using the default encoding, on non windows system default
            to 1252 (western encoding).
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Text.TextFileUtility.CodePage858Verifier">
            <summary>
            Code page 858 supports old DOS style files extended with the euro sign.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Text.TextFileUtility.GB18030CodePageVerifier">
            <summary>
            Try to detect chinese encoding.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Text.ITextSourceVersion">
            <summary>
            Represents a version identifier for a text source.
            </summary>
            <remarks>
            Verions can be used to efficiently detect whether a document has changed and needs reparsing;
            or even to implement incremental parsers.
            It is a separate class from ITextSource to allow the GC to collect the text source while
            the version checkpoint is still in use.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Core.Text.ITextSourceVersion.BelongsToSameDocumentAs(MonoDevelop.Core.Text.ITextSourceVersion)">
            <summary>
            Gets whether this checkpoint belongs to the same document as the other checkpoint.
            </summary>
            <remarks>
            Returns false when given <c>null</c>.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Core.Text.ITextSourceVersion.CompareAge(MonoDevelop.Core.Text.ITextSourceVersion)">
            <summary>
            Compares the age of this checkpoint to the other checkpoint.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <exception cref="T:System.ArgumentException">Raised if 'other' belongs to a different document than this version.</exception>
            <returns>-1 if this version is older than <paramref name="other"/>.
            0 if <c>this</c> version instance represents the same version as <paramref name="other"/>.
            1 if this version is newer than <paramref name="other"/>.</returns>
        </member>
        <member name="M:MonoDevelop.Core.Text.ITextSourceVersion.GetChangesTo(MonoDevelop.Core.Text.ITextSourceVersion)">
            <summary>
            Gets the changes from this checkpoint to the other checkpoint.
            If 'other' is older than this checkpoint, reverse changes are calculated.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <exception cref="T:System.ArgumentException">Raised if 'other' belongs to a different document than this checkpoint.</exception>
        </member>
        <member name="M:MonoDevelop.Core.Text.ITextSourceVersion.MoveOffsetTo(MonoDevelop.Core.Text.ITextSourceVersion,System.Int32)">
            <summary>
            Calculates where the offset has moved in the other buffer version.
            </summary>
            <exception cref="T:System.ArgumentException">Raised if 'other' belongs to a different document than this checkpoint.</exception>
        </member>
        <member name="T:MonoDevelop.Core.Text.TextSourceVersionProvider">
            <summary>
            Provides ITextSourceVersion instances.
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.Text.TextSourceVersionProvider.CurrentVersion">
            <summary>
            Gets the current version.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Text.TextSourceVersionProvider.AppendChange(MonoDevelop.Core.Text.TextChangeEventArgs)">
            <summary>
            Replaces the current version with a new version.
            </summary>
            <param name="change">Change from current version to new version</param>
        </member>
        <member name="P:MonoDevelop.Core.FilePath.CanonicalPath">
            <summary>
            Returns a path in standard form, which can be used to be compared
            for equality with other canonical paths. It is similar to FullPath,
            but unlike FullPath, the directory "/a/b" is considered equal to "/a/b/"
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.FilePath.ChangeName(System.String)">
            <summary>
            Returns a file path with the name changed to the provided name, but keeping the extension
            </summary>
            <returns>The new file path</returns>
            <param name="newName">New file name</param>
        </member>
        <member name="M:MonoDevelop.Core.FilePath.Build(System.String[])">
            <summary>
            Builds a path by combining all provided path sections
            </summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.CacheDir">
            <summary>Location for cached data that can be regenerated.</summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.ConfigDir">
            <summary>Location for current preferences/settings.</summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.LocalConfigDir">
            <summary>Preferences/settings specific to the local machine.</summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.UserDataRoot">
            <summary>User-visible root location for user-created data files such as templates, snippets and color schemes.</summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.LogDir">
            <summary>Location for log files.</summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.LocalInstallDir">
            <summary>Location for files installed from external sources.</summary>
        </member>
        <member name="P:MonoDevelop.Core.UserProfile.TempDir">
            <summary>Location for temporary files.</summary>
        </member>
        <member name="M:MonoDevelop.Core.UserProfile.GetLocation(MonoDevelop.Core.UserDataKind)">
            <summary>Gets a location by its ID.</summary>
        </member>
        <member name="M:MonoDevelop.Core.UserProfile.ForTest(System.String,MonoDevelop.Core.FilePath)">
            <summary>
            Creates locations in a specific folder, for testing.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.BrandingService">
            <summary>
            Access to branding information. Only the ApplicationName is guaranteed to be non-null.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.WebRequestHelper">
            <summary>
            Helper for making web requests with support for authenticated proxies.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.WebRequestHelper.GetResponseAsync(System.Func{System.Net.HttpWebRequest},System.Action{System.Net.HttpWebRequest},System.Threading.CancellationToken)">
            <summary>
            Gets the web response, using the <see cref="P:MonoDevelop.Core.WebRequestHelper.ProxyAuthenticationHandler"/> to handle proxy authentication
            if necessary.
            </summary>
            <returns>The response.</returns>
            <param name="createRequest">Callback for creating the request.</param>
            <param name="prepareRequest">Callback for preparing the request, e.g. writing the request stream.</param>
            <param name="token">Cancellation token.</param>
            <remarks>
            Keeps sending requests until a response code that doesn't require authentication happens or if the request
            requires authentication and the user has stopped trying to enter them (i.e. they hit cancel when they are prompted).
            </remarks>
        </member>
        <member name="M:MonoDevelop.Core.WebRequestHelper.GetResponse(System.Func{System.Net.HttpWebRequest},System.Action{System.Net.HttpWebRequest},System.Threading.CancellationToken)">
            <summary>
            Gets the web response, using the <see cref="P:MonoDevelop.Core.WebRequestHelper.ProxyAuthenticationHandler"/> to handle proxy authentication
            if necessary.
            </summary>
            <returns>The response.</returns>
            <param name="createRequest">Callback for creating the request.</param>
            <param name="prepareRequest">Callback for preparing the request, e.g. writing the request stream.</param>
            <param name="token">Cancellation token.</param>
            <remarks>
            Keeps sending requests until a response code that doesn't require authentication happens or if the request
            requires authentication and the user has stopped trying to enter them (i.e. they hit cancel when they are prompted).
            </remarks>
        </member>
        <member name="M:MonoDevelop.Core.WebRequestHelper.IsCannotReachInternetError(System.Net.WebExceptionStatus)">
            <summary>
            Determines whether an error code is likely to have been caused by internet reachability problems.
            </summary>
        </member>
        <member name="T:MonoDevelop.Core.Web.IProxyAuthenticationHandler">
            <summary>Proxy authentication handler.</summary>
        </member>
        <member name="M:MonoDevelop.Core.Web.IProxyAuthenticationHandler.AddProxyToCache(System.Net.IWebProxy)">
            <summary>
            Adds a proxy to the cache.
            </summary>
            <param name="proxy">Proxy.</param>
        </member>
        <member name="M:MonoDevelop.Core.Web.IProxyAuthenticationHandler.GetCachedProxy(System.Uri)">
            <summary>
            Gets a cached proxy for the Url, if available.
            </summary>
            <returns>The cached proxy.</returns>
            <param name="uri">URI for which the proxy will be used.</param>
        </member>
        <member name="M:MonoDevelop.Core.Web.IProxyAuthenticationHandler.AddCredentialsToCache(System.Uri,System.Net.ICredentials)">
            <summary>
            Adds credentials to the cache.
            </summary>
            <param name="uri">URI for which the credentials are valid.</param>
            <param name="credentials">Credentials.</param>
        </member>
        <member name="M:MonoDevelop.Core.Web.IProxyAuthenticationHandler.GetCachedCredentials(System.Uri)">
            <summary>
            Gets cached credentials, if available.
            </summary>
            <returns>The cached credentials.</returns>
            <param name="uri">URI for which the credentials will be used.</param>
        </member>
        <member name="M:MonoDevelop.Core.Web.IProxyAuthenticationHandler.GetCredentialsFromUser(System.Net.HttpWebRequest,MonoDevelop.Core.Web.CredentialType,System.Boolean)">
            <summary>
            Gets credentials from user.
            </summary>
            <returns>The credentials from user.</returns>
            <param name="request">Request for which the credentials will be used.</param>
            <param name="credentialType">Type of the credentials.</param>
            <param name="retrying">Whether retrying.</param>
        </member>
        <member name="T:MonoDevelop.Core.Web.ICredentialProvider">
            <summary>
            This interface represents the basic interface that one needs to implement in order to
            support repository authentication. 
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Web.ICredentialProvider.GetCredentials(System.Uri,System.Net.IWebProxy,MonoDevelop.Core.Web.CredentialType,System.Boolean)">
            <summary>
            Returns CredentialState state that let's the consumer know if ICredentials
            were discovered by the ICredentialProvider. The credentials argument is then
            populated with the discovered valid credentials that can be used for the given Uri.
            The proxy instance if passed will be used to ensure that the request goes through the proxy
            to ensure successful connection to the destination Uri.
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Web.ProxyCache.originalSystemProxy">
            <summary>
            Capture the default System Proxy so that it can be re-used by the IProxyFinder
            because we can't rely on WebRequest.DefaultWebProxy since someone can modify the DefaultWebProxy
            property and we can't tell if it was modified and if we are still using System Proxy Settings or not.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Web.ProxyCache.IsSystemProxySet(System.Uri)">
            <summary>
            Return true or false if connecting through a proxy server
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:MonoDevelop.Core.Web.RequestHelper">
            <summary>
            This class is used to keep sending requests until a response code that doesn't require
            authentication happens or if the request requires authentication and
            the user has stopped trying to enter them (i.e. they hit cancel when they are prompted).
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Web.STSAuthHelper.STSEndPointHeader">
            <summary>
            Response header that specifies the WSTrust13 Windows Transport endpoint.
            </summary>
            <remarks>
            TODO: Is there a way to discover this \ negotiate this endpoint?
            </remarks>
        </member>
        <member name="F:MonoDevelop.Core.Web.STSAuthHelper.STSRealmHeader">
            <summary>
            Response header that specifies the realm to authenticate for. In most cases this would be the gallery we are going up against.
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.Web.STSAuthHelper.STSTokenHeader">
            <summary>
            Request header that contains the SAML token.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Web.STSAuthHelper.PrepareSTSRequest(System.Net.WebRequest)">
            <summary>
            Adds the SAML token as a header to the request if it is already cached for this host.
            </summary>
        </member>
        <member name="M:MonoDevelop.Core.Web.STSAuthHelper.TryRetrieveSTSToken(System.Uri,MonoDevelop.Core.Web.IHttpWebResponse)">
            <summary>
            Attempts to retrieve a SAML token if the response indicates that server requires STS-based auth.
            </summary>
            <param name="requestUri">The feed URI we were connecting to.</param>
            <param name="response">The 401 response we receieved from the server.</param>
            <returns>True if we were able to successfully retrieve a SAML token from the STS specified in the response headers.</returns>
        </member>
        <member name="F:MonoDevelop.Core.FileWriteableState.Writeable">
            <summary>
            File can be written
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.FileWriteableState.ReadOnly">
            <summary>
            File is read only but can be made writeable
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.FileWriteableState.Locked">
            <summary>
            File is locked it can't be written to.
            </summary>
        </member>
        <member name="F:MonoDevelop.Core.FileWriteableState.NotExistant">
            <summary>
            File wasn't found
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItemChangeEventArgs.ReplacedItem">
            <summary>
            When Reloading is true, it returns the original solution item that is being reloaded
            </summary>
            <value>The replaced item.</value>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectConfiguration.Properties">
            <summary>
            Property set where the properties for this configuration are defined.
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.Project">
            <summary>
            A project
            </summary>
            <remarks>
            This is the base class for MonoDevelop projects. A project is a solution item which has a list of
            source code files and which can be built to generate an output.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.PerformGeneratorAsync(MonoDevelop.Projects.ConfigurationSelector,System.String)">
            <summary>
            Runs the generator target and sends file change notifications if any files were modified, returns the build result
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.PerformGeneratorAsync(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector,System.String)">
            <summary>
            Runs the generator target and sends file change notifications if any files were modified, returns the build result
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetProjectFileTimestamps(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Returns a list containing FileInfo for all the source files in the project
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.SendFileChangeNotifications(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector,System.Collections.Generic.List{System.IO.FileInfo})">
            <summary>
            Sends a file change notification via FileService for any file that has changed since the timestamps in beforeFileInfo
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetSourceFilesAsync(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the source files that are included in the project, including any that are added by `CoreCompileDependsOn`
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetSourceFilesAsync(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the source files that are included in the project, including any that are added by `CoreCompileDependsOn`
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnGetSourceFiles(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the source files that are included in the project, including any that are added by `CoreCompileDependsOn`
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetCompileItemsFromCoreCompileDependenciesAsync(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the list of files that are included as Compile items from the evaluation of the CoreCompile dependecy targets
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnPrepareForEvaluation(MonoDevelop.Projects.MSBuild.MSBuildProject)">
            <summary>
            Called just after the MSBuild project is loaded but before it is evaluated.
            </summary>
            <param name="project">The project</param>
            <remarks>
            Subclasses can override this method to transform the MSBuild project before it is evaluated.
            For example, it can be used to add or remove imports, or to set custom values for properties.
            Changes done in the MSBuild files are not saved.
            </remarks>
        </member>
        <member name="F:MonoDevelop.Projects.Project.description">
            <summary>
            Description of the project.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.IsCompileable(System.String)">
            <summary>
            Determines whether the provided file can be as part of this project
            </summary>
            <returns>
            <c>true</c> if the file can be compiled; otherwise, <c>false</c>.
            </returns>
            <param name='fileName'>
            File name
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.IsCompileBuildAction(System.String)">
            <summary>
            Determines whether the provided build action is a compile action
            </summary>
            <returns><c>true</c> if this instance is compile build action the specified buildAction; otherwise, <c>false</c>.</returns>
            <param name="buildAction">Build action.</param>
        </member>
        <member name="P:MonoDevelop.Projects.Project.Files">
            <summary>
            Files of the project
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetTypeTags">
            <summary>
            Gets the project type and its base types.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Project.StockIcon">
            <summary>
            Gets or sets the icon of the project.
            </summary>
            <value>
            The stock icon.
            </value>
        </member>
        <member name="P:MonoDevelop.Projects.Project.SupportedLanguages">
            <summary>
            List of languages that this project supports
            </summary>
            <value>
            The identifiers of the supported languages.
            </value>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetDefaultBuildAction(System.String)">
            <summary>
            Gets the default build action for a file
            </summary>
            <returns>
            The default build action.
            </returns>
            <param name='fileName'>
            File name.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetProjectFile(System.String)">
            <summary>
            Gets a project file.
            </summary>
            <returns>
            The project file.
            </returns>
            <param name='fileName'>
            File name.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.IsFileInProject(System.String)">
            <summary>
            Determines whether a file belongs to this project
            </summary>
            <param name='fileName'>
            File name
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetBuildActions">
            <summary>
            Gets a list of build actions supported by this project
            </summary>
            <remarks>
            Common actions are grouped at the top, separated by a "--" entry *IF* there are 
            more "uncommon" actions than "common" actions
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnGetStandardBuildActions">
            <summary>
            Gets a list of standard build actions.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnGetCommonBuildActions">
            <summary>
            Gets a list of common build actions (common actions are shown first in the project build action list)
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.RunTarget(MonoDevelop.Core.ProgressMonitor,System.String,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.TargetEvaluationContext)">
            <summary>
            Runs a build or execution target.
            </summary>
            <returns>
            The result of the operation
            </returns>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='target'>
            Name of the target
            </param>
            <param name='configuration'>
            Configuration to use to run the target
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnRunTarget(MonoDevelop.Core.ProgressMonitor,System.String,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.TargetEvaluationContext)">
            <summary>
            Runs a build or execution target.
            </summary>
            <returns>
            The result of the operation
            </returns>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='target'>
            Name of the target
            </param>
            <param name='configuration'>
            Configuration to use to run the target
            </param>
            <remarks>
            Subclasses can override this method to provide a custom implementation of project operations such as
            build or clean. The default implementation delegates the execution to the more specific OnBuild
            and OnClean methods, or to the item handler for other targets.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.CheckUseMSBuildEngine(MonoDevelop.Projects.ConfigurationSelector,System.Boolean)">
            <summary>Whether to use the MSBuild engine for the specified item.</summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.AddFile(System.String)">
            <summary>
            Adds a file to the project
            </summary>
            <returns>
            The file instance.
            </returns>
            <param name='filename'>
            Absolute path to the file.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.AddFile(System.String,System.String)">
            <summary>
            Adds a file to the project
            </summary>
            <returns>
            The file instance.
            </returns>
            <param name='filename'>
            Absolute path to the file.
            </param>
            <param name='buildAction'>
            Build action to assign to the file.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.AddFile(MonoDevelop.Projects.ProjectFile)">
            <summary>
            Adds a file to the project
            </summary>
            <param name='projectFile'>
            The file.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.AddDirectory(System.String)">
            <summary>
            Adds a directory to the project.
            </summary>
            <returns>
            The directory instance.
            </returns>
            <param name='relativePath'>
            Relative path of the directory.
            </param>
            <remarks>
            The directory is created if it doesn't exist
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.CopySupportFiles(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Copies the support files to the output directory
            </summary>
            <param name='monitor'>
            Progress monitor.
            </param>
            <param name='configuration'>
            Configuration for which to copy the files.
            </param>
            <remarks>
            Copies all support files to the output directory of the given configuration. Support files
            include: assembly references with the Local Copy flag, data files with the Copy to Output option, etc.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.DeleteSupportFiles(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Removes all support files from the output directory
            </summary>
            <param name='monitor'>
            Progress monitor.
            </param>
            <param name='configuration'>
            Configuration for which to delete the files.
            </param>
            <remarks>
            Deletes all support files from the output directory of the given configuration. Support files
            include: assembly references with the Local Copy flag, data files with the Copy to Output option, etc.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetSupportFileList(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets a list of files required to use the project output
            </summary>
            <returns>
            A list of files.
            </returns>
            <param name='configuration'>
            Build configuration for which get the list
            </param>
            <remarks>
            Returns a list of all files that are required to use the project output binary, for example: data files with
            the Copy to Output option, debug information files, generated resource files, etc.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.PopulateSupportFileList(MonoDevelop.Projects.FileCopySet,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets a list of files required to use the project output
            </summary>
            <param name='list'>
            List where to add the support files.
            </param>
            <param name='configuration'>
            Build configuration for which get the list
            </param>
            <remarks>
            Returns a list of all files that are required to use the project output binary, for example: data files with
            the Copy to Output option, debug information files, generated resource files, etc.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetOutputFiles(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets a list of files generated when building this project
            </summary>
            <returns>
            A list of files.
            </returns>
            <param name='configuration'>
            Build configuration for which get the list
            </param>
            <remarks>
            Returns a list of all files that are generated when this project is built, including: the generated binary,
            debug information files, satellite assemblies.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.PopulateOutputFileList(System.Collections.Generic.List{MonoDevelop.Core.FilePath},MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets a list of files retuired to use the project output
            </summary>
            <param name='list'>
            List where to add the support files.
            </param>
            <param name='configuration'>
            Build configuration for which get the list
            </param>
            <remarks>
            Returns a list of all files that are required to use the project output binary, for example: data files with
            the Copy to Output option, debug information files, generated resource files, etc.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.Build(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.ProjectOperationContext)">
            <summary>
            Builds the project
            </summary>
            <param name="monitor">A progress monitor</param>
            <param name="solutionConfiguration">Configuration to use to build the project</param>
            <param name="operationContext">Context information.</param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.Build(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector,System.Boolean,MonoDevelop.Projects.ProjectOperationContext)">
            <summary>
            Builds the project
            </summary>
            <param name="monitor">A progress monitor</param>
            <param name="solutionConfiguration">Configuration to use to build the project</param>
            <param name="buildReferences">When set to <c>true</c>, the referenced items will be built before building this item.</param>
            <param name="operationContext">Context information.</param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.DoBuild(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Builds the project.
            </summary>
            <returns>
            The build result.
            </returns>
            <param name='monitor'>
            Progress monitor.
            </param>
            <param name='configuration'>
            Configuration to build.
            </param>
            <remarks>
            This method is invoked to build the project. Support files such as files with the Copy to Output flag will
            be copied before calling this method.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Project.GetOutputFileName(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the absolute path to the output file generated by this project.
            </summary>
            <returns>
            Absolute path the the output file.
            </returns>
            <param name='configuration'>
            Build configuration.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.CheckNeedsBuild(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Checks if the project needs to be built
            </summary>
            <returns>
            <c>True</c> if the project needs to be built (it has changes)
            </returns>
            <param name='configuration'>
            Build configuration.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnFileRemovedFromProject(MonoDevelop.Projects.ProjectFileEventArgs)">
            <summary>
            Raises the FileRemovedFromProject event.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnFileAddedToProject(MonoDevelop.Projects.ProjectFileEventArgs)">
            <summary>
            Raises the FileAddedToProject event.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnFileChangedInProject(MonoDevelop.Projects.ProjectFileEventArgs)">
            <summary>
            Raises the FileChangedInProject event.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnFilePropertyChangedInProject(MonoDevelop.Projects.ProjectFileEventArgs)">
            <summary>
            Raises the FilePropertyChangedInProject event.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Project.OnFileRenamedInProject(MonoDevelop.Projects.ProjectFileRenamedEventArgs)">
            <summary>
            Raises the FileRenamedInProject event.
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.Project.FileRemovedFromProject">
            <summary>
            Occurs when a file is removed from this project.
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.Project.FileAddedToProject">
            <summary>
            Occurs when a file is added to this project.
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.Project.FileChangedInProject">
            <summary>
            Occurs when a file of this project has been modified
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.Project.FilePropertyChangedInProject">
            <summary>
            Occurs when a property of a file of this project has changed
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.Project.FileRenamedInProject">
            <summary>
            Occurs when a file of this project has been renamed
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ProjectExtensions.AsFlavor``1(MonoDevelop.Projects.Project)">
            <summary>
            Given a project, if the project implements the specified flavor type, this
            method returns the flavor instance. It returns null if the project is null or
            if the project doesn't implement the flavor.
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.ProjectFile">
            <summary>
            This class represent a file information in an IProject object.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ProjectFile.GetResourceId(MonoDevelop.Projects.Policies.ResourceNamePolicy)">
            <summary>
            Gets the resource id of this file for the provided policy
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.ProjectVirtualPath">
            <summary>
            The file should be treated as effectively having this relative path within the project. If the file is
            a link or outside the project root, this will not be the same as the physical file.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.Visible">
            <summary>
            Whether the file should be shown to the user.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.Generator">
            <summary>
            The ID of a custom code generator.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.CustomToolNamespace">
            <summary>
            Overrides the namespace in which the custom code generator should generate code.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.LastGenOutput">
            <summary>
            The file most recently generated by the custom tool. Relative to this file's parent directory.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.Link">
            <summary>
            If the file's real path is outside the project root, this value can be used to set its virtual path
            within the project root. Use ProjectVirtualPath to read the effective virtual path for any file.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.IsLink">
            <summary>
            Whether the file is a link.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectFile.IsExternalToProject">
            <summary>
            Whether the file is outside the project base directory.
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.ProjectReference">
            <summary>
            This class represent a reference information in an Project object.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ProjectReference.GetReferencedFileName(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Returns the file name to an assembly, regardless of what 
            type the assembly is.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ProjectReference.ResolveProject(MonoDevelop.Projects.Solution)">
            <summary>
            Resolves a project for a ReferenceType.Project reference type in a given solution.
            </summary>
            <returns>The project, or <c>null</c> if it couldn't be resolved.</returns>
            <param name="inSolution">The solution the project is in.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if inSolution == null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if ReferenceType != ReferenceType.Project</exception>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectCreateInformation.TemplateInitializationCallback">
            <summary>
            A callback that will be invoked to initialize the project
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.WorkspaceItem.OnBeginLoad">
            <summary>
            Called when a load operation for this item has started
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.WorkspaceItem.OnEndLoad">
            <summary>
            Called when a load operation for this item has finished
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.WorkspaceItem.OnItemReady">
            <summary>
            Called when an item has been fully created and/or loaded
            </summary>
            <remarks>>
            This method is invoked when all operations required for creating or loading this item have finished.
            If the item is being created in memory, this method will be called just after OnExtensionChainInitialized.
            If the item is being loaded from a file, it will be called after OnEndLoad.
            If the item is being created from a template, it will be called after InitializeNew
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.Solution.DefaultSolutionFolder">
            <summary>
            Folder where to add solution files, when none is created
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Solution.AuthorInformation">
            <summary>
            Gets the author information for this solution. If no specific information is set for this solution, it
            will return the author defined in the global settings.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Solution.LocalAuthorInformation">
            <summary>
            Gets or sets the author information for this solution. It returns null if no specific information
            has been set for this solution.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Solution.GetAllProjectFlavors``1">
            <summary>
            Returns all flavor instances of the specified type that are implemented in projects of the solution
            </summary>
            <returns>All project flavors</returns>
            <typeparam name="T">Type of the flavor</typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolder.GetAllItems">
            <remarks>
            Returns a collection containing all entries in this folder and 
            undercombines
            </remarks>
        </member>
        <member name="T:MonoDevelop.Projects.TaskSlotScheduler">
            <summary>
            Keeps track of slots available for executing an operation
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.TaskSlotScheduler.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoDevelop.Projects.TaskSlotScheduler"/> class.
            </summary>
            <param name="slots">Initial number of slots available</param>
        </member>
        <member name="M:MonoDevelop.Projects.TaskSlotScheduler.GetTaskSlot">
            <summary>
            Gets a slot, to be disposed when done with the operation
            </summary>
            <returns>The task slot.</returns>
        </member>
        <member name="M:MonoDevelop.Projects.IBuildTarget.Build(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector,System.Boolean,MonoDevelop.Projects.OperationContext)">
            <summary>
            Builds the target
            </summary>
            <param name="monitor">Monitor for tracking progress</param>
            <param name="configuration">Configuration to build</param>
            <param name="buildReferencedTargets">If set to <c>true</c> build referenced targets before building this one</param>
        </member>
        <member name="M:MonoDevelop.Projects.IBuildTarget.Clean(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.OperationContext)">
            <summary>
            Cleans the targets
            </summary>
            <param name="monitor">Monitor for tracking progress</param>
            <param name="configuration">Configuration to clean</param>
        </member>
        <member name="M:MonoDevelop.Projects.IBuildTarget.Execute(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Executes the target
            </summary>
            <param name="monitor">Monitor for tracking progress</param>
            <param name="context">Execution context</param>
            <param name="configuration">Configuration to execute</param>
        </member>
        <member name="M:MonoDevelop.Projects.IBuildTarget.CanExecute(MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Determines whether this target can be executed using the specified execution context and configuration.
            </summary>
            <returns><c>true</c> if this instance can be executed; otherwise, <c>false</c>.</returns>
            <param name="context">An execution context</param>
            <param name="configuration">Configuration to execute</param>
        </member>
        <member name="M:MonoDevelop.Projects.IBuildTarget.CanBuild(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Determines whether this target can be built using the specified configuration.
            </summary>
            <returns><c>true</c> if this instance can be built; otherwise, <c>false</c>.</returns>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="M:MonoDevelop.Projects.IBuildTarget.PrepareExecution(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Prepares the target for execution
            </summary>
            <returns>The execution.</returns>
            <param name="monitor">Monitor for tracking progress</param>
            <param name="context">Execution context</param>
            <param name="configuration">Configuration to execute</param>
            <remarks>This method can be called (it is not mandatory) before Execute() to give the target a chance
            to asynchronously prepare the execution that is going to be done later on. It can be used for example
            to start the simulator that is going to be used for execution. Calling this method is optional, and
            there is no guarantee that Execute() will actually be called.</remarks>
        </member>
        <member name="P:MonoDevelop.Projects.IBuildTarget.Name">
            <summary>
            Gets the name of the target
            </summary>
            <value>The name</value>
        </member>
        <member name="M:MonoDevelop.Projects.IBuildTarget.GetExecutionDependencies">
            <summary>
            Gets the build targets that should be built before the project is executed.
            If the project itself is not included, it will not be built.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ItemConfiguration.CopyFrom(MonoDevelop.Projects.ItemConfiguration,System.Boolean)">
            <summary>
            Copies the data of a configuration into this configuration
            </summary>
            <param name="configuration">Configuration from which to get the data.</param>
            <param name="isRename">If true, it means that the copy is being made as a result of a rename or clone operation. In this case,
            the overriden method may change the value of some properties that depend on the configuration name. For example, if the
            copied configuration is Debug and the OutputPath property has "bin/Debug" as value, then that value may be changed
            to match the new configuration name instead of keeping "bin/Debug"</param>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.RefreshReferenceStatus">
            <summary>
            Checks the status of references. To be called when referenced files may have been deleted or created.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.DotNetProject.DefaultNamespace">
            <summary>
            Default namespace setting. May be empty, use GetDefaultNamespace to get a usable value.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.StripImplicitNamespace(System.String)">
            <summary>
            Given a namespace, removes from it the implicit namespace of the project,
            if there is one. This depends on the target language. For example, in VB.NET
            the default namespace is implicit.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.GetDefaultTargetFrameworkId">
            <summary>
            Gets the target framework for new projects
            </summary>
            <returns>
            The default target framework identifier.
            </returns>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.GetDefaultTargetFrameworkForFormat(System.String)">
            <summary>
            Returns the default framework for a given format
            </summary>
            <returns>
            The default target framework for the format.
            </returns>
            <param name='toolsVersion'>
            MSBuild tools version for which to get the default format
            </param>
            <remarks>
            This method is used to determine what's the correct target framework for a project
            deserialized using a specific format.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.GetReferencedAssemblies(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Returns all assemblies referenced by this project, including assemblies generated
            by referenced projects.
            </summary>
            <param name="configuration">
            Configuration for which to get the assemblies.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.GetReferencedAssemblies(MonoDevelop.Projects.ConfigurationSelector,System.Boolean)">
            <summary>
            Returns all assemblies referenced by this project.
            </summary>
            <param name="configuration">
            Configuration for which to get the assemblies.
            </param>
            <param name="includeProjectReferences">
            When set to true, it will include assemblies generated by referenced project. When set to false,
            it will only include package and direct assembly references.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.GetReferencedAssemblyProjects(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the referenced assembly projects, but only projects which output are actually referenced
            for example references with ReferenceOutputAssembly=false are excluded
            </summary>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.GetDefaultNamespace(System.String,System.Boolean)">
            <summary>
            Gets the default namespace for the file, according to the naming policy.
            </summary>
            <remarks>Always returns a valid namespace, even if the fileName is null.</remarks>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.OnGetDefaultNamespace(System.String,System.Boolean)">
            <summary>
            Gets the default namespace for the file, according to the naming policy.
            </summary>
            <remarks>Always returns a valid namespace, even if the fileName is null.</remarks>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.GetDefaultNamespace(MonoDevelop.Projects.Project,System.String,System.String,System.Boolean)">
            <summary>
            Gets the default namespace for the file, according to the naming policy.
            </summary>
            <remarks>Always returns a valid namespace, even if the fileName is null.</remarks>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.OnGetDefaultResourceId(MonoDevelop.Projects.ProjectFile)">
            <summary>
            Returns the resource id that the provided file will have if none is explicitly set
            </summary>
            <param name="projectFile">Project file.</param>
            <remarks>The algorithm for getting the resource id is usually language-specific.</remarks>
        </member>
        <member name="M:MonoDevelop.Projects.DotNetProject.MigrateResourceIds(MonoDevelop.Projects.Policies.ResourceNamePolicy)">
            <summary>
            Migrates resource identifiers from a policy to the current policy of the project.
            </summary>
            <param name="oldPolicy">Old policy.</param>
        </member>
        <member name="E:MonoDevelop.Projects.DotNetProject.ReferencedAssembliesChanged">
            <summary>
            Raised when the list of assemblies that this project references changes
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.FileCopySet">
            <summary>
            A list of files to be deployed together with the project output binary
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.FileCopySet.Add(MonoDevelop.Core.FilePath)">
            <summary>
            Add a file
            </summary>
            <param name='sourcePath'>
            File path.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.FileCopySet.Add(MonoDevelop.Core.FilePath,System.Boolean)">
            <summary>
            Add a file
            </summary>
            <param name='sourcePath'>
            File path.
            </param>
            <param name='copyOnlyIfNewer'>
            Copy to otuput dir only if the file has changed.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.FileCopySet.Add(MonoDevelop.Core.FilePath,System.Boolean,MonoDevelop.Core.FilePath)">
            <summary>
            Add a file
            </summary>
            <param name='sourcePath'>
            File path.
            </param>
            <param name='copyOnlyIfNewer'>
            Copy to otuput dir only if the file has changed.
            </param>
            <param name='targetRelativePath'>
            Directory (relative to the output directory) where the file has to be copied.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.FileCopySet.Remove(MonoDevelop.Core.FilePath)">
            <summary>
            Remove a file
            </summary>
            <param name='fileName'>
            File name.
            </param>
        </member>
        <member name="T:MonoDevelop.Projects.FileCopySet.Item">
            <summary>
            A file
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.FileCopySet.Item.CopyOnlyIfNewer">
            <summary>
            Gets or sets a value indicating whether the file has to be copied only if it has changed.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.FileCopySet.Item.Target">
            <summary>
            Gets or sets the target directory (must be a relative path)
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.FileCopySet.Item.Src">
            <summary>
            Gets or sets the source path
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ProjectItem.GetKnownMetadataProperties">
            <summary>
            Gets a list of metadata properties which are read and written by this item, so they don't
            have to be stored in the generic Metadata dictionary
            </summary>
            <returns>The known metadata properties.</returns>
        </member>
        <member name="M:MonoDevelop.Projects.ProjectItem.OnProjectSet">
            <summary>
            Invoked when the project to which the item belongs changes.
            </summary>
        </member>
        <member name="F:MonoDevelop.Projects.ProjectItemFlags.Hidden">
            <summary>
            The item is for internal use and will not be shown to the user
            </summary>
        </member>
        <member name="F:MonoDevelop.Projects.ProjectItemFlags.DontPersist">
            <summary>
            The item will not be saved to the project file
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.ConfigurationSelector">
            <summary>
            Specifies a configuration to be used for solution and project operations
            </summary>
        </member>
        <member name="F:MonoDevelop.Projects.ConfigurationSelector.Default">
            <summary>
            A configuration selector which selects the default (active) project or solution configuration
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ConfigurationSelector.GetConfiguration(MonoDevelop.Projects.IConfigurationTarget)">
            <summary>
            Gets the configuration selected by this instance for a given target
            </summary>
            <returns>
            The configuration.
            </returns>
            <param name='target'>
            A target
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.HelpService.AsyncInitialize">
            <summary>
            Starts loading the MonoDoc tree in the background.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.HelpService.HelpTree">
            <summary>
            A MonoDoc docs tree.
            </summary>
            <remarks>
            The tree is background-loaded the help service, and accessing the property will block until it is finished 
            loading. If you don't wish to block, check the <see cref="P:MonoDevelop.Projects.HelpService.TreeInitialized"/> property first.
             </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.HelpService.TreeInitialized">
            <summary>
            Whether the MonoDoc docs tree has finished loading.
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.Extensions.IAssemblyReferenceHandler">
            <summary>
            This interface can be implemented by a ISolutionItemHandler class to provide
            a the list of assembly references for a project. It must not include project references.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Extensions.ProjectMigrationHandler.FilesToBackup(System.String)">
            <summary>
            Returns a list of files that should be backed up during migration.
            </summary>
            <returns>Files to backup.</returns>
            <param name="filename">Project path</param>
        </member>
        <member name="M:MonoDevelop.Projects.Extensions.ProjectMigrationHandler.Migrate(MonoDevelop.Core.ProjectLoadProgressMonitor,MonoDevelop.Projects.MSBuild.MSBuildProject,System.String,System.String)">
            <summary>
            Executes the proejct migration
            </summary>
            <param name="monitor">Progress monitor</param>
            <param name="project">MSBuild project instance, if available</param>
            <param name="fileName">Project path</param>
            <param name="language">Language name (for .NET projects).</param>
        </member>
        <member name="P:MonoDevelop.Projects.Extensions.ProjectMigrationHandler.CanPromptForMigration">
            <summary>
            If it returns true, PromptForMigration will be called to confirm the migration.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Extensions.ProjectMigrationHandler.PromptForMigration(MonoDevelop.Core.ProjectLoadProgressMonitor,MonoDevelop.Projects.MSBuild.MSBuildProject,System.String,System.String)">
            <summary>
            Ask the use for confirmation of the migration
            </summary>
            <returns>Use answer</returns>
            <param name="monitor">Progress monitor</param>
            <param name="project">MSBuild project instance, if available</param>
            <param name="fileName">Project path</param>
            <param name="language">Language name (for .NET projects).</param>
        </member>
        <member name="M:MonoDevelop.Projects.MSBuild.MSBuildProjectService.GetImportRedirect(System.String)">
            <summary>
            Given a project referenced in an Import, returns a project that should be loaded instead, or null if there is no redirect
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.MSBuild.MSBuildProjectService.LoadItem(MonoDevelop.Core.ProgressMonitor,System.String,MonoDevelop.Projects.MSBuild.MSBuildFileFormat,System.String,System.String,MonoDevelop.Projects.SolutionLoadContext)">
            <summary>
            Loads a solution item
            </summary>
            <returns>The item.</returns>
            <param name="monitor">Progress monitor</param>
            <param name="fileName">File path to the item file</param>
            <param name="expectedFormat">File format that the project should have</param>
            <param name="typeGuid">Optional item type GUID. If not provided, the type is guessed from the file extension.</param>
            <param name="itemGuid">Optional item Id</param>
            <param name="ctx">Optional solution context</param>
        </member>
        <member name="M:MonoDevelop.Projects.MSBuild.MSBuildProjectService.CreateUninitializedInstance(System.Type)">
            <summary>
            Creates an uninitialized solution item instance
            </summary>
            <param name="type">Solution item type</param>
            <remarks>
            Some subclasses (such as ProjectTypeNode) need to assign some data to
            the object before it is initialized. However, by default initialization
            is automatically made by the constructor, so to support this scenario
            the initialization has to be delayed. This is done by setting the
            MonoDevelop.DelayItemInitialization logical context property.
            When this property is set, the object is not initialized, and it has
            to be manually initialized by calling EnsureInitialized.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.MSBuild.MSBuildProject.IsShared">
            <summary>
            Gets a value indicating whether this instance is shared.
            </summary>
            <remarks>Shared objects can only be modified in the main thread</remarks>
        </member>
        <member name="M:MonoDevelop.Projects.MSBuild.MSBuildProject.SetShared">
            <summary>
            Sets this object as shared, which means that it is accessible from several threads for reading,
            but it can only be modified in the main thread
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.MSBuild.MSBuildProject.UseMSBuildEngine">
            <summary>
            Gets or sets a value indicating whether this project uses the msbuild engine for evaluation.
            </summary>
            <remarks>When set to false, evaluation support is limited but it allows loading projects
            which are not fully compliant with MSBuild (old MD projects).</remarks>
        </member>
        <member name="T:MonoDevelop.Projects.MSBuild.MergeToProjectAttribute">
            <summary>
            Specifies that a property of a project configuration has to be stored as a project property
            </summary>
            <remarks>
            When applied to a property of a project configuration, MD will check
            if the value of that property is the same for all configurations.
            If they are the same, the value will be stored in the main property
            group, instead of individually in each configuration.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.MSBuild.MSBuildProperty.ContainsNoTagsOtherThanComments(System.String,System.Int32)">
            <summary>
            Figure out whether there are any XML tags, other than comment tags,
            in the string.
            </summary>
            <remarks>
            We know the string coming in is a valid XML fragment. (The project loaded after all.)
            So for example we can ignore an open comment tag without a matching closing comment tag.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.MSBuild.IMSBuildItemEvaluated.SourceItem">
            <summary>
            The project item that generated this item. Null if this item has not been
            generated by a project item declared in an ItemGroup.
            </summary>
            <value>The source item.</value>
        </member>
        <member name="M:MonoDevelop.Projects.MSBuild.SlnFile.GetFileVersion(System.String)">
            <summary>
            Gets the sln format version of the provided solution file
            </summary>
            <returns>The file version.</returns>
            <param name="file">File.</param>
        </member>
        <member name="P:MonoDevelop.Projects.MSBuild.SlnFile.BaseDirectory">
            <summary>
            The directory to be used as base for converting absolute paths to relative
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.MSBuild.SlnFile.SolutionConfigurationsSection">
            <summary>
            Gets the solution configurations section.
            </summary>
            <value>The solution configurations section.</value>
        </member>
        <member name="P:MonoDevelop.Projects.MSBuild.SlnFile.ProjectConfigurationsSection">
            <summary>
            Gets the project configurations section.
            </summary>
            <value>The project configurations section.</value>
        </member>
        <member name="P:MonoDevelop.Projects.MSBuild.SlnSection.SkipIfEmpty">
            <summary>
            If true, this section won't be written to the file if it is empty
            </summary>
            <value><c>true</c> if skip if empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MonoDevelop.Projects.MSBuild.SlnPropertySet">
            <summary>
            A collection of properties
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.MSBuild.SlnPropertySet.Line">
            <summary>
            Text file line of this section in the original file
            </summary>
            <value>The line.</value>
        </member>
        <member name="M:MonoDevelop.Projects.MSBuild.SlnPropertySet.#ctor(System.String)">
            <summary>
            Creates a new property set with the specified ID
            </summary>
            <param name="id">Identifier.</param>
        </member>
        <member name="P:MonoDevelop.Projects.MSBuild.SlnPropertySet.IsEmpty">
            <summary>
            Gets a value indicating whether this property set is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoDevelop.Projects.MSBuild.SlnPropertySet.Id">
            <summary>
            Gets the identifier of the property set
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="M:MonoDevelop.Projects.MSBuild.SlnPropertySet.ContainsKey(System.String)">
            <summary>
            Determines whether the current instance contains an entry with the specified key
            </summary>
            <returns><c>true</c>, if key was containsed, <c>false</c> otherwise.</returns>
            <param name="key">Key.</param>
        </member>
        <member name="M:MonoDevelop.Projects.MSBuild.SlnPropertySet.Remove(System.String)">
            <summary>
            Removes a property
            </summary>
            <param name="key">Property name</param>
        </member>
        <member name="M:MonoDevelop.Projects.MSBuild.SlnPropertySet.TryGetValue(System.String,System.String@)">
            <summary>
            Tries to get the value of a property
            </summary>
            <returns><c>true</c>, if the property exists, <c>false</c> otherwise.</returns>
            <param name="key">Property name</param>
            <param name="value">Value.</param>
        </member>
        <member name="P:MonoDevelop.Projects.MSBuild.SlnPropertySet.Item(System.String)">
            <summary>
            Gets or sets the value of a property
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySet(System.String)">
            <summary>
            Gets a policy set.
            </summary>
            <returns>
            The policy set.
            </returns>
            <param name='name'>
            Name of the policy set
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets``1">
            <summary>
            Get all policy sets which define a specific policy
            </summary>
            <returns>
            The policy sets.
            </returns>
            <typeparam name='T'>
            Type of the policy to look for
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets``1(System.Boolean)">
            <summary>
            Get all policy sets which define a specific policy
            </summary>
            <returns>
            The policy sets.
            </returns>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets``1(System.String)">
            <summary>
            Get all policy sets which define a policy under a specific scope
            </summary>
            <returns>
            The policy sets.
            </returns>
            <param name='scope'>
            Scope under which the policy has to be defined (it can be for example a mime type)
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets``1(System.String,System.Boolean)">
            <summary>
            Get all policy sets which define a policy under a specific scope
            </summary>
            <returns>
            The policy sets.
            </returns>
            <param name='scope'>
            Scope under which the policy has to be defined (it can be for example a mime type)
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get all policy sets which define a policy under a specific set of scopes
            </summary>
            <returns>
            The policy sets.
            </returns>
            <param name='scopes'>
            Scopes under which the policy has to be defined (it can be for example a hirearchy of mime types)
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets``1(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Get all policy sets which define a policy under a specific set of scopes
            </summary>
            <returns>
            The policy sets.
            </returns>
            <param name='scopes'>
            Scopes under which the policy has to be defined (it can be for example a hirearchy of mime types)
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSets``1(``0)">
            <summary>
            Gets a list of sets which contain a specific policy value
            </summary>
            <returns>
            The matching sets.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
            <remarks>
            This method returns a list of policy sets which define a policy of type T which is identical
            to the policy provided as argument.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSets``1(``0,System.Boolean)">
            <summary>
            Gets a list of sets which contain a specific policy value
            </summary>
            <returns>
            The matching sets.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for. Only sets containing this policy will be returned
            </typeparam>
            <remarks>
            This method returns a list of policy sets which define a policy of type T which is identical
            to the policy provided as argument.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSet``1(``0)">
            <summary>
            Gets a policy set which contains a specific policy value
            </summary>
            <returns>
            The matching policy set.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <typeparam name='T'>
            Type of the policy to look for.
            </typeparam>
            <remarks>
            This method returns a policy set which defines a policy of type T which is identical
            to the policy provided as argument. If there are several matching policy sets, it
            returns the first it finds
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSet``1(``0,System.Boolean)">
            <summary>
            Gets a policy set which contains a specific policy value
            </summary>
            <returns>
            The matching policy set.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for.
            </typeparam>
            <remarks>
            This method returns a policy set which defines a policy of type T which is identical
            to the policy provided as argument. If there are several matching policy sets, it
            returns the first it finds
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSet``1(``0,System.Collections.Generic.IEnumerable{MonoDevelop.Projects.Policies.PolicySet},System.Boolean)">
            <summary>
            Gets a policy set which contains a specific policy value
            </summary>
            <returns>
            The matching policy set.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <param name='candidateSets'>
            List of policy sets where to look for the specified policy
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for.
            </typeparam>
            <remarks>
            This method returns a policy set which defines a policy of type T which is identical
            to the policy provided as argument. If there are several matching policy sets, it
            returns the first it finds
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSet``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a policy sets which contains a specific policy value
            </summary>
            <returns>
            The policy set.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <param name='scopes'>
            Scopes under which the policy has to be defined (it can be for example a hirearchy of mime types)
            </param>
            <typeparam name='T'>
            Type of the policy to look for.
            </typeparam>
            <remarks>
            This method returns a policy set which defines a policy of type T which is identical
            to the policy provided as argument. This policy has to be defined under one of the
            provided scopes. If there are several matching policy sets, it returns the first it finds.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSet``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Gets a policy sets which contains a specific policy value
            </summary>
            <returns>
            The policy set.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <param name='scopes'>
            Scopes under which the policy has to be defined (it can be for example a hirearchy of mime types)
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for.
            </typeparam>
            <remarks>
            This method returns a policy set which defines a policy of type T which is identical
            to the policy provided as argument. This policy has to be defined under one of the
            provided scopes. If there are several matching policy sets, it returns the first it finds.
            </remarks>		
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetMatchingSet``1(``0,System.Collections.Generic.IEnumerable{MonoDevelop.Projects.Policies.PolicySet},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Gets a policy set which contains a specific policy value
            </summary>
            <returns>
            The policy set.
            </returns>
            <param name='policy'>
            Policy to be compared
            </param>
            <param name='candidateSets'>
            List of policy sets where to look for the specified policy
            </param>
            <param name='scopes'>
            Scopes under which the policy has to be defined (it can be for example a hirearchy of mime types)
            </param>
            <param name='includeHidden'>
            True if hidden (system) policy sets have to be returned, False otherwise.
            </param>
            <typeparam name='T'>
            Type of the policy to look for.
            </typeparam>
            <remarks>
            This method returns a policy set which defines a policy of type T which is identical
            to the policy provided as argument. This policy has to be defined under one of the
            provided scopes. If there are several matching policy sets, it returns the first it finds.
            </remarks>		
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy``1">
            <summary>
            Gets a default policy.
            </summary>
            <returns>
            The default policy.
            </returns>
            <typeparam name='T'>
            Type of the policy to be returned
            </typeparam>
            <remarks>
            This method returns the default value for the specified policy type. It can be a value defined by
            the user using the default policy options panel, or a system default if the user didn't change it.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy``1(System.String)">
            <summary>
            Gets a default policy for a specific scope
            </summary>
            <returns>
            The default policy.
            </returns>
            <param name='scope'>
            Scope under which the policy has to be defined
            </param>
            <typeparam name='T'>
            Type of the policy to be returned
            </typeparam>
            <remarks>
            This method returns the default value for the specified policy type and scope. It can be a value defined by
            the user using the default policy options panel, or a system default if the user didn't change it.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy``1(System.String,System.Boolean)">
            <summary>
            Gets a default policy for a specific scope
            </summary>
            <returns>
            The default policy, or NULL if the policy is not defined and createDefault is False
            </returns>
            <param name='scope'>
            Scope under which the policy has to be defined
            </param>
            <param name='createDefault'>
            When set to False and there is no default policy defined of this type, the method returns null.
            When set to True, a policy value is always returned (it can be the system default).
            </param>
            <typeparam name='T'>
            Type of the policy to be returned
            </typeparam>
            <remarks>
            This method returns the default value for the specified policy type and scope.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a default policy for a specific set of scopes
            </summary>
            <returns>
            The default policy.
            </returns>
            <param name='scopes'>
            Scopes under which the policy has to be defined (it can be for example a hirearchy of mime types)
            </param>
            <typeparam name='T'>
            Type of the policy to be returned
            </typeparam>
            <remarks>
            This method returns the default value of a policy type for a set of scopes. The policy is looked up under
            the provided scopes in sequence, and the first value found is the one returned. If no value is found,
            a system default is returned.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.SetDefaultPolicy``1(``0)">
            <summary>
            Sets a default policy value.
            </summary>
            <param name='value'>
            Policy to be set
            </param>
            <typeparam name='T'>
            Type of the policy to be set
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetUserDefaultPolicySet">
            <summary>
            Gets default user-defined policy set
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Policies.PolicyService.InvariantPolicies">
            <summary>
            Gets the invariant policy set
            </summary>
            <remarks>
            The invariant policy set is a policy set whose values will not change in future MonoDevelop versions.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.Policies.PolicyService.DefaultPolicies">
            <summary>
            Gets the system default policies
            </summary>
            <value>
            The default policies.
            </value>
            <remarks>
            The returned PolicyContainer can be used to query the system default value of policies
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.IsUndefinedPolicy``1(``0)">
            <summary>
            Determines whether a policy instance is an undefined policy
            </summary>
            <returns>
            <c>true</c> if the policy is undefined; otherwise, <c>false</c>.
            </returns>
            <param name='policy'>
            Policy to check
            </param>
            <typeparam name='T'>
            Type of the policy to check
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetUndefinedPolicy``1">
            <summary>
            Gets a undefined policy value
            </summary>
            <returns>
            The undefined policy.
            </returns>
            <typeparam name='T'>
            Type of the policy
            </typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetUserPolicySets">
            <summary>
            Gets the policy sets defined by the user
            </summary>
            <returns>
            The user policy sets.
            </returns>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.AddUserPolicySet(MonoDevelop.Projects.Policies.PolicySet)">
            <summary>
            Adds a new user defined policy set
            </summary>
            <param name='pset'>
            The policy set
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.RemoveUserPolicySet(MonoDevelop.Projects.Policies.PolicySet)">
            <summary>
            Removes a user defined policy set
            </summary>
            <param name='pset'>
            The policy set
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.GetPolicySets">
            <summary>
            Get all defined policy sets
            </summary>
            <returns>
            The policy sets.
            </returns>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyService.SavePolicies">
            <summary>
            Saves the policies.
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.Policies.PolicySet">
            <summary>
            A named set of policies.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Policies.PolicySet.Visible">
            <summary>
            When set to false, this policy set is not visible to the user. This flag can be used
            to deprecate existing policy sets (since registered policy sets can't be modified/removed).
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Policies.PolicySet.AllowDiffSerialize">
            <summary>
            When set to true, this policy can be used as a base for a differential serialization. It's false by default
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.Policies.PolicyContainer">
            <summary>
            A set of policies. Policies are identified by type.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Policies.PolicyContainer.IsEmpty">
            <summary>
            Returns true if there isn't any policy defined.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyContainer.Get``1">
            <summary>
            The Get methods return policies taking into account inheritance. If a policy
            can't be found it may return null, but never an 'undefined' policy.
            </summary>
            <returns>
            The policy of the given type, or null if not found.
            </returns>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyContainer.Clear">
            <summary>
            Removes all policies defined in this container
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyContainer.CopyFrom(MonoDevelop.Projects.Policies.PolicyContainer)">
            <summary>
            Copies the policies defined in another container
            </summary>
            <param name='other'>
            A policy container from which to copy the policies
            </param>
            <remarks>
            Policies of this container are removed or replaced by policies defined in the
            provided container.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyContainer.Import(MonoDevelop.Projects.Policies.PolicyContainer,System.Boolean)">
            <summary>
            Import the policies defined by another policy container
            </summary>
            <param name='source'>
            The policy container to be imported
            </param>
            <param name='includeParentPolicies'>
            If <c>true</c>, policies defined by all ancestors of polContainer will also
            be imported
            </param>
            <remarks>
            This method adds or replaces policies defined in the source container into
            this container. Policies in this container which are not defined in the source container
            are not modified or removed.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.Policies.PolicyContainer.DirectGetAll">
            <summary>
            Gets a list of all policies defined in this container (not inherited)
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.Policies.PolicyContainer.ParentPolicies">
            <summary>
            The set of policies from which inherit policies when not found in this container
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Text.InvalidEncodingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InvalidEncodingException"/> class
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.Text.InvalidEncodingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InvalidEncodingException"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
        </member>
        <member name="M:MonoDevelop.Projects.Text.InvalidEncodingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:InvalidEncodingException"/> class
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the exception. </param>
            <param name="inner">The exception that is the cause of the current exception. </param>
        </member>
        <member name="M:MonoDevelop.Projects.SharedAssetsProjects.SharedAssetsProject.GetDefaultNamespace(System.String,System.Boolean)">
            <summary>
            Gets the default namespace for the file, according to the naming policy.
            </summary>
            <remarks>Always returns a valid namespace, even if the fileName is null.</remarks>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionFolderItem.ParentSolution">
            <summary>
            Gets the solution to which this item belongs
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionFolderItem.BaseDirectory">
            <summary>
            Gets or sets the base directory of this solution item
            </summary>
            <value>
            The base directory.
            </value>
            <remarks>
            The base directory is the directory where files belonging to this project
            are placed. Notice that this directory may be different than the directory
            where the project file is placed.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolderItem.GetDefaultBaseDirectory">
            <summary>
            Gets the default base directory.
            </summary>
            <remarks>
            The base directory is the directory where files belonging to this project
            are placed. Notice that this directory may be different than the directory
            where the project file is placed.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionFolderItem.ItemId">
            <summary>
            Gets the identifier of this solution item
            </summary>
            <remarks>
            The identifier is unique inside the solution
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionFolderItem.Policies">
            <summary>
            Gets policies.
            </summary>
            <remarks>
            Returns a policy container which can be used to query policies specific for this
            solution item. If a policy is not defined for this item, the inherited value will be returned.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionFolderItem.UserProperties">
            <summary>
            Gets solution item properties specific to the current user
            </summary>
            <remarks>
            These properties are not stored in the project file, but in a separate file which is not to be shared
            with other users.
            User properties are only loaded when the project is loaded inside the IDE.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolderItem.LoadUserProperties(MonoDevelop.Core.PropertyBag)">
            <summary>
            Initializes the user properties of the item
            </summary>
            <param name='properties'>
            Properties to be set
            </param>
            <exception cref='T:System.InvalidOperationException'>
            The user properties have already been set
            </exception>
            <remarks>
            This method is used by the IDE to initialize the user properties when a project is loaded.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionFolderItem.ParentFolder">
            <summary>
            Gets the parent solution folder.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolderItem.GetLastBuildTime(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the time of the last build
            </summary>
            <returns>
            The last build time.
            </returns>
            <param name='configuration'>
            Configuration for which to get the last build time.
            </param>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionFolderItem.NeedsReload">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoDevelop.Projects.SolutionItem"/> needs to be reload due to changes in project or solution file
            </summary>
            <value>
            <c>true</c> if needs reload; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolderItem.RegisterInternalChild(MonoDevelop.Projects.SolutionFolderItem)">
            <summary>
            Registers an internal child item.
            </summary>
            <param name='item'>
            An item
            </param>
            <remarks>
            Some kind of projects may be composed of several child projects.
            By registering those child projects using this method, the child
            projects will be plugged into the parent solution infrastructure
            (so for example, the ParentSolution property for those projects
            will return the correct value)
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolderItem.UnregisterInternalChild(MonoDevelop.Projects.SolutionFolderItem)">
            <summary>
            Unregisters an internal child item.
            </summary>
            <param name='item'>
            The item
            </param>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionFolderItem.AuthorInformation">
            <summary>
            Gets the author information for this solution item, inherited from the solution and global settings.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolderItem.NotifyModified(System.String)">
            <summary>
            Notifies that this solution item has been modified
            </summary>
            <param name='hint'>
            Hint about which part of the solution item has been modified. This will typically be the property name.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolderItem.OnModified(MonoDevelop.Projects.SolutionItemModifiedEventArgs)">
            <summary>
            Raises the modified event.
            </summary>
            <param name='args'>
            Arguments.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolderItem.OnNameChanged(MonoDevelop.Projects.SolutionItemRenamedEventArgs)">
            <summary>
            Raises the name changed event.
            </summary>
            <param name='e'>
            Arguments.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolderItem.InitializeItemHandler">
            <summary>
            Initializes the item handler.
            </summary>
            <remarks>
            This method is called the first time an item handler is requested.
            Subclasses should override this method use SetItemHandler to
            assign a handler to this item.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolderItem.OnGetLastBuildTime(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the time of the last build
            </summary>
            <returns>
            The last build time.
            </returns>
            <param name='configuration'>
            Configuration for which to get the last build time.
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolderItem.OnBoundToSolution">
            <summary>
            Called just after this item is bound to a solution
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionFolderItem.OnUnboundFromSolution">
            <summary>
            Called just before this item is removed from a solution (ParentSolution is still valid when this method is called)
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.SolutionFolderItem.NameChanged">
            <summary>
            Occurs when the name of the item changes
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.SolutionFolderItem.Modified">
            <summary>
            Occurs when the item is modified.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnItemReady">
            <summary>
            Called when an item has been fully created and/or loaded
            </summary>
            <remarks>>
            This method is invoked when all operations required for creating or loading this item have finished.
            If the item is being created in memory, this method will be called just after OnExtensionChainInitialized.
            If the item is being loaded from a file, it will be called after OnEndLoad.
            If the item is being created from a template, it will be called after InitializeNew
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnBeginLoad">
            <summary>
            Called when a load operation for this solution item has started
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnEndLoad">
            <summary>
            Called when a load operation for this solution item has finished
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.ConvertToFormat(MonoDevelop.Projects.MSBuild.MSBuildFileFormat)">
            <summary>
            Changes the format of this item. This method doesn't save the item, it only does in memory-changes.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.ItemDependencies">
            <summary>
            Projects that need to be built before building this one
            </summary>
            <value>The dependencies.</value>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.Loading">
            <summary>
            Gets a value indicating whether this item is currently being loaded from a file
            </summary>
            <remarks>
            While an item is loading, some events such as project file change events may be fired.
            This flag can be used to check if change events are caused by data being loaded.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.GetReferencedItems(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets solution items referenced by this instance (items on which this item depends)
            </summary>
            <returns>
            The referenced items.
            </returns>
            <param name='configuration'>
            Configuration for which to get the referenced items
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.InitializeFromTemplate(MonoDevelop.Projects.ProjectCreateInformation,System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of this item, using an xml element as template
            </summary>
            <param name='template'>
            The template
            </param>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.IsUnsupportedProject">
            <summary>
            Gets a value indicating whether this project is supported.
            </summary>
            <remarks>
            Unsupported projects are shown in the solution pad, but operations such as building on executing won't be available.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.SolutionItem.UnsupportedProjectMessage">
            <summary>
            Gets a message that explain why the project is not supported (when IsUnsupportedProject returns true)
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.Build(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Builds the solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='solutionConfiguration'>
            Configuration to use to build the project
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.Build(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector,System.Boolean)">
            <summary>
            Builds the solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='solutionConfiguration'>
            Configuration to use to build the project
            </param>
            <param name='buildReferences'>
            When set to <c>true</c>, the referenced items will be built before building this item
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnBuild(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.OperationContext)">
            <summary>
            Builds the solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='configuration'>
            Configuration to use to build the project
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.Clean(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Cleans the files produced by this solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='configuration'>
            Configuration to use to clean the project
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnClean(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.OperationContext)">
            <summary>
            Cleans the files produced by this solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='configuration'>
            Configuration to use to clean the project
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.TopologicalSort``1(System.Collections.Generic.IEnumerable{``0},MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Sorts a collection of solution items, taking into account the dependencies between them
            </summary>
            <returns>
            The sorted collection of items
            </returns>
            <param name='items'>
            Items to sort
            </param>
            <param name='configuration'>
            A configuration
            </param>
            <remarks>
            This methods sorts a collection of items, ensuring that every item is placed after all the items
            on which it depends.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.Execute(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Executes this solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='context'>
            An execution context
            </param>
            <param name='configuration'>
            Configuration to use to execute the item
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.Execute(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.SolutionItemRunConfiguration)">
            <summary>
            Executes this solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='context'>
            An execution context
            </param>
            <param name='configuration'>
            Configuration to use to execute the item
            </param>
            <param name='runConfiguration'>
            Run configuration to use to execute the item
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.PrepareExecution(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Prepares the target for execution
            </summary>
            <returns>The execution.</returns>
            <param name="monitor">Monitor for tracking progress</param>
            <param name="context">Execution context</param>
            <param name="configuration">Configuration to execute</param>
            <remarks>This method can be called (it is not mandatory) before Execute() to give the target a chance
            to asynchronously prepare the execution that is going to be done later on. It can be used for example
            to start the simulator that is going to be used for execution. Calling this method is optional, and
            there is no guarantee that Execute() will actually be called.</remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.PrepareExecution(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.SolutionItemRunConfiguration)">
            <summary>
            Prepares the target for execution
            </summary>
            <returns>The execution.</returns>
            <param name="monitor">Monitor for tracking progress</param>
            <param name="context">Execution context</param>
            <param name="configuration">Configuration to execute</param>
            <param name='runConfiguration'>
            Run configuration to use to execute the item
            </param>
            <remarks>This method can be called (it is not mandatory) before Execute() to give the target a chance
            to asynchronously prepare the execution that is going to be done later on. It can be used for example
            to start the simulator that is going to be used for execution. Calling this method is optional, and
            there is no guarantee that Execute() will actually be called.</remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.CanExecute(MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Determines whether this solution item can be executed using the specified context and configuration.
            </summary>
            <returns>
            <c>true</c> if this instance can be executed; otherwise, <c>false</c>.
            </returns>
            <param name='context'>
            An execution context
            </param>
            <param name='configuration'>
            Configuration to use to execute the item
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.CanExecute(MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.SolutionItemRunConfiguration)">
            <summary>
            Determines whether this solution item can be executed using the specified context and configuration.
            </summary>
            <returns>
            <c>true</c> if this instance can be executed; otherwise, <c>false</c>.
            </returns>
            <param name='context'>
            An execution context
            </param>
            <param name='configuration'>
            Configuration to use to execute the item
            </param>
            <param name='runConfiguration'>
            Run configuration to use to execute the item
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnExecute(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.SolutionItemRunConfiguration)">
            <summary>
            Executes this solution item
            </summary>
            <param name='monitor'>
            A progress monitor
            </param>
            <param name='context'>
            An execution context
            </param>
            <param name='configuration'>
            Configuration to use to execute the item
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnPrepareExecution(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.SolutionItemRunConfiguration)">
            <summary>
            Prepares the target for execution
            </summary>
            <returns>The execution.</returns>
            <param name="monitor">Monitor for tracking progress</param>
            <param name="context">Execution context</param>
            <param name="configuration">Configuration to execute</param>
            <param name="runConfiguration">Run configuration to execute</param>
            <remarks>This method can be called (it is not mandatory) before Execute() to give the target a chance
            to asynchronously prepare the execution that is going to be done later on. It can be used for example
            to start the simulator that is going to be used for execution. Calling this method is optional, and
            there is no guarantee that Execute() will actually be called.</remarks>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnGetCanExecute(MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.SolutionItemRunConfiguration)">
            <summary>
            Determines whether this solution item can be executed using the specified context and configuration.
            </summary>
            <returns>
            <c>true</c> if this instance can be executed; otherwise, <c>false</c>.
            </returns>
            <param name='context'>
            An execution context
            </param>
            <param name='configuration'>
            Configuration to use to execute the item
            </param>
            <param name='runConfiguration'>
            Run configuration to use to execute the item
            </param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.GetExecutionTargets(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the execution targets.
            </summary>
            <returns>The execution targets.</returns>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.GetExecutionTargets(MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.SolutionItemRunConfiguration)">
            <summary>
            Gets the execution targets.
            </summary>
            <returns>The execution targets.</returns>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.GetRunConfigurations">
            <summary>
            Gets the run configurations.
            </summary>
            <returns>The execution targets.</returns>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.GetDefaultRunConfiguration">
            <summary>
            Gets the default run configuration for this item.
            </summary>
            <returns>The configuration.</returns>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnCheckHasSolutionData">
            <summary>
            Override to return True if this class needs to store project related data in the solution file
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnReadSolutionData(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.MSBuild.SlnPropertySet)">
            <summary>
            Override to read project related information stored in the solution file
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.SolutionItem.OnWriteSolutionData(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.MSBuild.SlnPropertySet)">
            <summary>
            Override to store project related information in the solution file
            </summary>
        </member>
        <member name="E:MonoDevelop.Projects.SolutionItem.Disposing">
            <summary>
            Occurs when the object is being disposed
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.WorkspaceObject.InstanceCancellationToken">
            <summary>
            This CancellationTokenSource is used to cancel all async operations when the object is disposed.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.WorkspaceObject.BindTask``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Binds a task to this object. The object will track the task execution and if the object is disposed,
            it will try to cancel the task and will wait for the task to end.
            </summary>
            <returns>The task returned by the provided lambda.</returns>
            <param name="f">A lambda that takes a CancellationToken token as argument and returns the task
            to be tracked. The provided CancellationToken will be signalled when the object is disposed.</param>
            <typeparam name="T">Task return type</typeparam>
        </member>
        <member name="M:MonoDevelop.Projects.WorkspaceObject.BindTask(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Binds a task to this object. The object will track the task execution and if the object is disposed,
            it will try to cancel the task and will wait for the task to end.
            </summary>
            <returns>The task returned by the provided lambda.</returns>
            <param name="f">A lambda that takes a CancellationToken token as argument and returns the task
            to be tracked. The provided CancellationToken will be signalled when the object is disposed.</param>
        </member>
        <member name="P:MonoDevelop.Projects.WorkspaceObject.IsShared">
            <summary>
            Gets a value indicating whether this instance is shared.
            </summary>
            <remarks>Shared objects can only be modified in the main thread</remarks>
        </member>
        <member name="M:MonoDevelop.Projects.WorkspaceObject.SetShared">
            <summary>
            Sets this object as shared, which means that it is accessible from several threads for reading,
            but it can only be modified in the main thread
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.WorkspaceObject.ExtendedProperties">
            <summary>
            Gets extended properties.
            </summary>
            <remarks>
            This dictionary can be used by add-ins to store arbitrary information about this solution item.
            Keys and values can be of any type.
            If a value implements IDisposable, the value will be disposed when this item is disposed.
            </remarks>
        </member>
        <member name="P:MonoDevelop.Projects.WorkspaceObject.Disposed">
            <summary>
            Gets a value indicating whether this <see cref="T:MonoDevelop.Projects.SolutionItem"/> has been disposed.
            </summary>
            <value>
            <c>true</c> if disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoDevelop.Projects.WorkspaceObject.GetService``1">
            <summary>
            Gets a service instance of a given type
            </summary>
            <returns>
            The service.
            </returns>
            <typeparam name='T'>
            Type of the service
            </typeparam>
            <remarks>
            This method looks for an imlpementation of a service of the given type.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.WorkspaceObject.GetService(System.Type)">
            <summary>
            Gets a service instance of a given type
            </summary>
            <returns>
            The service.
            </returns>
            <param name='t'>
            Type of the service
            </param>
            <remarks>
            This method looks for an imlpementation of a service of the given type.
            </remarks>
        </member>
        <member name="M:MonoDevelop.Projects.WorkspaceObject.GetStringTagModel(MonoDevelop.Projects.ConfigurationSelector)">
            <summary>
            Gets the string tag model for this solution item
            </summary>
            <returns>
            The string tag model
            </returns>
            <param name='conf'>
            Configuration for which to get the string tag model
            </param>
        </member>
        <member name="P:MonoDevelop.Projects.WorkspaceObject.IsExtensionChainCreated">
            <summary>
            Gets a value indicating whether the extension chain for this object has already been created and initialized
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.WorkspaceObject.OnInitialize">
            <summary>
            Called after the object is created, but before the extension chain has been created.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.WorkspaceObject.OnExtensionChainInitialized">
            <summary>
            Called when the extension chain for this object has been created. This method can be overriden
            to do initializations on the object that require access to the extension chain
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.WorkspaceObjectExtension.Initialize">
            <summary>
            Invoked just after creation the extension chain of the object
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.WorkspaceObjectExtension.OnExtensionChainCreated">
            <summary>
            Invoked after all extensions have been initialized
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ProjectExtension.OnPrepareForEvaluation(MonoDevelop.Projects.MSBuild.MSBuildProject)">
            <summary>
            Called just after the MSBuild project is loaded but before it is evaluated.
            </summary>
            <param name="project">The project</param>
            <remarks>
            Subclasses can override this method to transform the MSBuild project before it is evaluated.
            For example, it can be used to add or remove imports, or to set custom values for properties.
            Changes done in the MSBuild files are not saved.
            </remarks>
        </member>
        <member name="F:MonoDevelop.Projects.MSBuildSupport.NotSupported">
            <summary>
            MSBuild engine is not supported
            </summary>
        </member>
        <member name="F:MonoDevelop.Projects.MSBuildSupport.Supported">
            <summary>
            MSBuild engine is supported and will be used by default
            </summary>
        </member>
        <member name="F:MonoDevelop.Projects.MSBuildSupport.Required">
            <summary>
            MSBuild engine is required
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.PathBasedProjectItem">
            <summary>
            A base class for project items that represent a file or a folder
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.AsyncCriticalSection">
            <summary>
            A critical section object which can be awaited
            </summary>
            <remarks>This critical section is not reentrant.</remarks>
        </member>
        <member name="T:MonoDevelop.Projects.ConditionedPropertyCollection.KeySet">
            <summary>
            A set of strings, which can be compared to other sets ignoring the order.
            </summary>
        </member>
        <member name="T:MonoDevelop.Projects.ConditionedPropertyCollection.ValueSet">
            <summary>
            A set of key/value pairs
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ConditionedPropertyCollection.ValueSet.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new ValueSet
            </summary>
            <param name="referenceKeys">Array of keys that specifies the order in which values are stored</param>
            <param name="names">Array of keys, ordered according to the values parameter</param>
            <param name="values">Values of the keys.</param>
        </member>
        <member name="M:MonoDevelop.Projects.ConditionedPropertyCollection.ValueSet.GetValue(System.String)">
            <summary>
            Gets the value for the given property
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ConditionedPropertyCollection.GetAllProperties">
            <summary>
            Retuns the name of all conditioned properties
            </summary>
            <returns>The all properties.</returns>
        </member>
        <member name="M:MonoDevelop.Projects.ConditionedPropertyCollection.GetAllPropertyValues(System.String)">
            <summary>
            Gets the values used in conditions for the given property
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ConditionedPropertyCollection.GetCombinedPropertyValues(System.String[])">
            <summary>
            Gets the values for a combination of properties. It only returns values specified in conditions that
            reference only (and only) the given properties. For example, if the properties are Configuration and
            Platform, it will return values for those properties specified in conditions that reference both
            Configuration and Platform.
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.AssemblyReference.EnumerateAliases">
            <summary>
            Returns an enumerable collection of aliases. 
            </summary>
        </member>
        <member name="M:MonoDevelop.Projects.ProjectRunConfiguration.CopyFrom(MonoDevelop.Projects.ProjectRunConfiguration,System.Boolean)">
            <summary>
            Copies the data of a run configuration into this configuration
            </summary>
            <param name="config">Configuration from which to get the data.</param>
            <param name="isRename">If true, it means that the copy is being made as a result of a rename or clone operation. In this case,
            the overriden method may change the value of some properties that depend on the configuration name.</param>
        </member>
        <member name="P:MonoDevelop.Projects.ProjectRunConfiguration.Properties">
            <summary>
            Property set where the properties for this configuration are defined.
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.RunConfiguration.Name">
            <summary>
            Display name of the configuration
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.RunConfiguration.Id">
            <summary>
            Unique id of the configuration
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.RunConfiguration.IconId">
            <summary>
            Icon
            </summary>
        </member>
        <member name="P:MonoDevelop.Projects.RunConfiguration.Summary">
            <summary>
            One line description of the configuration
            </summary>
            <value>The summary.</value>
        </member>
        <member name="M:MonoDevelop.Projects.IRunTarget.Execute(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.RunConfiguration)">
            <summary>
            Executes the target
            </summary>
            <param name="monitor">Monitor for tracking progress</param>
            <param name="context">Execution context</param>
            <param name="configuration">Configuration to execute</param>
            <param name="runConfiguration">Run configuration to use</param>
        </member>
        <member name="M:MonoDevelop.Projects.IRunTarget.CanExecute(MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.RunConfiguration)">
            <summary>
            Determines whether this target can be executed using the specified execution context and configuration.
            </summary>
            <returns><c>true</c> if this instance can be executed; otherwise, <c>false</c>.</returns>
            <param name="context">An execution context</param>
            <param name="configuration">Configuration to execute</param>
            <param name="runConfiguration">Run configuration to use</param>
        </member>
        <member name="M:MonoDevelop.Projects.IRunTarget.PrepareExecution(MonoDevelop.Core.ProgressMonitor,MonoDevelop.Projects.ExecutionContext,MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.RunConfiguration)">
            <summary>
            Prepares the target for execution
            </summary>
            <returns>The execution.</returns>
            <param name="monitor">Monitor for tracking progress</param>
            <param name="context">Execution context</param>
            <param name="configuration">Configuration to execute</param>
            <param name="runConfiguration">Run configuration to use</param>
            <remarks>This method can be called (it is not mandatory) before Execute() to give the target a chance
            to asynchronously prepare the execution that is going to be done later on. It can be used for example
            to start the simulator that is going to be used for execution. Calling this method is optional, and
            there is no guarantee that Execute() will actually be called.</remarks>
        </member>
        <member name="M:MonoDevelop.Projects.IRunTarget.GetRunConfigurations">
            <summary>
            Gets the run configurations that can be used to execute this item
            </summary>
            <returns>The run configurations.</returns>
        </member>
        <member name="M:MonoDevelop.Projects.IRunTarget.GetExecutionTargets(MonoDevelop.Projects.ConfigurationSelector,MonoDevelop.Projects.RunConfiguration)">
            <summary>
            Gets the execution targets available for this item
            </summary>
            <returns>The execution targets.</returns>
            <param name="configuration">Configuration to execute</param>
            <param name="runConfiguration">Run configuration to use</param>
        </member>
        <member name="T:Microsoft.Build.Evaluation.IntrinsicFunctions">
            <summary>
            The Intrinsic class provides static methods that can be accessed from MSBuild's
            property functions using $([MSBuild]::Function(x,y))
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.Add(System.Double,System.Double)">
            <summary>
            Add two doubles
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.Add(System.Int64,System.Int64)">
            <summary>
            Add two longs
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.Subtract(System.Double,System.Double)">
            <summary>
            Subtract two doubles
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.Subtract(System.Int64,System.Int64)">
            <summary>
            Subtract two longs
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.Multiply(System.Double,System.Double)">
            <summary>
            Multiply two doubles
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.Multiply(System.Int64,System.Int64)">
            <summary>
            Multiply two longs
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.Divide(System.Double,System.Double)">
            <summary>
            Divide two doubles
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.Divide(System.Int64,System.Int64)">
            <summary>
            Divide two longs
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.Modulo(System.Double,System.Double)">
            <summary>
            Modulo two doubles
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.Modulo(System.Int64,System.Int64)">
            <summary>
            Modulo two longs
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.Escape(System.String)">
            <summary>
            Escape the string according to MSBuild's escaping rules
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.Unescape(System.String)">
            <summary>
            Unescape the string according to MSBuild's escaping rules
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.BitwiseOr(System.Int32,System.Int32)">
            <summary>
            Perform a bitwise OR on the first and second (first | second) 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.BitwiseAnd(System.Int32,System.Int32)">
            <summary>
            Perform a bitwise AND on the first and second (first &amp; second) 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.BitwiseXor(System.Int32,System.Int32)">
            <summary>
            Perform a bitwise XOR on the first and second (first ^ second) 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.BitwiseNot(System.Int32)">
            <summary>
            Perform a bitwise NOT on the first and second (~first) 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.GetRegistryValue(System.String,System.String)">
            <summary>
            Get the value of the registry key and value, default value is null
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.GetRegistryValue(System.String,System.String,System.Object)">
            <summary>
            Get the value of the registry key and value
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.GetRegistryValueFromView(System.String,System.String,System.Object,System.Object)">
            <summary>
            Get the value of the registry key from one of the RegistryView's specified
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.GetRegistryValueFromView(System.String,System.String,System.Object,System.Object[])">
            <summary>
            Get the value of the registry key from one of the RegistryView's specified
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.MakeRelative(System.String,System.String)">
            <summary>
            Given the absolute location of a file, and a disc location, returns relative file path to that disk location. 
            Throws UriFormatException.
            </summary>
            <param name="basePath">
            The base path we want to relativize to. Must be absolute.  
            Should <i>not</i> include a filename as the last segment will be interpreted as a directory.
            </param>
            <param name="path">
            The path we need to make relative to basePath.  The path can be either absolute path or a relative path in which case it is relative to the base path.
            If the path cannot be made relative to the base path (for example, it is on another drive), it is returned verbatim.
            </param>
            <returns>relative path (can be the full path)</returns>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.GetDirectoryNameOfFileAbove(System.String,System.String)">
            <summary>
            Locate a file in either the directory specified or a location in the
            direcorty structure above that directory.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.ValueOrDefault(System.String,System.String)">
            <summary>
            Return the string in parameter 'defaultValue' only if parameter 'conditionValue' is empty
            else, return the value conditionValue
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.DoesTaskHostExist(System.String,System.String)">
            <summary>
            Returns true if a task host exists that can service the requested runtime and architecture
            values, and false otherwise. 
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.__GetListTest">
            <summary>
            returns if the string contains escaped wildcards
            </summary>
        </member>
        <member name="M:Microsoft.Build.Evaluation.IntrinsicFunctions.GetBaseKeyFromKeyName(System.String,Microsoft.Win32.RegistryView,System.String@)">
            <summary>
            Following function will parse a keyName and returns the basekey for it.
            It will also store the subkey name in the out parameter.
            If the keyName is not valid, we will throw ArgumentException.
            The return value shouldn't be null.
            Taken from: \ndp\clr\src\BCL\Microsoft\Win32\Registry.cs
            </summary>
        </member>
        <member name="T:Microsoft.Build.Shared.EscapingUtilities">
            <summary>
            This class implements static methods to assist with unescaping of %XX codes
            in the MSBuild file format.
            </summary>
            <remarks>
            PERF: since we escape and unescape relatively frequently, it may be worth caching
            the last N strings that were (un)escaped
            </remarks>
        </member>
        <member name="F:Microsoft.Build.Shared.EscapingUtilities.s_unescapedToEscapedStrings">
            <summary>
            Optional cache of escaped strings for use when needing to escape in performance-critical scenarios with significant
            expected string reuse.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Shared.EscapingUtilities.UnescapeAll(System.String)">
            <summary>
            Replaces all instances of %XX in the input string with the character represented
            by the hexadecimal number XX. 
            </summary>
            <param name="escapedString">The string to unescape.</param>
            <returns>unescaped string</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.EscapingUtilities.UnescapeAll(System.String,System.Boolean@)">
            <summary>
            Replaces all instances of %XX in the input string with the character represented
            by the hexadecimal number XX. 
            </summary>
            <param name="escapedString">The string to unescape.</param>
            <param name="escapingWasNecessary">Whether any replacements were made.</param>
            <returns>unescaped string</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.EscapingUtilities.EscapeWithCaching(System.String)">
            <summary>
            Adds instances of %XX in the input string where the char char to be escaped appears
            XX is the hex value of the ASCII code for the char.  Interns and caches the result. 
            </summary>
            <comment>
            NOTE:  Only recommended for use in scenarios where there's expected to be significant 
            repetition of the escaped string.  Cache currently grows unbounded.  
            </comment>
        </member>
        <member name="M:Microsoft.Build.Shared.EscapingUtilities.Escape(System.String)">
            <summary>
            Adds instances of %XX in the input string where the char char to be escaped appears
            XX is the hex value of the ASCII code for the char.
            </summary>
            <param name="unescapedString">The string to escape.</param>
            <returns>escaped string</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.EscapingUtilities.EscapeWithOptionalCaching(System.String,System.Boolean)">
            <summary>
            Adds instances of %XX in the input string where the char char to be escaped appears
            XX is the hex value of the ASCII code for the char.  Caches if requested.
            </summary>
            <param name="unescapedString">The string to escape.</param>
            <param name="cache">
            True if the cache should be checked, and if the resultant string 
            should be cached.
            </param>
        </member>
        <member name="M:Microsoft.Build.Shared.EscapingUtilities.ContainsReservedCharacters(System.String)">
            <summary>
            Before trying to actually escape the string, it can be useful to call this method to determine
            if escaping is necessary at all.  This can save lots of calls to copy around item metadata
            that is really the same whether escaped or not.
            </summary>
            <param name="unescapedString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.Shared.EscapingUtilities.ContainsEscapedWildcards(System.String)">
            <summary>
            Determines whether the string contains the escaped form of '*' or '?'.
            </summary>
            <param name="escapedString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Build.Shared.EscapingUtilities.HexDigitChar(System.Int32)">
            <summary>
            Convert the given integer into its hexadecimal representation.
            </summary>
            <param name="x">The number to convert, which must be non-negative and less than 16</param>
            <returns>The character which is the hexadecimal representation of <paramref name="x"/>.</returns>
        </member>
        <member name="M:Microsoft.Build.Shared.EscapingUtilities.AppendEscapedChar(System.Text.StringBuilder,System.Char)">
            <summary>
            Append the escaped version of the given character to a <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to which to append.</param>
            <param name="ch">The character to escape.</param>
        </member>
        <member name="M:Microsoft.Build.Shared.EscapingUtilities.AppendEscapedString(System.Text.StringBuilder,System.String)">
            <summary>
            Append the escaped version of the given string to a <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to which to append.</param>
            <param name="unescapedString">The unescaped string.</param>
        </member>
        <member name="F:Microsoft.Build.Shared.EscapingUtilities.s_charsToEscape">
            <summary>
            Special characters that need escaping.
            It's VERY important that the percent character is the FIRST on the list - since it's both a character 
            we escape and use in escape sequences, we can unintentionally escape other escape sequences if we 
            don't process it first. Of course we'll have a similar problem if we ever decide to escape hex digits 
            (that would require rewriting the algorithm) but since it seems unlikely that we ever do, this should
            be good enough to avoid complicating the algorithm at this point.
            </summary>
        </member>
    </members>
</doc>
