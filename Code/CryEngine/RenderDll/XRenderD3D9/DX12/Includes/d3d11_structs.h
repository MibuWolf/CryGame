// Copyright 2001-2017 Crytek GmbH / Crytek Group. All rights reserved. 

#ifndef __CRYDX11STRUCTS__
#define __CRYDX11STRUCTS__

#if defined(__d3d11_h__) || defined(__d3d11_x_h__)
#pragma message("DirectX 11 header allready included, skipping including custom DirectX 11 structs")
#else

#define	D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION	( 16384 )
#define	D3D11_REQ_MAXANISOTROPY	( 16 )
#define	D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT	( 128 )
#define	D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION	( 16384 )

#define D3DSTREAMSOURCE_INDEXEDDATA                              (1 << 30)
#define D3DSTREAMSOURCE_INSTANCEDATA                             (2 << 30)
//
#define D3D11_PS_CS_UAV_REGISTER_COUNT                           8
#define D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT                    16
#define D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT             128
#define D3D11_COMMONSHADER_CONSTANT_BUFFER_SLOT_COUNT            15
#define D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT        (D3D11_COMMONSHADER_CONSTANT_BUFFER_SLOT_COUNT)
#define D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT         (D3D11_COMMONSHADER_CONSTANT_BUFFER_SLOT_COUNT)
#define D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT                16
#define D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT                       32
#define D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE 16
#define D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT                   8
#define D3D11_DEFAULT_STENCIL_READ_MASK                          (0xff)
#define D3D11_DEFAULT_STENCIL_WRITE_MASK                         (0xff)
#define D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL              (0xffffffff)
#define D3D11_KEEP_UNORDERED_ACCESS_VIEWS                        (0xffffffff)

//#define D3D11_BYTES_FROM_BITS(x) (((x) + 7) / 8)

////////////////////////////////////////////////////////////////////////////*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef
enum D3D11_INPUT_CLASSIFICATION
{
	D3D11_INPUT_PER_VERTEX_DATA = 0,
	D3D11_INPUT_PER_INSTANCE_DATA = 1
} 	D3D11_INPUT_CLASSIFICATION;

#define	D3D11_APPEND_ALIGNED_ELEMENT	( 0xffffffff )

typedef struct D3D11_INPUT_ELEMENT_DESC
{
	LPCSTR SemanticName;
	UINT SemanticIndex;
	DXGI_FORMAT Format;
	UINT InputSlot;
	UINT AlignedByteOffset;
	D3D11_INPUT_CLASSIFICATION InputSlotClass;
	UINT InstanceDataStepRate;
} 	D3D11_INPUT_ELEMENT_DESC;

typedef
enum D3D11_FILL_MODE
{
	D3D11_FILL_WIREFRAME = 2,
	D3D11_FILL_SOLID = 3
} 	D3D11_FILL_MODE;

typedef D3D_PRIMITIVE_TOPOLOGY D3D11_PRIMITIVE_TOPOLOGY;

typedef D3D_PRIMITIVE D3D11_PRIMITIVE;

typedef
enum D3D11_CULL_MODE
{
	D3D11_CULL_NONE = 1,
	D3D11_CULL_FRONT = 2,
	D3D11_CULL_BACK = 3
} 	D3D11_CULL_MODE;

typedef struct D3D11_SO_DECLARATION_ENTRY
{
	UINT Stream;
	LPCSTR SemanticName;
	UINT SemanticIndex;
	BYTE StartComponent;
	BYTE ComponentCount;
	BYTE OutputSlot;
} 	D3D11_SO_DECLARATION_ENTRY;

typedef struct D3D11_VIEWPORT
{
	FLOAT TopLeftX;
	FLOAT TopLeftY;
	FLOAT Width;
	FLOAT Height;
	FLOAT MinDepth;
	FLOAT MaxDepth;
} 	D3D11_VIEWPORT;

inline bool operator==(const D3D11_VIEWPORT& l, const D3D11_VIEWPORT& r)
{
	return l.TopLeftX == r.TopLeftX && l.TopLeftY == r.TopLeftY && l.Width == r.Width &&
		l.Height == r.Height && l.MinDepth == r.MinDepth && l.MaxDepth == r.MaxDepth;
}
inline bool operator!=(const D3D11_VIEWPORT& l, const D3D11_VIEWPORT& r)
{
	return !(l == r);
}

typedef struct D3D11_DRAW_INSTANCED_INDIRECT_ARGS
{
	UINT VertexCountPerInstance;
	UINT InstanceCount;
	UINT StartVertexLocation;
	UINT StartInstanceLocation;
} 	D3D11_DRAW_INSTANCED_INDIRECT_ARGS;

typedef struct D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS
{
	UINT IndexCountPerInstance;
	UINT InstanceCount;
	UINT StartIndexLocation;
	INT BaseVertexLocation;
	UINT StartInstanceLocation;
} 	D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS;

typedef
enum D3D11_RESOURCE_DIMENSION
{
	D3D11_RESOURCE_DIMENSION_UNKNOWN = 0,
	D3D11_RESOURCE_DIMENSION_BUFFER = 1,
	D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2,
	D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3,
	D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4
} 	D3D11_RESOURCE_DIMENSION;

typedef D3D_SRV_DIMENSION D3D11_SRV_DIMENSION;

typedef
enum D3D11_DSV_DIMENSION
{
	D3D11_DSV_DIMENSION_UNKNOWN = 0,
	D3D11_DSV_DIMENSION_TEXTURE1D = 1,
	D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2,
	D3D11_DSV_DIMENSION_TEXTURE2D = 3,
	D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4,
	D3D11_DSV_DIMENSION_TEXTURE2DMS = 5,
	D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
} 	D3D11_DSV_DIMENSION;

typedef
enum D3D11_RTV_DIMENSION
{
	D3D11_RTV_DIMENSION_UNKNOWN = 0,
	D3D11_RTV_DIMENSION_BUFFER = 1,
	D3D11_RTV_DIMENSION_TEXTURE1D = 2,
	D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3,
	D3D11_RTV_DIMENSION_TEXTURE2D = 4,
	D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5,
	D3D11_RTV_DIMENSION_TEXTURE2DMS = 6,
	D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
	D3D11_RTV_DIMENSION_TEXTURE3D = 8
} 	D3D11_RTV_DIMENSION;

typedef
enum D3D11_UAV_DIMENSION
{
	D3D11_UAV_DIMENSION_UNKNOWN = 0,
	D3D11_UAV_DIMENSION_BUFFER = 1,
	D3D11_UAV_DIMENSION_TEXTURE1D = 2,
	D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3,
	D3D11_UAV_DIMENSION_TEXTURE2D = 4,
	D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5,
	D3D11_UAV_DIMENSION_TEXTURE3D = 8
} 	D3D11_UAV_DIMENSION;

typedef
enum D3D11_USAGE
{
	D3D11_USAGE_DEFAULT = 0,
	D3D11_USAGE_IMMUTABLE = 1,
	D3D11_USAGE_DYNAMIC = 2,
	D3D11_USAGE_STAGING = 3
} 	D3D11_USAGE;

typedef
enum D3D11_BIND_FLAG
{
	D3D11_BIND_VERTEX_BUFFER = 0x1L,
	D3D11_BIND_INDEX_BUFFER = 0x2L,
	D3D11_BIND_CONSTANT_BUFFER = 0x4L,
	D3D11_BIND_SHADER_RESOURCE = 0x8L,
	D3D11_BIND_STREAM_OUTPUT = 0x10L,
	D3D11_BIND_RENDER_TARGET = 0x20L,
	D3D11_BIND_DEPTH_STENCIL = 0x40L,
	D3D11_BIND_UNORDERED_ACCESS = 0x80L,
	D3D11_BIND_DECODER = 0x200L,
	D3D11_BIND_VIDEO_ENCODER = 0x400L
} 	D3D11_BIND_FLAG;

typedef
enum D3D11_CPU_ACCESS_FLAG
{
	D3D11_CPU_ACCESS_WRITE = 0x10000L,
	D3D11_CPU_ACCESS_READ = 0x20000L
} 	D3D11_CPU_ACCESS_FLAG;

typedef
enum D3D11_RESOURCE_MISC_FLAG
{
	D3D11_RESOURCE_MISC_GENERATE_MIPS = 0x1L,
	D3D11_RESOURCE_MISC_SHARED = 0x2L,
	D3D11_RESOURCE_MISC_TEXTURECUBE = 0x4L,
	D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 0x10L,
	D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 0x20L,
	D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 0x40L,
	D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 0x80L,
	D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x100L,
	D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 0x200L,
	D3D11_RESOURCE_MISC_SHARED_NTHANDLE = 0x800L,
	D3D11_RESOURCE_MISC_RESTRICTED_CONTENT = 0x1000L,
	D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 0x2000L,
	D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 0x4000L,
	D3D11_RESOURCE_MISC_GUARDED = 0x8000L,
	D3D11_RESOURCE_MISC_TILE_POOL = 0x20000L,
	D3D11_RESOURCE_MISC_TILED = 0x40000L,
	D3D11_RESOURCE_MISC_HW_PROTECTED = 0x80000L
} 	D3D11_RESOURCE_MISC_FLAG;

typedef
enum D3D11_MAP
{
	D3D11_MAP_READ = 1,
	D3D11_MAP_WRITE = 2,
	D3D11_MAP_READ_WRITE = 3,
	D3D11_MAP_WRITE_DISCARD = 4,
	D3D11_MAP_WRITE_NO_OVERWRITE = 5
} 	D3D11_MAP;

typedef
enum D3D11_MAP_FLAG
{
	D3D11_MAP_FLAG_DO_NOT_WAIT = 0x100000L
} 	D3D11_MAP_FLAG;

typedef
enum D3D11_RAISE_FLAG
{
	D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 0x1L
} 	D3D11_RAISE_FLAG;

typedef
enum D3D11_CLEAR_FLAG
{
	D3D11_CLEAR_DEPTH = 0x1L,
	D3D11_CLEAR_STENCIL = 0x2L
} 	D3D11_CLEAR_FLAG;

typedef RECT D3D11_RECT;

struct CD3D11_RECT : public D3D11_RECT
{
	CD3D11_RECT()
	{}
	explicit CD3D11_RECT(const D3D11_RECT& o) :
		D3D11_RECT(o)
	{}
	explicit CD3D11_RECT(
		LONG Left,
		LONG Top,
		LONG Right,
		LONG Bottom)
	{
		left = Left;
		top = Top;
		right = Right;
		bottom = Bottom;
	}
	~CD3D11_RECT() {}
};
inline bool operator==(const D3D11_RECT& l, const D3D11_RECT& r)
{
	return l.left == r.left && l.top == r.top &&
		l.right == r.right && l.bottom == r.bottom;
}
inline bool operator!=(const D3D11_RECT& l, const D3D11_RECT& r)
{
	return !(l == r);
}

typedef struct D3D11_BOX
	{
		UINT left;
		UINT top;
		UINT front;
		UINT right;
		UINT bottom;
		UINT back;
	} 	D3D11_BOX;

inline bool operator==(const D3D11_BOX& l, const D3D11_BOX& r)
{
	return l.left == r.left && l.top == r.top && l.front == r.front &&
		l.right == r.right && l.bottom == r.bottom && l.back == r.back;
}
inline bool operator!=(const D3D11_BOX& l, const D3D11_BOX& r)
{
	return !(l == r);
}


	typedef
		enum D3D11_COMPARISON_FUNC
	{
		D3D11_COMPARISON_NEVER = 1,
		D3D11_COMPARISON_LESS = 2,
		D3D11_COMPARISON_EQUAL = 3,
		D3D11_COMPARISON_LESS_EQUAL = 4,
		D3D11_COMPARISON_GREATER = 5,
		D3D11_COMPARISON_NOT_EQUAL = 6,
		D3D11_COMPARISON_GREATER_EQUAL = 7,
		D3D11_COMPARISON_ALWAYS = 8
	} 	D3D11_COMPARISON_FUNC;

	typedef
		enum D3D11_DEPTH_WRITE_MASK
	{
		D3D11_DEPTH_WRITE_MASK_ZERO = 0,
		D3D11_DEPTH_WRITE_MASK_ALL = 1
	} 	D3D11_DEPTH_WRITE_MASK;

	typedef
		enum D3D11_STENCIL_OP
	{
		D3D11_STENCIL_OP_KEEP = 1,
		D3D11_STENCIL_OP_ZERO = 2,
		D3D11_STENCIL_OP_REPLACE = 3,
		D3D11_STENCIL_OP_INCR_SAT = 4,
		D3D11_STENCIL_OP_DECR_SAT = 5,
		D3D11_STENCIL_OP_INVERT = 6,
		D3D11_STENCIL_OP_INCR = 7,
		D3D11_STENCIL_OP_DECR = 8
	} 	D3D11_STENCIL_OP;

	typedef struct D3D11_DEPTH_STENCILOP_DESC
	{
		D3D11_STENCIL_OP StencilFailOp;
		D3D11_STENCIL_OP StencilDepthFailOp;
		D3D11_STENCIL_OP StencilPassOp;
		D3D11_COMPARISON_FUNC StencilFunc;
	} 	D3D11_DEPTH_STENCILOP_DESC;

	typedef struct D3D11_DEPTH_STENCIL_DESC
	{
		BOOL DepthEnable;
		D3D11_DEPTH_WRITE_MASK DepthWriteMask;
		D3D11_COMPARISON_FUNC DepthFunc;
		BOOL StencilEnable;
		UINT8 StencilReadMask;
		UINT8 StencilWriteMask;
		D3D11_DEPTH_STENCILOP_DESC FrontFace;
		D3D11_DEPTH_STENCILOP_DESC BackFace;
	} 	D3D11_DEPTH_STENCIL_DESC;

	typedef
		enum D3D11_BLEND
	{
		D3D11_BLEND_ZERO = 1,
		D3D11_BLEND_ONE = 2,
		D3D11_BLEND_SRC_COLOR = 3,
		D3D11_BLEND_INV_SRC_COLOR = 4,
		D3D11_BLEND_SRC_ALPHA = 5,
		D3D11_BLEND_INV_SRC_ALPHA = 6,
		D3D11_BLEND_DEST_ALPHA = 7,
		D3D11_BLEND_INV_DEST_ALPHA = 8,
		D3D11_BLEND_DEST_COLOR = 9,
		D3D11_BLEND_INV_DEST_COLOR = 10,
		D3D11_BLEND_SRC_ALPHA_SAT = 11,
		D3D11_BLEND_BLEND_FACTOR = 14,
		D3D11_BLEND_INV_BLEND_FACTOR = 15,
		D3D11_BLEND_SRC1_COLOR = 16,
		D3D11_BLEND_INV_SRC1_COLOR = 17,
		D3D11_BLEND_SRC1_ALPHA = 18,
		D3D11_BLEND_INV_SRC1_ALPHA = 19
	} 	D3D11_BLEND;

	typedef
		enum D3D11_BLEND_OP
	{
		D3D11_BLEND_OP_ADD = 1,
		D3D11_BLEND_OP_SUBTRACT = 2,
		D3D11_BLEND_OP_REV_SUBTRACT = 3,
		D3D11_BLEND_OP_MIN = 4,
		D3D11_BLEND_OP_MAX = 5
	} 	D3D11_BLEND_OP;

	typedef
		enum D3D11_COLOR_WRITE_ENABLE
	{
		D3D11_COLOR_WRITE_ENABLE_RED = 1,
		D3D11_COLOR_WRITE_ENABLE_GREEN = 2,
		D3D11_COLOR_WRITE_ENABLE_BLUE = 4,
		D3D11_COLOR_WRITE_ENABLE_ALPHA = 8,
		D3D11_COLOR_WRITE_ENABLE_ALL = (((D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN) | D3D11_COLOR_WRITE_ENABLE_BLUE) | D3D11_COLOR_WRITE_ENABLE_ALPHA)
	} 	D3D11_COLOR_WRITE_ENABLE;

	typedef struct D3D11_RENDER_TARGET_BLEND_DESC
	{
		BOOL BlendEnable;
		D3D11_BLEND SrcBlend;
		D3D11_BLEND DestBlend;
		D3D11_BLEND_OP BlendOp;
		D3D11_BLEND SrcBlendAlpha;
		D3D11_BLEND DestBlendAlpha;
		D3D11_BLEND_OP BlendOpAlpha;
		UINT8 RenderTargetWriteMask;
	} 	D3D11_RENDER_TARGET_BLEND_DESC;

	typedef struct D3D11_BLEND_DESC
	{
		BOOL AlphaToCoverageEnable;
		BOOL IndependentBlendEnable;
		D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[8];
	} 	D3D11_BLEND_DESC;

	typedef struct D3D11_RASTERIZER_DESC
	{
		D3D11_FILL_MODE FillMode;
		D3D11_CULL_MODE CullMode;
		BOOL FrontCounterClockwise;
		INT DepthBias;
		FLOAT DepthBiasClamp;
		FLOAT SlopeScaledDepthBias;
		BOOL DepthClipEnable;
		BOOL ScissorEnable;
		BOOL MultisampleEnable;
		BOOL AntialiasedLineEnable;
	} 	D3D11_RASTERIZER_DESC;

	inline UINT D3D11CalcSubresource(UINT MipSlice, UINT ArraySlice, UINT MipLevels)
	{
		return MipSlice + ArraySlice * MipLevels;
	}

	typedef struct D3D11_SUBRESOURCE_DATA
	{
		const void *pSysMem;
		UINT SysMemPitch;
		UINT SysMemSlicePitch;
	} 	D3D11_SUBRESOURCE_DATA;

	typedef struct D3D11_MAPPED_SUBRESOURCE
	{
		void *pData;
		UINT RowPitch;
		UINT DepthPitch;
	} 	D3D11_MAPPED_SUBRESOURCE;

	typedef struct D3D11_BUFFER_DESC
	{
		UINT ByteWidth;
		D3D11_USAGE Usage;
		UINT BindFlags;
		UINT CPUAccessFlags;
		UINT MiscFlags;
		UINT StructureByteStride;
	} 	D3D11_BUFFER_DESC;

	typedef struct D3D11_TEXTURE1D_DESC
	{
		UINT Width;
		UINT MipLevels;
		UINT ArraySize;
		DXGI_FORMAT Format;
		D3D11_USAGE Usage;
		UINT BindFlags;
		UINT CPUAccessFlags;
		UINT MiscFlags;
	} 	D3D11_TEXTURE1D_DESC;

	typedef struct D3D11_TEXTURE2D_DESC
	{
		UINT Width;
		UINT Height;
		UINT MipLevels;
		UINT ArraySize;
		DXGI_FORMAT Format;
		DXGI_SAMPLE_DESC SampleDesc;
		D3D11_USAGE Usage;
		UINT BindFlags;
		UINT CPUAccessFlags;
		UINT MiscFlags;
	} 	D3D11_TEXTURE2D_DESC;

	typedef struct D3D11_TEXTURE3D_DESC
	{
		UINT Width;
		UINT Height;
		UINT Depth;
		UINT MipLevels;
		DXGI_FORMAT Format;
		D3D11_USAGE Usage;
		UINT BindFlags;
		UINT CPUAccessFlags;
		UINT MiscFlags;
	} 	D3D11_TEXTURE3D_DESC;

	typedef
		enum D3D11_TEXTURECUBE_FACE
	{
		D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0,
		D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 1,
		D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 2,
		D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 3,
		D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 4,
		D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 5
	} 	D3D11_TEXTURECUBE_FACE;


	typedef struct D3D11_BUFFER_SRV
	{
		union
		{
			UINT FirstElement;
			UINT ElementOffset;
		};
		union
		{
			UINT NumElements;
			UINT ElementWidth;
		};
	} 	D3D11_BUFFER_SRV;

	typedef
		enum D3D11_BUFFEREX_SRV_FLAG
	{
		D3D11_BUFFEREX_SRV_FLAG_RAW = 0x1
	} 	D3D11_BUFFEREX_SRV_FLAG;

	typedef struct D3D11_BUFFEREX_SRV
	{
		UINT FirstElement;
		UINT NumElements;
		UINT Flags;
	} 	D3D11_BUFFEREX_SRV;

	typedef struct D3D11_TEX1D_SRV
	{
		UINT MostDetailedMip;
		UINT MipLevels;
	} 	D3D11_TEX1D_SRV;

	typedef struct D3D11_TEX1D_ARRAY_SRV
	{
		UINT MostDetailedMip;
		UINT MipLevels;
		UINT FirstArraySlice;
		UINT ArraySize;
	} 	D3D11_TEX1D_ARRAY_SRV;

	typedef struct D3D11_TEX2D_SRV
	{
		UINT MostDetailedMip;
		UINT MipLevels;
	} 	D3D11_TEX2D_SRV;

	typedef struct D3D11_TEX2D_ARRAY_SRV
	{
		UINT MostDetailedMip;
		UINT MipLevels;
		UINT FirstArraySlice;
		UINT ArraySize;
	} 	D3D11_TEX2D_ARRAY_SRV;

	typedef struct D3D11_TEX3D_SRV
	{
		UINT MostDetailedMip;
		UINT MipLevels;
	} 	D3D11_TEX3D_SRV;

	typedef struct D3D11_TEXCUBE_SRV
	{
		UINT MostDetailedMip;
		UINT MipLevels;
	} 	D3D11_TEXCUBE_SRV;

	typedef struct D3D11_TEXCUBE_ARRAY_SRV
	{
		UINT MostDetailedMip;
		UINT MipLevels;
		UINT First2DArrayFace;
		UINT NumCubes;
	} 	D3D11_TEXCUBE_ARRAY_SRV;

	typedef struct D3D11_TEX2DMS_SRV
	{
		UINT UnusedField_NothingToDefine;
	} 	D3D11_TEX2DMS_SRV;

	typedef struct D3D11_TEX2DMS_ARRAY_SRV
	{
		UINT FirstArraySlice;
		UINT ArraySize;
	} 	D3D11_TEX2DMS_ARRAY_SRV;

	typedef struct D3D11_SHADER_RESOURCE_VIEW_DESC
	{
		DXGI_FORMAT Format;
		D3D11_SRV_DIMENSION ViewDimension;
		union
		{
			D3D11_BUFFER_SRV Buffer;
			D3D11_TEX1D_SRV Texture1D;
			D3D11_TEX1D_ARRAY_SRV Texture1DArray;
			D3D11_TEX2D_SRV Texture2D;
			D3D11_TEX2D_ARRAY_SRV Texture2DArray;
			D3D11_TEX2DMS_SRV Texture2DMS;
			D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
			D3D11_TEX3D_SRV Texture3D;
			D3D11_TEXCUBE_SRV TextureCube;
			D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
			D3D11_BUFFEREX_SRV BufferEx;
		};
	} 	D3D11_SHADER_RESOURCE_VIEW_DESC;

	typedef struct D3D11_BUFFER_RTV
	{
		union
		{
			UINT FirstElement;
			UINT ElementOffset;
		};
		union
		{
			UINT NumElements;
			UINT ElementWidth;
		};
	} 	D3D11_BUFFER_RTV;

	typedef struct D3D11_TEX1D_RTV
	{
		UINT MipSlice;
	} 	D3D11_TEX1D_RTV;

	typedef struct D3D11_TEX1D_ARRAY_RTV
	{
		UINT MipSlice;
		UINT FirstArraySlice;
		UINT ArraySize;
	} 	D3D11_TEX1D_ARRAY_RTV;

	typedef struct D3D11_TEX2D_RTV
	{
		UINT MipSlice;
	} 	D3D11_TEX2D_RTV;

	typedef struct D3D11_TEX2DMS_RTV
	{
		UINT UnusedField_NothingToDefine;
	} 	D3D11_TEX2DMS_RTV;

	typedef struct D3D11_TEX2D_ARRAY_RTV
	{
		UINT MipSlice;
		UINT FirstArraySlice;
		UINT ArraySize;
	} 	D3D11_TEX2D_ARRAY_RTV;

	typedef struct D3D11_TEX2DMS_ARRAY_RTV
	{
		UINT FirstArraySlice;
		UINT ArraySize;
	} 	D3D11_TEX2DMS_ARRAY_RTV;

	typedef struct D3D11_TEX3D_RTV
	{
		UINT MipSlice;
		UINT FirstWSlice;
		UINT WSize;
	} 	D3D11_TEX3D_RTV;

	typedef struct D3D11_RENDER_TARGET_VIEW_DESC
	{
		DXGI_FORMAT Format;
		D3D11_RTV_DIMENSION ViewDimension;
		union
		{
			D3D11_BUFFER_RTV Buffer;
			D3D11_TEX1D_RTV Texture1D;
			D3D11_TEX1D_ARRAY_RTV Texture1DArray;
			D3D11_TEX2D_RTV Texture2D;
			D3D11_TEX2D_ARRAY_RTV Texture2DArray;
			D3D11_TEX2DMS_RTV Texture2DMS;
			D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
			D3D11_TEX3D_RTV Texture3D;
		};
	} 	D3D11_RENDER_TARGET_VIEW_DESC;

	typedef struct D3D11_TEX1D_DSV
	{
		UINT MipSlice;
	} 	D3D11_TEX1D_DSV;

	typedef struct D3D11_TEX1D_ARRAY_DSV
	{
		UINT MipSlice;
		UINT FirstArraySlice;
		UINT ArraySize;
	} 	D3D11_TEX1D_ARRAY_DSV;

	typedef struct D3D11_TEX2D_DSV
	{
		UINT MipSlice;
	} 	D3D11_TEX2D_DSV;

	typedef struct D3D11_TEX2D_ARRAY_DSV
	{
		UINT MipSlice;
		UINT FirstArraySlice;
		UINT ArraySize;
	} 	D3D11_TEX2D_ARRAY_DSV;

	typedef struct D3D11_TEX2DMS_DSV
	{
		UINT UnusedField_NothingToDefine;
	} 	D3D11_TEX2DMS_DSV;

	typedef struct D3D11_TEX2DMS_ARRAY_DSV
	{
		UINT FirstArraySlice;
		UINT ArraySize;
	} 	D3D11_TEX2DMS_ARRAY_DSV;

	typedef
		enum D3D11_DSV_FLAG
	{
		D3D11_DSV_READ_ONLY_DEPTH = 0x1L,
		D3D11_DSV_READ_ONLY_STENCIL = 0x2L
	} 	D3D11_DSV_FLAG;

	typedef struct D3D11_DEPTH_STENCIL_VIEW_DESC
	{
		DXGI_FORMAT Format;
		D3D11_DSV_DIMENSION ViewDimension;
		UINT Flags;
		union
		{
			D3D11_TEX1D_DSV Texture1D;
			D3D11_TEX1D_ARRAY_DSV Texture1DArray;
			D3D11_TEX2D_DSV Texture2D;
			D3D11_TEX2D_ARRAY_DSV Texture2DArray;
			D3D11_TEX2DMS_DSV Texture2DMS;
			D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
		};
	} 	D3D11_DEPTH_STENCIL_VIEW_DESC;


	typedef
		enum D3D11_BUFFER_UAV_FLAG
	{
		D3D11_BUFFER_UAV_FLAG_RAW = 0x1,
		D3D11_BUFFER_UAV_FLAG_APPEND = 0x2,
		D3D11_BUFFER_UAV_FLAG_COUNTER = 0x4
	} 	D3D11_BUFFER_UAV_FLAG;

	typedef struct D3D11_BUFFER_UAV
	{
		UINT FirstElement;
		UINT NumElements;
		UINT Flags;
	} 	D3D11_BUFFER_UAV;

	typedef struct D3D11_TEX1D_UAV
	{
		UINT MipSlice;
	} 	D3D11_TEX1D_UAV;

	typedef struct D3D11_TEX1D_ARRAY_UAV
	{
		UINT MipSlice;
		UINT FirstArraySlice;
		UINT ArraySize;
	} 	D3D11_TEX1D_ARRAY_UAV;

	typedef struct D3D11_TEX2D_UAV
	{
		UINT MipSlice;
	} 	D3D11_TEX2D_UAV;

	typedef struct D3D11_TEX2D_ARRAY_UAV
	{
		UINT MipSlice;
		UINT FirstArraySlice;
		UINT ArraySize;
	} 	D3D11_TEX2D_ARRAY_UAV;

	typedef struct D3D11_TEX3D_UAV
	{
		UINT MipSlice;
		UINT FirstWSlice;
		UINT WSize;
	} 	D3D11_TEX3D_UAV;

	typedef struct D3D11_UNORDERED_ACCESS_VIEW_DESC
	{
		DXGI_FORMAT Format;
		D3D11_UAV_DIMENSION ViewDimension;
		union
		{
			D3D11_BUFFER_UAV Buffer;
			D3D11_TEX1D_UAV Texture1D;
			D3D11_TEX1D_ARRAY_UAV Texture1DArray;
			D3D11_TEX2D_UAV Texture2D;
			D3D11_TEX2D_ARRAY_UAV Texture2DArray;
			D3D11_TEX3D_UAV Texture3D;
		};
	} 	D3D11_UNORDERED_ACCESS_VIEW_DESC;


	typedef
		enum D3D11_FILTER
	{
		D3D11_FILTER_MIN_MAG_MIP_POINT = 0,
		D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
		D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
		D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
		D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
		D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
		D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
		D3D11_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
		D3D11_FILTER_ANISOTROPIC = 0x55,
		D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
		D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
		D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
		D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
		D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
		D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
		D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
		D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
		D3D11_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
		D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
		D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
		D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
		D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
		D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
		D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
		D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
		D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
		D3D11_FILTER_MINIMUM_ANISOTROPIC = 0x155,
		D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
		D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
		D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
		D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
		D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
		D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
		D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
		D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
		D3D11_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5
	} 	D3D11_FILTER;

	typedef
		enum D3D11_FILTER_TYPE
	{
		D3D11_FILTER_TYPE_POINT = 0,
		D3D11_FILTER_TYPE_LINEAR = 1
	} 	D3D11_FILTER_TYPE;

	typedef
		enum D3D11_FILTER_REDUCTION_TYPE
	{
		D3D11_FILTER_REDUCTION_TYPE_STANDARD = 0,
		D3D11_FILTER_REDUCTION_TYPE_COMPARISON = 1,
		D3D11_FILTER_REDUCTION_TYPE_MINIMUM = 2,
		D3D11_FILTER_REDUCTION_TYPE_MAXIMUM = 3
	} 	D3D11_FILTER_REDUCTION_TYPE;

#define	D3D11_FILTER_REDUCTION_TYPE_MASK	( 0x3 )

#define	D3D11_FILTER_REDUCTION_TYPE_SHIFT	( 7 )

#define	D3D11_FILTER_TYPE_MASK	( 0x3 )

#define	D3D11_MIN_FILTER_SHIFT	( 4 )

#define	D3D11_MAG_FILTER_SHIFT	( 2 )

#define	D3D11_MIP_FILTER_SHIFT	( 0 )

	// D3D11_COMPARISON_FILTERING_BIT is no longer used / meaningless.  The D3D11_FILTER_REDUCTION_TYPE enum replaced it. 
	// Old code that uses D3D11_COMPARISON_FILTERING_BIT and would never use D3D11_FILTER_MINIMUM_* or D3D11_FILTER_MAXIMUM_* 
	// will still work fine though, so the define is left to avoid breaks. 
#define	D3D11_COMPARISON_FILTERING_BIT	( 0x80 )

#define	D3D11_ANISOTROPIC_FILTERING_BIT	( 0x40 )

#define D3D11_ENCODE_BASIC_FILTER( min, mag, mip, reduction )                                                     \
                                   ( ( D3D11_FILTER ) (                                                           \
                                   ( ( ( min ) & D3D11_FILTER_TYPE_MASK ) << D3D11_MIN_FILTER_SHIFT ) |           \
                                   ( ( ( mag ) & D3D11_FILTER_TYPE_MASK ) << D3D11_MAG_FILTER_SHIFT ) |           \
                                   ( ( ( mip ) & D3D11_FILTER_TYPE_MASK ) << D3D11_MIP_FILTER_SHIFT ) |           \
                                   ( ( ( reduction ) & D3D11_FILTER_REDUCTION_TYPE_MASK ) << D3D11_FILTER_REDUCTION_TYPE_SHIFT ) ) ) 
#define D3D11_ENCODE_ANISOTROPIC_FILTER( reduction )                                                  \
                                         ( ( D3D11_FILTER ) (                                         \
                                         D3D11_ANISOTROPIC_FILTERING_BIT |                            \
                                         D3D11_ENCODE_BASIC_FILTER( D3D11_FILTER_TYPE_LINEAR,         \
                                                                    D3D11_FILTER_TYPE_LINEAR,         \
                                                                    D3D11_FILTER_TYPE_LINEAR,         \
                                                                    reduction ) ) )                     
#define D3D11_DECODE_MIN_FILTER( d3d11Filter )                                                              \
                                 ( ( D3D11_FILTER_TYPE )                                                    \
                                 ( ( ( d3d11Filter ) >> D3D11_MIN_FILTER_SHIFT ) & D3D11_FILTER_TYPE_MASK ) ) 
#define D3D11_DECODE_MAG_FILTER( d3d11Filter )                                                              \
                                 ( ( D3D11_FILTER_TYPE )                                                    \
                                 ( ( ( d3d11Filter ) >> D3D11_MAG_FILTER_SHIFT ) & D3D11_FILTER_TYPE_MASK ) ) 
#define D3D11_DECODE_MIP_FILTER( d3d11Filter )                                                              \
                                 ( ( D3D11_FILTER_TYPE )                                                    \
                                 ( ( ( d3d11Filter ) >> D3D11_MIP_FILTER_SHIFT ) & D3D11_FILTER_TYPE_MASK ) ) 
#define D3D11_DECODE_FILTER_REDUCTION( d3d11Filter )                                                        \
                                 ( ( D3D11_FILTER_REDUCTION_TYPE )                                                      \
                                 ( ( ( d3d11Filter ) >> D3D11_FILTER_REDUCTION_TYPE_SHIFT ) & D3D11_FILTER_REDUCTION_TYPE_MASK ) ) 
#define D3D11_DECODE_IS_COMPARISON_FILTER( d3d11Filter )                                                    \
                                 ( D3D11_DECODE_FILTER_REDUCTION( d3d11Filter ) == D3D11_FILTER_REDUCTION_TYPE_COMPARISON ) 
#define D3D11_DECODE_IS_ANISOTROPIC_FILTER( d3d11Filter )                                               \
                            ( ( ( d3d11Filter ) & D3D11_ANISOTROPIC_FILTERING_BIT ) &&                  \
                            ( D3D11_FILTER_TYPE_LINEAR == D3D11_DECODE_MIN_FILTER( d3d11Filter ) ) &&   \
                            ( D3D11_FILTER_TYPE_LINEAR == D3D11_DECODE_MAG_FILTER( d3d11Filter ) ) &&   \
                            ( D3D11_FILTER_TYPE_LINEAR == D3D11_DECODE_MIP_FILTER( d3d11Filter ) ) )      
	typedef
		enum D3D11_TEXTURE_ADDRESS_MODE
	{
		D3D11_TEXTURE_ADDRESS_WRAP = 1,
		D3D11_TEXTURE_ADDRESS_MIRROR = 2,
		D3D11_TEXTURE_ADDRESS_CLAMP = 3,
		D3D11_TEXTURE_ADDRESS_BORDER = 4,
		D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5
	} 	D3D11_TEXTURE_ADDRESS_MODE;

	typedef struct D3D11_SAMPLER_DESC
	{
		D3D11_FILTER Filter;
		D3D11_TEXTURE_ADDRESS_MODE AddressU;
		D3D11_TEXTURE_ADDRESS_MODE AddressV;
		D3D11_TEXTURE_ADDRESS_MODE AddressW;
		FLOAT MipLODBias;
		UINT MaxAnisotropy;
		D3D11_COMPARISON_FUNC ComparisonFunc;
		FLOAT BorderColor[4];
		FLOAT MinLOD;
		FLOAT MaxLOD;
	} 	D3D11_SAMPLER_DESC;

	typedef
		enum D3D11_FORMAT_SUPPORT
	{
		D3D11_FORMAT_SUPPORT_BUFFER = 0x1,
		D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 0x2,
		D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER = 0x4,
		D3D11_FORMAT_SUPPORT_SO_BUFFER = 0x8,
		D3D11_FORMAT_SUPPORT_TEXTURE1D = 0x10,
		D3D11_FORMAT_SUPPORT_TEXTURE2D = 0x20,
		D3D11_FORMAT_SUPPORT_TEXTURE3D = 0x40,
		D3D11_FORMAT_SUPPORT_TEXTURECUBE = 0x80,
		D3D11_FORMAT_SUPPORT_SHADER_LOAD = 0x100,
		D3D11_FORMAT_SUPPORT_SHADER_SAMPLE = 0x200,
		D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 0x400,
		D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 0x800,
		D3D11_FORMAT_SUPPORT_MIP = 0x1000,
		D3D11_FORMAT_SUPPORT_MIP_AUTOGEN = 0x2000,
		D3D11_FORMAT_SUPPORT_RENDER_TARGET = 0x4000,
		D3D11_FORMAT_SUPPORT_BLENDABLE = 0x8000,
		D3D11_FORMAT_SUPPORT_DEPTH_STENCIL = 0x10000,
		D3D11_FORMAT_SUPPORT_CPU_LOCKABLE = 0x20000,
		D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 0x40000,
		D3D11_FORMAT_SUPPORT_DISPLAY = 0x80000,
		D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 0x100000,
		D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 0x200000,
		D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 0x400000,
		D3D11_FORMAT_SUPPORT_SHADER_GATHER = 0x800000,
		D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST = 0x1000000,
		D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
		D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = 0x4000000,
		D3D11_FORMAT_SUPPORT_DECODER_OUTPUT = 0x8000000,
		D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT = 0x10000000,
		D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT = 0x20000000,
		D3D11_FORMAT_SUPPORT_VIDEO_ENCODER = 0x40000000
	} 	D3D11_FORMAT_SUPPORT;

	typedef
		enum D3D11_FORMAT_SUPPORT2
	{
		D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 0x1,
		D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 0x2,
		D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
		D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 0x8,
		D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
		D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
		D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 0x40,
		D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE = 0x80,
		D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 0x100,
		D3D11_FORMAT_SUPPORT2_TILED = 0x200,
		D3D11_FORMAT_SUPPORT2_SHAREABLE = 0x400,
		D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 0x4000
	} 	D3D11_FORMAT_SUPPORT2;


	typedef
		enum D3D11_ASYNC_GETDATA_FLAG
	{
		D3D11_ASYNC_GETDATA_DONOTFLUSH = 0x1
	} 	D3D11_ASYNC_GETDATA_FLAG;

	typedef
		enum D3D11_QUERY
	{
		D3D11_QUERY_EVENT = 0,
		D3D11_QUERY_OCCLUSION = (D3D11_QUERY_EVENT + 1),
		D3D11_QUERY_TIMESTAMP = (D3D11_QUERY_OCCLUSION + 1),
		D3D11_QUERY_TIMESTAMP_DISJOINT = (D3D11_QUERY_TIMESTAMP + 1),
		D3D11_QUERY_PIPELINE_STATISTICS = (D3D11_QUERY_TIMESTAMP_DISJOINT + 1),
		D3D11_QUERY_OCCLUSION_PREDICATE = (D3D11_QUERY_PIPELINE_STATISTICS + 1),
		D3D11_QUERY_SO_STATISTICS = (D3D11_QUERY_OCCLUSION_PREDICATE + 1),
		D3D11_QUERY_SO_OVERFLOW_PREDICATE = (D3D11_QUERY_SO_STATISTICS + 1),
		D3D11_QUERY_SO_STATISTICS_STREAM0 = (D3D11_QUERY_SO_OVERFLOW_PREDICATE + 1),
		D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = (D3D11_QUERY_SO_STATISTICS_STREAM0 + 1),
		D3D11_QUERY_SO_STATISTICS_STREAM1 = (D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 + 1),
		D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = (D3D11_QUERY_SO_STATISTICS_STREAM1 + 1),
		D3D11_QUERY_SO_STATISTICS_STREAM2 = (D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 + 1),
		D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = (D3D11_QUERY_SO_STATISTICS_STREAM2 + 1),
		D3D11_QUERY_SO_STATISTICS_STREAM3 = (D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 + 1),
		D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = (D3D11_QUERY_SO_STATISTICS_STREAM3 + 1)
	} 	D3D11_QUERY;

	typedef
		enum D3D11_QUERY_MISC_FLAG
	{
		D3D11_QUERY_MISC_PREDICATEHINT = 0x1
	} 	D3D11_QUERY_MISC_FLAG;

	typedef struct D3D11_QUERY_DESC
	{
		D3D11_QUERY Query;
		UINT MiscFlags;
	} 	D3D11_QUERY_DESC;

	typedef struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
	{
		UINT64 Frequency;
		BOOL Disjoint;
	} 	D3D11_QUERY_DATA_TIMESTAMP_DISJOINT;

	typedef struct D3D11_QUERY_DATA_PIPELINE_STATISTICS
	{
		UINT64 IAVertices;
		UINT64 IAPrimitives;
		UINT64 VSInvocations;
		UINT64 GSInvocations;
		UINT64 GSPrimitives;
		UINT64 CInvocations;
		UINT64 CPrimitives;
		UINT64 PSInvocations;
		UINT64 HSInvocations;
		UINT64 DSInvocations;
		UINT64 CSInvocations;
	} 	D3D11_QUERY_DATA_PIPELINE_STATISTICS;

	typedef struct D3D11_QUERY_DATA_SO_STATISTICS
	{
		UINT64 NumPrimitivesWritten;
		UINT64 PrimitivesStorageNeeded;
	} 	D3D11_QUERY_DATA_SO_STATISTICS;

	typedef
		enum D3D11_COUNTER
	{
		D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000
	} 	D3D11_COUNTER;

	typedef
		enum D3D11_COUNTER_TYPE
	{
		D3D11_COUNTER_TYPE_FLOAT32 = 0,
		D3D11_COUNTER_TYPE_UINT16 = (D3D11_COUNTER_TYPE_FLOAT32 + 1),
		D3D11_COUNTER_TYPE_UINT32 = (D3D11_COUNTER_TYPE_UINT16 + 1),
		D3D11_COUNTER_TYPE_UINT64 = (D3D11_COUNTER_TYPE_UINT32 + 1)
	} 	D3D11_COUNTER_TYPE;

	typedef struct D3D11_COUNTER_DESC
	{
		D3D11_COUNTER Counter;
		UINT MiscFlags;
	} 	D3D11_COUNTER_DESC;

	typedef struct D3D11_COUNTER_INFO
	{
		D3D11_COUNTER LastDeviceDependentCounter;
		UINT NumSimultaneousCounters;
		UINT8 NumDetectableParallelUnits;
	} 	D3D11_COUNTER_INFO;

	typedef
		enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS
	{
		D3D11_STANDARD_MULTISAMPLE_PATTERN = 0xffffffff,
		D3D11_CENTER_MULTISAMPLE_PATTERN = 0xfffffffe
	} 	D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS;

	typedef
		enum D3D11_DEVICE_CONTEXT_TYPE
	{
		D3D11_DEVICE_CONTEXT_IMMEDIATE = 0,
		D3D11_DEVICE_CONTEXT_DEFERRED = (D3D11_DEVICE_CONTEXT_IMMEDIATE + 1)
	} 	D3D11_DEVICE_CONTEXT_TYPE;

	typedef struct D3D11_CLASS_INSTANCE_DESC
	{
		UINT InstanceId;
		UINT InstanceIndex;
		UINT TypeId;
		UINT ConstantBuffer;
		UINT BaseConstantBufferOffset;
		UINT BaseTexture;
		UINT BaseSampler;
		BOOL Created;
	} 	D3D11_CLASS_INSTANCE_DESC;


	typedef
		enum D3D11_FEATURE
	{
		D3D11_FEATURE_THREADING = 0,
		D3D11_FEATURE_DOUBLES = (D3D11_FEATURE_THREADING + 1),
		D3D11_FEATURE_FORMAT_SUPPORT = (D3D11_FEATURE_DOUBLES + 1),
		D3D11_FEATURE_FORMAT_SUPPORT2 = (D3D11_FEATURE_FORMAT_SUPPORT + 1),
		D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = (D3D11_FEATURE_FORMAT_SUPPORT2 + 1),
		D3D11_FEATURE_D3D11_OPTIONS = (D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS + 1),
		D3D11_FEATURE_ARCHITECTURE_INFO = (D3D11_FEATURE_D3D11_OPTIONS + 1),
		D3D11_FEATURE_D3D9_OPTIONS = (D3D11_FEATURE_ARCHITECTURE_INFO + 1),
		D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT = (D3D11_FEATURE_D3D9_OPTIONS + 1),
		D3D11_FEATURE_D3D9_SHADOW_SUPPORT = (D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT + 1),
		D3D11_FEATURE_D3D11_OPTIONS1 = (D3D11_FEATURE_D3D9_SHADOW_SUPPORT + 1),
		D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT = (D3D11_FEATURE_D3D11_OPTIONS1 + 1),
		D3D11_FEATURE_MARKER_SUPPORT = (D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT + 1),
		D3D11_FEATURE_D3D9_OPTIONS1 = (D3D11_FEATURE_MARKER_SUPPORT + 1),
		D3D11_FEATURE_D3D11_OPTIONS2 = (D3D11_FEATURE_D3D9_OPTIONS1 + 1),
		D3D11_FEATURE_D3D11_OPTIONS3 = (D3D11_FEATURE_D3D11_OPTIONS2 + 1),
		D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = (D3D11_FEATURE_D3D11_OPTIONS3 + 1)
	} 	D3D11_FEATURE;

	typedef struct D3D11_FEATURE_DATA_THREADING
	{
		BOOL DriverConcurrentCreates;
		BOOL DriverCommandLists;
	} 	D3D11_FEATURE_DATA_THREADING;

	typedef struct D3D11_FEATURE_DATA_DOUBLES
	{
		BOOL DoublePrecisionFloatShaderOps;
	} 	D3D11_FEATURE_DATA_DOUBLES;

	typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT
	{
		DXGI_FORMAT InFormat;
		UINT OutFormatSupport;
	} 	D3D11_FEATURE_DATA_FORMAT_SUPPORT;

	typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2
	{
		DXGI_FORMAT InFormat;
		UINT OutFormatSupport2;
	} 	D3D11_FEATURE_DATA_FORMAT_SUPPORT2;

	typedef struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
	{
		BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
	} 	D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS;

	// =============================================================================
	// In the D3D11_FEATURE_DATA_D3D11_OPTIONS struct below, 
	// the following groupings of capabilities will always be set identically. 
	// That is, all the BOOLs in a grouping will be TRUE or FALSE together. 
	//  
	// Group: DiscardAPIsSeenByDriver, FlagsForUpdateAndCopySeenByDriver 
	//  
	// Group: ClearView, CopyWithOverlap, ConstantBufferPartialUpdate 
	//        ConstantBufferOffsetting, MapNoOverwriteOnDynamicConstantBuffer 
	//  
	// Group: MapNoOverwriteOnDynamicBufferSRV, 
	//        MultisampleRTVWithForcedSampleCountOne 
	//  
	typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS
	{
		BOOL OutputMergerLogicOp;
		BOOL UAVOnlyRenderingForcedSampleCount;
		BOOL DiscardAPIsSeenByDriver;
		BOOL FlagsForUpdateAndCopySeenByDriver;
		BOOL ClearView;
		BOOL CopyWithOverlap;
		BOOL ConstantBufferPartialUpdate;
		BOOL ConstantBufferOffsetting;
		BOOL MapNoOverwriteOnDynamicConstantBuffer;
		BOOL MapNoOverwriteOnDynamicBufferSRV;
		BOOL MultisampleRTVWithForcedSampleCountOne;
		BOOL SAD4ShaderInstructions;
		BOOL ExtendedDoublesShaderInstructions;
		BOOL ExtendedResourceSharing;
	} 	D3D11_FEATURE_DATA_D3D11_OPTIONS;

	typedef struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO
	{
		BOOL TileBasedDeferredRenderer;
	} 	D3D11_FEATURE_DATA_ARCHITECTURE_INFO;

	typedef struct D3D11_FEATURE_DATA_D3D9_OPTIONS
	{
		BOOL FullNonPow2TextureSupport;
	} 	D3D11_FEATURE_DATA_D3D9_OPTIONS;

	typedef struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
	{
		BOOL SupportsDepthAsTextureWithLessEqualComparisonFilter;
	} 	D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT;

	typedef
		enum D3D11_SHADER_MIN_PRECISION_SUPPORT
	{
		D3D11_SHADER_MIN_PRECISION_10_BIT = 0x1,
		D3D11_SHADER_MIN_PRECISION_16_BIT = 0x2
	} 	D3D11_SHADER_MIN_PRECISION_SUPPORT;

	typedef struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
	{
		UINT PixelShaderMinPrecision;
		UINT AllOtherShaderStagesMinPrecision;
	} 	D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT;

	typedef
		enum D3D11_TILED_RESOURCES_TIER
	{
		D3D11_TILED_RESOURCES_NOT_SUPPORTED = 0,
		D3D11_TILED_RESOURCES_TIER_1 = 1,
		D3D11_TILED_RESOURCES_TIER_2 = 2,
		D3D11_TILED_RESOURCES_TIER_3 = 3
	} 	D3D11_TILED_RESOURCES_TIER;

	typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS1
	{
		D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
		BOOL MinMaxFiltering;
		BOOL ClearViewAlsoSupportsDepthOnlyFormats;
		BOOL MapOnDefaultBuffers;
	} 	D3D11_FEATURE_DATA_D3D11_OPTIONS1;

	typedef struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
	{
		BOOL SimpleInstancingSupported;
	} 	D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT;

	typedef struct D3D11_FEATURE_DATA_MARKER_SUPPORT
	{
		BOOL Profile;
	} 	D3D11_FEATURE_DATA_MARKER_SUPPORT;

	typedef struct D3D11_FEATURE_DATA_D3D9_OPTIONS1
	{
		BOOL FullNonPow2TextureSupported;
		BOOL DepthAsTextureWithLessEqualComparisonFilterSupported;
		BOOL SimpleInstancingSupported;
		BOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
	} 	D3D11_FEATURE_DATA_D3D9_OPTIONS1;

	typedef
		enum D3D11_CONSERVATIVE_RASTERIZATION_TIER
	{
		D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED = 0,
		D3D11_CONSERVATIVE_RASTERIZATION_TIER_1 = 1,
		D3D11_CONSERVATIVE_RASTERIZATION_TIER_2 = 2,
		D3D11_CONSERVATIVE_RASTERIZATION_TIER_3 = 3
	} 	D3D11_CONSERVATIVE_RASTERIZATION_TIER;

	typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS2
	{
		BOOL PSSpecifiedStencilRefSupported;
		BOOL TypedUAVLoadAdditionalFormats;
		BOOL ROVsSupported;
		D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
		D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
		BOOL MapOnDefaultTextures;
		BOOL StandardSwizzle;
		BOOL UnifiedMemoryArchitecture;
	} 	D3D11_FEATURE_DATA_D3D11_OPTIONS2;

	typedef struct D3D11_FEATURE_DATA_D3D11_OPTIONS3
	{
		BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
	} 	D3D11_FEATURE_DATA_D3D11_OPTIONS3;

	typedef struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
	{
		UINT MaxGPUVirtualAddressBitsPerResource;
		UINT MaxGPUVirtualAddressBitsPerProcess;
	} 	D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT;

	typedef
		enum D3D11_CREATE_DEVICE_FLAG
	{
		D3D11_CREATE_DEVICE_SINGLETHREADED = 0x1,
		D3D11_CREATE_DEVICE_DEBUG = 0x2,
		D3D11_CREATE_DEVICE_SWITCH_TO_REF = 0x4,
		D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x8,
		D3D11_CREATE_DEVICE_BGRA_SUPPORT = 0x20,
		D3D11_CREATE_DEVICE_DEBUGGABLE = 0x40,
		D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 0x80,
		D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT = 0x100,
		D3D11_CREATE_DEVICE_VIDEO_SUPPORT = 0x800
	} 	D3D11_CREATE_DEVICE_FLAG;

#define	D3D11_SDK_VERSION	( 7 )

	//D3D11_1
	typedef
	enum D3D11_COPY_FLAGS
	{
		D3D11_COPY_NO_OVERWRITE = 0x1,
		D3D11_COPY_DISCARD = 0x2
	} 	D3D11_COPY_FLAGS;

	typedef
		enum D3D11_LOGIC_OP
	{
		D3D11_LOGIC_OP_CLEAR = 0,
		D3D11_LOGIC_OP_SET = (D3D11_LOGIC_OP_CLEAR + 1),
		D3D11_LOGIC_OP_COPY = (D3D11_LOGIC_OP_SET + 1),
		D3D11_LOGIC_OP_COPY_INVERTED = (D3D11_LOGIC_OP_COPY + 1),
		D3D11_LOGIC_OP_NOOP = (D3D11_LOGIC_OP_COPY_INVERTED + 1),
		D3D11_LOGIC_OP_INVERT = (D3D11_LOGIC_OP_NOOP + 1),
		D3D11_LOGIC_OP_AND = (D3D11_LOGIC_OP_INVERT + 1),
		D3D11_LOGIC_OP_NAND = (D3D11_LOGIC_OP_AND + 1),
		D3D11_LOGIC_OP_OR = (D3D11_LOGIC_OP_NAND + 1),
		D3D11_LOGIC_OP_NOR = (D3D11_LOGIC_OP_OR + 1),
		D3D11_LOGIC_OP_XOR = (D3D11_LOGIC_OP_NOR + 1),
		D3D11_LOGIC_OP_EQUIV = (D3D11_LOGIC_OP_XOR + 1),
		D3D11_LOGIC_OP_AND_REVERSE = (D3D11_LOGIC_OP_EQUIV + 1),
		D3D11_LOGIC_OP_AND_INVERTED = (D3D11_LOGIC_OP_AND_REVERSE + 1),
		D3D11_LOGIC_OP_OR_REVERSE = (D3D11_LOGIC_OP_AND_INVERTED + 1),
		D3D11_LOGIC_OP_OR_INVERTED = (D3D11_LOGIC_OP_OR_REVERSE + 1)
	} 	D3D11_LOGIC_OP;

	typedef struct D3D11_RENDER_TARGET_BLEND_DESC1
	{
		BOOL BlendEnable;
		BOOL LogicOpEnable;
		D3D11_BLEND SrcBlend;
		D3D11_BLEND DestBlend;
		D3D11_BLEND_OP BlendOp;
		D3D11_BLEND SrcBlendAlpha;
		D3D11_BLEND DestBlendAlpha;
		D3D11_BLEND_OP BlendOpAlpha;
		D3D11_LOGIC_OP LogicOp;
		UINT8 RenderTargetWriteMask;
	} 	D3D11_RENDER_TARGET_BLEND_DESC1;

	typedef struct D3D11_BLEND_DESC1
	{
		BOOL AlphaToCoverageEnable;
		BOOL IndependentBlendEnable;
		D3D11_RENDER_TARGET_BLEND_DESC1 RenderTarget[8];
	} 	D3D11_BLEND_DESC1;

	typedef struct D3D11_RASTERIZER_DESC1
	{
		D3D11_FILL_MODE FillMode;
		D3D11_CULL_MODE CullMode;
		BOOL FrontCounterClockwise;
		INT DepthBias;
		FLOAT DepthBiasClamp;
		FLOAT SlopeScaledDepthBias;
		BOOL DepthClipEnable;
		BOOL ScissorEnable;
		BOOL MultisampleEnable;
		BOOL AntialiasedLineEnable;
		UINT ForcedSampleCount;
	} 	D3D11_RASTERIZER_DESC1;

//D3D10
#define D3D10_SHADER_DEBUG                          (1 << 0)
#define D3D10_SHADER_SKIP_VALIDATION                (1 << 1)
#define D3D10_SHADER_SKIP_OPTIMIZATION              (1 << 2)
#define D3D10_SHADER_PACK_MATRIX_ROW_MAJOR          (1 << 3)
#define D3D10_SHADER_PACK_MATRIX_COLUMN_MAJOR       (1 << 4)
#define D3D10_SHADER_PARTIAL_PRECISION              (1 << 5)
#define D3D10_SHADER_FORCE_VS_SOFTWARE_NO_OPT       (1 << 6)
#define D3D10_SHADER_FORCE_PS_SOFTWARE_NO_OPT       (1 << 7)
#define D3D10_SHADER_NO_PRESHADER                   (1 << 8)
#define D3D10_SHADER_AVOID_FLOW_CONTROL             (1 << 9)
#define D3D10_SHADER_PREFER_FLOW_CONTROL            (1 << 10)
#define D3D10_SHADER_ENABLE_STRICTNESS              (1 << 11)
#define D3D10_SHADER_ENABLE_BACKWARDS_COMPATIBILITY (1 << 12)
#define D3D10_SHADER_IEEE_STRICTNESS                (1 << 13)
#define D3D10_SHADER_WARNINGS_ARE_ERRORS            (1 << 18)
#define D3D10_SHADER_RESOURCES_MAY_ALIAS            (1 << 19)
#define D3D10_ENABLE_UNBOUNDED_DESCRIPTOR_TABLES    (1 << 20)
#define D3D10_ALL_RESOURCES_BOUND                   (1 << 21)

//#define D3D11_APPEND_ALIGNED_ELEMENT (0xffffffff)

#endif

#endif
