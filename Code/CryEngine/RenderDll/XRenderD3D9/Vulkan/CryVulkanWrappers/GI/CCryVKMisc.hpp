// Copyright 2001-2017 Crytek GmbH / Crytek Group. All rights reserved. 

#pragma once

#define DXGI_FORMAT_DEFINED 1
//Types

typedef uint32 D3DCOLOR;
typedef RECT   D3D11_RECT;

#ifndef CRY_PLATFORM_WINDOWS
	#define SUCCEEDED(x) ((x) >= 0)
	#define FAILED(x)    (!(SUCCEEDED(x)))
	#define S_OK         0
	#define S_FALSE      1

	#define STDMETHODCALLTYPE
	#define STDMETHODVCALLTYPE
	#define THIS void
	#define THIS_
	#define DXGI_STATUS_OCCLUDED             (0x087A0001L)
	#define DXGI_ERROR_INVALID_CALL          (0x887A0001L)
	#define DXGI_ERROR_NOT_FOUND             (0x887A0002L)
	#define DXGI_ERROR_UNSUPPORTED           (0x887A0004L)
	#define DXGI_ERROR_DEVICE_REMOVED        (0x887A0005L)
	#define DXGI_ERROR_DEVICE_HUNG           (0x887A0006L)
	#define DXGI_ERROR_DEVICE_RESET          (0x887A0007L)
	#define DXGI_ERROR_DRIVER_INTERNAL_ERROR (0x887A0020L)

	#define interface struct
	#define STDMETHOD(method)         virtual long int STDMETHODCALLTYPE method
	#define STDMETHOD_(type, method)  virtual type STDMETHODCALLTYPE method
	#define STDMETHODV(method)        virtual long int STDMETHODVCALLTYPE method
	#define STDMETHODV_(type, method) virtual type STDMETHODVCALLTYPE method
	#define CONST const
	#define TEXT(X)                   (X)
#endif

#define DXGI_MWA_NO_WINDOW_CHANGES      ( 1 << 0 )
#define DXGI_MWA_NO_ALT_ENTER           ( 1 << 1 )
#define DXGI_MWA_NO_PRINT_SCREEN        ( 1 << 2 )
#define DXGI_MWA_VALID                  ( 0x7 )

#define D3DCOLOR_ARGB(a, r, g, b)       ((D3DCOLOR)((((a) & 0xff) << 24) | (((r) & 0xff) << 16) | (((g) & 0xff) << 8) | ((b) & 0xff)))
#define D3DCOLOR_RGBA(r, g, b, a)       D3DCOLOR_ARGB(a, r, g, b)
#define D3DCOLOR_XRGB(r, g, b)          D3DCOLOR_ARGB(0xff, r, g, b)
#define D3DCOLOR_COLORVALUE(r, g, b, a) D3DCOLOR_RGBA((unsigned int)((r) * 255.f), (unsigned int)((g) * 255.f), (unsigned int)((b) * 255.f), (unsigned int)((a) * 255.f))

#define D3DSTREAMSOURCE_INDEXEDDATA                              (1 << 30)
#define D3DSTREAMSOURCE_INSTANCEDATA                             (2 << 30)

#define D3D11_PS_CS_UAV_REGISTER_COUNT                           8
#define D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT                    16
#define D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT             128
#define D3D11_COMMONSHADER_CONSTANT_BUFFER_SLOT_COUNT            15
#define D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT        (D3D11_COMMONSHADER_CONSTANT_BUFFER_SLOT_COUNT)
#define D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT         (D3D11_COMMONSHADER_CONSTANT_BUFFER_SLOT_COUNT)
#define D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT                16
#define D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT                       32
#define D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE 16
#define D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT                   8
#define D3D11_DEFAULT_STENCIL_READ_MASK                          (0xff)
#define D3D11_DEFAULT_STENCIL_WRITE_MASK                         (0xff)
#define D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL              (0xffffffff)
#define D3D11_KEEP_UNORDERED_ACCESS_VIEWS                        (0xffffffff)

#define D3D11_BYTES_FROM_BITS(x) (((x) + 7) / 8)

#define D3DCOMPILE_DEBUG               (1 << 0)
#define D3DCOMPILE_WARNINGS_ARE_ERRORS (1 << 1)
#define DXGI_PRESENT_TEST              0x00000001UL

#define	D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT	( 128 )
#define	D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION	( 16384 )
#define	D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION	( 16384 )
#define	D3D11_REQ_MAXANISOTROPY	( 16 )

//////////////////////////////////////////////////////////////////////////
//enums
//////////////////////////////////////////////////////////////////////////
enum { D3D11_SDK_VERSION = 0x0001 };

enum D3D_PRIMITIVE_TOPOLOGY
{
	D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED                  = 0,
	D3D11_PRIMITIVE_TOPOLOGY_POINTLIST                  = 1,
	D3D11_PRIMITIVE_TOPOLOGY_LINELIST                   = 2,
	D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP                  = 3,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST               = 4,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP              = 5,
	D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ               = 10,
	D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ              = 11,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ           = 12,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ          = 13,
	D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST  = 33,
	D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST  = 34,
	D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST  = 35,
	D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST  = 36,
	D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST  = 37,
	D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST  = 38,
	D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST  = 39,
	D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST  = 40,
	D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST  = 41,
	D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
	D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
	D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
	D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
	D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
	D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
	D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
	D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
	D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
	D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
	D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
	D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
	D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
	D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
	D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
	D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
	D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
	D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
	D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
	D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
	D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
	D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
	D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64
};

typedef
enum D3D_DRIVER_TYPE
{
	D3D_DRIVER_TYPE_UNKNOWN = 0,
	D3D_DRIVER_TYPE_HARDWARE = (D3D_DRIVER_TYPE_UNKNOWN + 1),
	D3D_DRIVER_TYPE_REFERENCE = (D3D_DRIVER_TYPE_HARDWARE + 1),
	D3D_DRIVER_TYPE_NULL = (D3D_DRIVER_TYPE_REFERENCE + 1),
	D3D_DRIVER_TYPE_SOFTWARE = (D3D_DRIVER_TYPE_NULL + 1),
	D3D_DRIVER_TYPE_WARP = (D3D_DRIVER_TYPE_SOFTWARE + 1)
} 	D3D_DRIVER_TYPE;

typedef
  enum D3D_PRIMITIVE
{
	D3D_PRIMITIVE_UNDEFINED                = 0,
	D3D_PRIMITIVE_POINT                    = 1,
	D3D_PRIMITIVE_LINE                     = 2,
	D3D_PRIMITIVE_TRIANGLE                 = 3,
	D3D_PRIMITIVE_LINE_ADJ                 = 6,
	D3D_PRIMITIVE_TRIANGLE_ADJ             = 7,
	D3D_PRIMITIVE_1_CONTROL_POINT_PATCH    = 8,
	D3D_PRIMITIVE_2_CONTROL_POINT_PATCH    = 9,
	D3D_PRIMITIVE_3_CONTROL_POINT_PATCH    = 10,
	D3D_PRIMITIVE_4_CONTROL_POINT_PATCH    = 11,
	D3D_PRIMITIVE_5_CONTROL_POINT_PATCH    = 12,
	D3D_PRIMITIVE_6_CONTROL_POINT_PATCH    = 13,
	D3D_PRIMITIVE_7_CONTROL_POINT_PATCH    = 14,
	D3D_PRIMITIVE_8_CONTROL_POINT_PATCH    = 15,
	D3D_PRIMITIVE_9_CONTROL_POINT_PATCH    = 16,
	D3D_PRIMITIVE_10_CONTROL_POINT_PATCH   = 17,
	D3D_PRIMITIVE_11_CONTROL_POINT_PATCH   = 18,
	D3D_PRIMITIVE_12_CONTROL_POINT_PATCH   = 19,
	D3D_PRIMITIVE_13_CONTROL_POINT_PATCH   = 20,
	D3D_PRIMITIVE_14_CONTROL_POINT_PATCH   = 21,
	D3D_PRIMITIVE_15_CONTROL_POINT_PATCH   = 22,
	D3D_PRIMITIVE_16_CONTROL_POINT_PATCH   = 23,
	D3D_PRIMITIVE_17_CONTROL_POINT_PATCH   = 24,
	D3D_PRIMITIVE_18_CONTROL_POINT_PATCH   = 25,
	D3D_PRIMITIVE_19_CONTROL_POINT_PATCH   = 26,
	D3D_PRIMITIVE_20_CONTROL_POINT_PATCH   = 28,
	D3D_PRIMITIVE_21_CONTROL_POINT_PATCH   = 29,
	D3D_PRIMITIVE_22_CONTROL_POINT_PATCH   = 30,
	D3D_PRIMITIVE_23_CONTROL_POINT_PATCH   = 31,
	D3D_PRIMITIVE_24_CONTROL_POINT_PATCH   = 32,
	D3D_PRIMITIVE_25_CONTROL_POINT_PATCH   = 33,
	D3D_PRIMITIVE_26_CONTROL_POINT_PATCH   = 34,
	D3D_PRIMITIVE_27_CONTROL_POINT_PATCH   = 35,
	D3D_PRIMITIVE_28_CONTROL_POINT_PATCH   = 36,
	D3D_PRIMITIVE_29_CONTROL_POINT_PATCH   = 37,
	D3D_PRIMITIVE_30_CONTROL_POINT_PATCH   = 38,
	D3D_PRIMITIVE_31_CONTROL_POINT_PATCH   = 39,
	D3D_PRIMITIVE_32_CONTROL_POINT_PATCH   = 40,
	D3D10_PRIMITIVE_UNDEFINED              = D3D_PRIMITIVE_UNDEFINED,
	D3D10_PRIMITIVE_POINT                  = D3D_PRIMITIVE_POINT,
	D3D10_PRIMITIVE_LINE                   = D3D_PRIMITIVE_LINE,
	D3D10_PRIMITIVE_TRIANGLE               = D3D_PRIMITIVE_TRIANGLE,
	D3D10_PRIMITIVE_LINE_ADJ               = D3D_PRIMITIVE_LINE_ADJ,
	D3D10_PRIMITIVE_TRIANGLE_ADJ           = D3D_PRIMITIVE_TRIANGLE_ADJ,
	D3D11_PRIMITIVE_UNDEFINED              = D3D_PRIMITIVE_UNDEFINED,
	D3D11_PRIMITIVE_POINT                  = D3D_PRIMITIVE_POINT,
	D3D11_PRIMITIVE_LINE                   = D3D_PRIMITIVE_LINE,
	D3D11_PRIMITIVE_TRIANGLE               = D3D_PRIMITIVE_TRIANGLE,
	D3D11_PRIMITIVE_LINE_ADJ               = D3D_PRIMITIVE_LINE_ADJ,
	D3D11_PRIMITIVE_TRIANGLE_ADJ           = D3D_PRIMITIVE_TRIANGLE_ADJ,
	D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_1_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_2_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_3_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_4_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_5_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_6_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_7_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_8_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH  = D3D_PRIMITIVE_9_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH = D3D_PRIMITIVE_10_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH = D3D_PRIMITIVE_11_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH = D3D_PRIMITIVE_12_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH = D3D_PRIMITIVE_13_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH = D3D_PRIMITIVE_14_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH = D3D_PRIMITIVE_15_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH = D3D_PRIMITIVE_16_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH = D3D_PRIMITIVE_17_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH = D3D_PRIMITIVE_18_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH = D3D_PRIMITIVE_19_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH = D3D_PRIMITIVE_20_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH = D3D_PRIMITIVE_21_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH = D3D_PRIMITIVE_22_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH = D3D_PRIMITIVE_23_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH = D3D_PRIMITIVE_24_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH = D3D_PRIMITIVE_25_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH = D3D_PRIMITIVE_26_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH = D3D_PRIMITIVE_27_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH = D3D_PRIMITIVE_28_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH = D3D_PRIMITIVE_29_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH = D3D_PRIMITIVE_30_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH = D3D_PRIMITIVE_31_CONTROL_POINT_PATCH,
	D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH = D3D_PRIMITIVE_32_CONTROL_POINT_PATCH
}   D3D_PRIMITIVE;

enum D3D_SHADER_INPUT_TYPE
{
	D3D10_SIT_CBUFFER          = 0,
	D3D10_SIT_TBUFFER          = 1,
	D3D10_SIT_TEXTURE          = 2,
	D3D10_SIT_SAMPLER          = 3,
	D3D_SIT_UAV_RWSTRUCTURED   = 4,
	D3D11_SIT_UAV_RWSTRUCTURED = D3D_SIT_UAV_RWSTRUCTURED,
	D3D10_SIT_INTERNAL         = 0xff
};

enum D3D11_RESOURCE_RETURN_TYPE
{
	D3D11_RETURN_TYPE_UNORM = 1,
	D3D11_RETURN_TYPE_SNORM = 2,
	D3D11_RETURN_TYPE_SINT  = 3,
	D3D11_RETURN_TYPE_UINT  = 4,
	D3D11_RETURN_TYPE_FLOAT = 5,
	D3D11_RETURN_TYPE_MIXED = 6,
};

enum D3D10_SRV_DIMENSION
{
	D3D10_SRV_DIMENSION_UNKNOWN          = 0,
	D3D10_SRV_DIMENSION_BUFFER           = 1,
	D3D10_SRV_DIMENSION_TEXTURE1D        = 2,
	D3D10_SRV_DIMENSION_TEXTURE1DARRAY   = 3,
	D3D10_SRV_DIMENSION_TEXTURE2D        = 4,
	D3D10_SRV_DIMENSION_TEXTURE2DARRAY   = 5,
	D3D10_SRV_DIMENSION_TEXTURE2DMS      = 6,
	D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
	D3D10_SRV_DIMENSION_TEXTURE3D        = 8,
	D3D10_SRV_DIMENSION_TEXTURECUBE      = 9,
};

enum D3D10_SHADER_VARIABLE_TYPE
{
	D3D11_SVT_VOID             = 0,
	D3D11_SVT_BOOL             = 1,
	D3D11_SVT_INT              = 2,
	D3D11_SVT_FLOAT            = 3,
	D3D11_SVT_STRING           = 4,
	D3D11_SVT_TEXTURE          = 5,
	D3D11_SVT_TEXTURE1D        = 6,
	D3D11_SVT_TEXTURE2D        = 7,
	D3D11_SVT_TEXTURE3D        = 8,
	D3D11_SVT_TEXTURECUBE      = 9,
	D3D11_SVT_SAMPLER          = 10,
	D3D11_SVT_PIXELSHADER      = 15,
	D3D11_SVT_VERTEXSHADER     = 16,
	D3D11_SVT_UINT             = 19,
	D3D11_SVT_UINT8            = 20,
	D3D11_SVT_GEOMETRYSHADER   = 21,
	D3D11_SVT_RASTERIZER       = 22,
	D3D11_SVT_DEPTHSTENCIL     = 23,
	D3D11_SVT_BLEND            = 24,
	D3D11_SVT_BUFFER           = 25,
	D3D11_SVT_CBUFFER          = 26,
	D3D11_SVT_TBUFFER          = 27,
	D3D11_SVT_TEXTURE1DARRAY   = 28,
	D3D11_SVT_TEXTURE2DARRAY   = 29,
	D3D11_SVT_RENDERTARGETVIEW = 30,
	D3D11_SVT_DEPTHSTENCILVIEW = 31,
	D3D11_SVT_FORCE_DWORD      = 0x7fffffff,
};

enum D3D10_SHADER_CBUFFER_FLAGS
{
	D3D10_CBF_USERPACKED  = 1,
	D3D11_CBF_FORCE_DWORD = 0x7fffffff,
};

enum D3D10_SHADER_VARIABLE_FLAGS
{
	D3D10_SVF_USERPACKED  = 1,
	D3D10_SVF_USED        = 2,
	D3D10_SVF_FORCE_DWORD = 0x7fffffff,
};

enum D3D10_SHADER_INPUT_FLAGS
{
	D3D10_SIF_USERPACKED         = 1,
	D3D10_SIF_COMPARISON_SAMPLER = 2,
	D3D10_SIF_FORCE_DWORD        = 0x7fffffff,
};

enum D3D11_PASS
{
	D3D11_PASS_ZONLY            = 0x1,
	D3D11_PASS_ZCULLUPDATE      = 0x2,
	D3D11_PASS_DIFFUSE          = 0x3,
	D3D11_PASS_LIGHTING         = 0x4,
	D3D11_PASS_DONESHADOWLAYER0 = 0x5,
	D3D11_PASS_DONESHADOWLAYER1 = 0x6,
	D3D11_PASS_DONESHADOWLAYER2 = 0x7,
};


enum D3D10_NAME
{
	D3D11_NAME_UNDEFINED                 = 0,
	D3D11_NAME_POSITION                  = 1,
	D3D11_NAME_CLIP_DISTANCE             = 2,
	D3D11_NAME_CULL_DISTANCE             = 3,
	D3D11_NAME_RENDER_TARGET_ARRAY_INDEX = 4,
	D3D11_NAME_VIEWPORT_ARRAY_INDEX      = 5,
	D3D11_NAME_VERTEX_ID                 = 6,
	D3D11_NAME_PRIMITIVE_ID              = 7,
	D3D11_NAME_INSTANCE_ID               = 8,
	D3D11_NAME_IS_FRONT_FACE             = 9,
	D3D11_NAME_TARGET                    = 64,
	D3D11_NAME_DEPTH                     = 65,
};

enum D3D11_REGISTER_COMPONENT_TYPE
{
	D3D11_REGISTER_COMPONENT_UNKNOWN = 0,
	D3D11_REGISTER_COMPONENT_UINT32  = 1,
	D3D11_REGISTER_COMPONENT_SINT32  = 2,
	D3D11_REGISTER_COMPONENT_FLOAT32 = 3,
};

#define D3DTADDRESS_WRAP D3D11_TEXTURE_ADDRESS_WRAP

enum D3DSWAPEFFECT
{
	D3DSWAPEFFECT_DISCARD     = 1,
	D3DSWAPEFFECT_FLIP        = 2,
	D3DSWAPEFFECT_COPY        = 3,
	D3DSWAPEFFECT_FORCE_DWORD = 0xFFFFFFFF,
};

enum D3D11_SHADER_Constants
{
	D3D10_SHADER_DEBUG                          = 1,
	D3D10_SHADER_SKIP_VALIDATION                = 1 << 1,
	D3D10_SHADER_SKIP_OPTIMIZATION              = 1 << 2,
	D3D10_SHADER_PACK_MATRIX_ROW_MAJOR          = 1 << 3,
	D3D10_SHADER_PACK_MATRIX_COLUMN_MAJOR       = 1 << 4,
	D3D10_SHADER_PARTIAL_PRECISION              = 1 << 5,
	D3D10_SHADER_FORCE_VS_SOFTWARE_NO_OPT       = 1 << 6,
	D3D10_SHADER_FORCE_PS_SOFTWARE_NO_OPT       = 1 << 7,
	D3D10_SHADER_NO_PRESHADER                   = 1 << 8,
	D3D10_SHADER_AVOID_FLOW_CONTROL             = 1 << 9,
	D3D10_SHADER_PREFER_FLOW_CONTROL            = 1 << 10,
	D3D10_SHADER_ENABLE_STRICTNESS              = 1 << 11,
	D3D10_SHADER_ENABLE_BACKWARDS_COMPATIBILITY = 1 << 12,
	D3D10_SHADER_IEEE_STRICTNESS                = 1 << 13,
	D3D10_SHADER_OPTIMIZATION_LEVEL0            = 1 << 14,
	D3D10_SHADER_OPTIMIZATION_LEVEL1            = 0,
	D3D10_SHADER_OPTIMIZATION_LEVEL2            = (1 << 14) | (1 << 15),
	D3D10_SHADER_OPTIMIZATION_LEVEL3            = 1 << 15,
};

enum D3DX11_IMAGE_FILE_FORMAT
{
	D3DX11_IFF_BMP         = 0,
	D3DX11_IFF_JPG         = 1,
	D3DX11_IFF_PNG         = 3,
	D3DX11_IFF_DDS         = 4,
	D3DX11_IFF_TIFF        = 10,
	D3DX11_IFF_GIF         = 11,
	D3DX11_IFF_WMP         = 12,
	D3DX11_IFF_TGA         = 100,                          // Not part of DX11 spec
	D3DX11_IFF_FORCE_DWORD = 0x7fffffff,
};

enum D3DTEXTUREFILTERTYPE
{
	D3DTEXF_NONE          = 0,
	D3DTEXF_POINT         = 1,
	D3DTEXF_LINEAR        = 2,
	D3DTEXF_ANISOTROPIC   = 3,
	D3DTEXF_PYRAMIDALQUAD = 6,
	D3DTEXF_GAUSSIANQUAD  = 7,
	D3DTEXF_FORCE_DWORD   = 0x7fffffff,
};

enum D3DMULTISAMPLE_TYPE
{
	D3DMULTISAMPLE_NONE        = 0,
	D3DMULTISAMPLE_NONMASKABLE = 1,
	D3DMULTISAMPLE_2_SAMPLES   = 2,
	D3DMULTISAMPLE_3_SAMPLES   = 3,
	D3DMULTISAMPLE_4_SAMPLES   = 4,
	D3DMULTISAMPLE_5_SAMPLES   = 5,
	D3DMULTISAMPLE_6_SAMPLES   = 6,
	D3DMULTISAMPLE_7_SAMPLES   = 7,
	D3DMULTISAMPLE_8_SAMPLES   = 8,
	D3DMULTISAMPLE_9__SAMPLES  = 9,
	D3DMULTISAMPLE_10_SAMPLES  = 10,
	D3DMULTISAMPLE_11_SAMPLES  = 11,
	D3DMULTISAMPLE_12_SAMPLES  = 12,
	D3DMULTISAMPLE_13_SAMPLES  = 13,
	D3DMULTISAMPLE_14_SAMPLES  = 14,
	D3DMULTISAMPLE_15_SAMPLES  = 15,
	D3DMULTISAMPLE_16_SAMPLES  = 16,
	D3DMULTISAMPLE_FORCE_DWORD = 0xffffffff,
};



enum D3DCUBEMAP_FACES
{
	D3DCUBEMAP_FACE_POSITIVE_X  = 0,
	D3DCUBEMAP_FACE_NEGATIVE_X  = 1,
	D3DCUBEMAP_FACE_POSITIVE_Y  = 2,
	D3DCUBEMAP_FACE_NEGATIVE_Y  = 3,
	D3DCUBEMAP_FACE_POSITIVE_Z  = 4,
	D3DCUBEMAP_FACE_NEGATIVE_Z  = 5,
	D3DCUBEMAP_FACE_FORCE_DWORD = 0xffffffff,
};


typedef enum D3DX11_FILTER_FLAG
{
	D3DX11_FILTER_NONE             = (1 << 0),
	D3DX11_FILTER_POINT            = (2 << 0),
	D3DX11_FILTER_LINEAR           = (3 << 0),
	D3DX11_FILTER_TRIANGLE         = (4 << 0),
	D3DX11_FILTER_BOX              = (5 << 0),

	D3DX11_FILTER_MIRROR_U         = (1 << 16),
	D3DX11_FILTER_MIRROR_V         = (2 << 16),
	D3DX11_FILTER_MIRROR_W         = (4 << 16),
	D3DX11_FILTER_MIRROR           = (7 << 16),

	D3DX11_FILTER_DITHER           = (1 << 19),
	D3DX11_FILTER_DITHER_DIFFUSION = (2 << 19),
} D3DX11_FILTER_FLAG;

enum D3D10_DEVICE_STATE_TYPES
{
	D3D11_DST_SO_BUFFERS = 1,
	D3D11_DST_OM_RENDER_TARGETS,
	D3D11_DST_OM_DEPTH_STENCIL_STATE,
	D3D11_DST_OM_BLEND_STATE,
	D3D11_DST_VS,
	D3D11_DST_VS_SAMPLERS,
	D3D11_DST_VS_SHADER_RESOURCES,
	D3D11_DST_VS_CONSTANT_BUFFERS,
	D3D11_DST_GS,
	D3D11_DST_GS_SAMPLERS,
	D3D11_DST_GS_SHADER_RESOURCES,
	D3D11_DST_GS_CONSTANT_BUFFERS,
	D3D11_DST_PS,
	D3D11_DST_PS_SAMPLERS,
	D3D11_DST_PS_SHADER_RESOURCES,
	D3D11_DST_PS_CONSTANT_BUFFERS,
	D3D11_DST_IA_VERTEX_BUFFERS,
	D3D11_DST_IA_INDEX_BUFFER,
	D3D11_DST_IA_INPUT_LAYOUT,
	D3D11_DST_IA_PRIMITIVE_TOPOLOGY,
	D3D11_DST_RS_VIEWPORTS,
	D3D11_DST_RS_SCISSOR_RECTS,
	D3D11_DST_RS_RASTERIZER_STATE,
	D3D11_DST_PREDICATION,
};

// DirectX 11 additions

typedef
enum D3D_FEATURE_LEVEL
{
	D3D_FEATURE_LEVEL_9_1 = 0x9100,
	D3D_FEATURE_LEVEL_9_2 = 0x9200,
	D3D_FEATURE_LEVEL_9_3 = 0x9300,
	D3D_FEATURE_LEVEL_10_0 = 0xa000,
	D3D_FEATURE_LEVEL_10_1 = 0xa100,
	D3D_FEATURE_LEVEL_11_0 = 0xb000,
	D3D_FEATURE_LEVEL_11_1 = 0xb100,
	D3D_FEATURE_LEVEL_12_0 = 0xc000,
	D3D_FEATURE_LEVEL_12_1 = 0xc100
} 	D3D_FEATURE_LEVEL;

typedef enum D3D_SRV_DIMENSION
{
	D3D11_SRV_DIMENSION_UNKNOWN = 0,
	D3D11_SRV_DIMENSION_BUFFER = 1,
	D3D11_SRV_DIMENSION_TEXTURE1D = 2,
	D3D11_SRV_DIMENSION_TEXTURE1DARRAY = 3,
	D3D11_SRV_DIMENSION_TEXTURE2D = 4,
	D3D11_SRV_DIMENSION_TEXTURE2DARRAY = 5,
	D3D11_SRV_DIMENSION_TEXTURE2DMS = 6,
	D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
	D3D11_SRV_DIMENSION_TEXTURE3D = 8,
	D3D11_SRV_DIMENSION_TEXTURECUBE = 9,
	D3D11_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
	D3D11_SRV_DIMENSION_BUFFEREX = 11
}   D3D11_SRV_DIMENSION;

enum D3D11_TEXTURE_TILE_MODE
{
	D3D11_TEXTURE_TILE_MODE_LINEAR_GENERAL = 0,
	D3D11_TEXTURE_TILE_MODE_LINEAR_ALIGNED = 1,
	D3D11_TEXTURE_TILE_MODE_OPTIMAL        = 2,
};

enum
{
	D3D11_DEFAULT_MIN_ANISOTROPY = 1,
	D3D11_DEFAULT_MAX_ANISOTROPY = 16,
};

#define IID_ID3D11ShaderReflection              0

#define D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT (4096)

typedef uint8 UINT8;
typedef f32   FLOAT;

#define D3D_OK           0
#define D3DXToRadian(X) ((X) * (3.14159265f / 180.f))
#define D3DGETDATA_FLUSH (1 << 0)
#define MAXD3DDECLLENGTH 64

//////////////////////////////////////////////////////////////////////////
//enums
//////////////////////////////////////////////////////////////////////////
#ifndef MAKEFOURCC
	#define MAKEFOURCC(ch0, ch1, ch2, ch3)                                              \
	  ((unsigned int)(unsigned char)(ch0) | ((unsigned int)(unsigned char)(ch1) << 8) | \
	   ((unsigned int)(unsigned char)(ch2) << 16) | ((unsigned int)(unsigned char)(ch3) << 24))
#endif // defined(MAKEFOURCC)

typedef enum _D3DFORMAT
{
	D3DFMT_UNKNOWN       = 0,

	D3DFMT_R8G8B8        = 20,
	D3DFMT_A8R8G8B8      = 21,
	D3DFMT_X8R8G8B8      = 22,
	D3DFMT_R5G6B5        = 23,
	D3DFMT_X1R5G5B5      = 24,
	D3DFMT_A1R5G5B5      = 25,
	D3DFMT_A4R4G4B4      = 26,
	D3DFMT_R3G3B2        = 27,
	D3DFMT_A8            = 28,
	D3DFMT_A8R3G3B2      = 29,
	D3DFMT_X4R4G4B4      = 30,
	D3DFMT_A2B10G10R10   = 31,
	D3DFMT_A8B8G8R8      = 32,
	D3DFMT_X8B8G8R8      = 33,
	D3DFMT_G16R16        = 34,
	D3DFMT_A2R10G10B10   = 35,
	D3DFMT_A16B16G16R16  = 36,

	D3DFMT_A8P8          = 40,
	D3DFMT_P8            = 41,

	D3DFMT_L8            = 50,
	D3DFMT_A8L8          = 51,
	D3DFMT_A4L4          = 52,

	D3DFMT_V8U8          = 60,
	D3DFMT_L6V5U5        = 61,
	D3DFMT_X8L8V8U8      = 62,
	D3DFMT_Q8W8V8U8      = 63,
	D3DFMT_V16U16        = 64,
	D3DFMT_A2W10V10U10   = 67,

	D3DFMT_UYVY          = MAKEFOURCC('U', 'Y', 'V', 'Y'),
	D3DFMT_R8G8_B8G8     = MAKEFOURCC('R', 'G', 'B', 'G'),
	D3DFMT_YUY2          = MAKEFOURCC('Y', 'U', 'Y', '2'),
	D3DFMT_G8R8_G8B8     = MAKEFOURCC('G', 'R', 'G', 'B'),
	D3DFMT_DXT1          = MAKEFOURCC('D', 'X', 'T', '1'),
	D3DFMT_DXT2          = MAKEFOURCC('D', 'X', 'T', '2'),
	D3DFMT_DXT3          = MAKEFOURCC('D', 'X', 'T', '3'),
	D3DFMT_DXT4          = MAKEFOURCC('D', 'X', 'T', '4'),
	D3DFMT_DXT5          = MAKEFOURCC('D', 'X', 'T', '5'),

	D3DFMT_D16_LOCKABLE  = 70,
	D3DFMT_D32           = 71,
	D3DFMT_D15S1         = 73,
	D3DFMT_D24S8         = 75,
	D3DFMT_D24X8         = 77,
	D3DFMT_D24X4S4       = 79,
	D3DFMT_D16           = 80,

	D3DFMT_D32F_LOCKABLE = 82,
	D3DFMT_D24FS8        = 83,

	D3DFMT_L16           = 81,

	D3DFMT_VERTEXDATA    = 100,
	D3DFMT_INDEX16       = 101,
	D3DFMT_INDEX32       = 102,

	D3DFMT_Q16W16V16U16  = 110,

	D3DFMT_MULTI2_ARGB8  = MAKEFOURCC('M', 'E', 'T', '1'),

	// Floating point surface formats

	// s10e5 formats (16-bits per channel)
	D3DFMT_R16F          = 111,
	D3DFMT_G16R16F       = 112,
	D3DFMT_A16B16G16R16F = 113,

	// IEEE s23e8 formats (32-bits per channel)
	D3DFMT_R32F          = 114,
	D3DFMT_G32R32F       = 115,
	D3DFMT_A32B32G32R32F = 116,

	D3DFMT_CxV8U8        = 117,

	D3DFMT_FORCE_DWORD   = 0x7fffffff
} D3DFORMAT;

typedef enum _D3DBLEND
{
	D3DBLEND_ZERO            = 1,
	D3DBLEND_ONE             = 2,
	D3DBLEND_SRCCOLOR        = 3,
	D3DBLEND_INVSRCCOLOR     = 4,
	D3DBLEND_SRCALPHA        = 5,
	D3DBLEND_INVSRCALPHA     = 6,
	D3DBLEND_DESTALPHA       = 7,
	D3DBLEND_INVDESTALPHA    = 8,
	D3DBLEND_DESTCOLOR       = 9,
	D3DBLEND_INVDESTCOLOR    = 10,
	D3DBLEND_SRCALPHASAT     = 11,
	D3DBLEND_BOTHSRCALPHA    = 12,
	D3DBLEND_BOTHINVSRCALPHA = 13,
	D3DBLEND_BLENDFACTOR     = 14,
	D3DBLEND_INVBLENDFACTOR  = 15,
	D3DBLEND_FORCE_DWORD     = 0x7fffffff
}D3DBLEND;

typedef enum _D3DRESOURCETYPE
{
	D3DRTYPE_SURFACE       = 1,
	D3DRTYPE_VOLUME        = 2,
	D3DRTYPE_TEXTURE       = 3,
	D3DRTYPE_VOLUMETEXTURE = 4,
	D3DRTYPE_CUBETEXTURE   = 5,
	D3DRTYPE_VERTEXBUFFER  = 6,
	D3DRTYPE_INDEXBUFFER   = 7,
	D3DRTYPE_FORCE_DWORD   = 0x7fffffff
} D3DRESOURCETYPE;

typedef enum _D3DPOOL
{
	D3DPOOL_DEFAULT     = 0,
	D3DPOOL_MANAGED     = 1,
	D3DPOOL_SYSTEMMEM   = 2,
	D3DPOOL_SCRATCH     = 3,
	D3DPOOL_FORCE_DWORD = 0x7fffffff
} D3DPOOL;

enum FVF
{
	D3DFVF_RESERVED0 = 0x001,
	D3DFVF_XYZ       = 0x002,
	D3DFVF_XYZRHW    = 0x004,
	D3DFVF_XYZB1     = 0x006,
	D3DFVF_XYZB2     = 0x008,
	D3DFVF_XYZB3     = 0x00a,
	D3DFVF_XYZB4     = 0x00c,
	D3DFVF_XYZB5     = 0x00e,
	D3DFVF_XYZW      = 0x4002,

	D3DFVF_NORMAL    = 0x010,
	D3DFVF_PSIZE     = 0x020,
	D3DFVF_DIFFUSE   = 0x040,
	D3DFVF_SPECULAR  = 0x080,

	D3DFVF_TEX0      = 0x000,
	D3DFVF_TEX1      = 0x100,
	D3DFVF_TEX2      = 0x200,
	D3DFVF_TEX3      = 0x300,
	D3DFVF_TEX4      = 0x400,
	D3DFVF_TEX5      = 0x500,
	D3DFVF_TEX6      = 0x600,
	D3DFVF_TEX7      = 0x700,
	D3DFVF_TEX8      = 0x800,
};

enum D3DDEVTYPE
{
	D3DDEVTYPE_HAL         = 1,
	D3DDEVTYPE_REF         = 2,
	D3DDEVTYPE_SW          = 3,
	D3DDEVTYPE_NULLREF     = 4,
	D3DDEVTYPE_FORCE_DWORD = 0x7fffffff
};

enum D3DPRESENT_INTERVAL
{
	D3DPRESENT_INTERVAL_DEFAULT   = 0x0,
	D3DPRESENT_INTERVAL_ONE       = 0x1,
	D3DPRESENT_INTERVAL_TWO       = 0x2,
	D3DPRESENT_INTERVAL_THREE     = 0x4,
	D3DPRESENT_INTERVAL_FOUR      = 0x8,
	D3DPRESENT_INTERVAL_IMMEDIATE = 0x80000000,
};

enum D3DCREATE_FLAGS
{
	D3DCREATE_FPU_PRESERVE                 = 0x00000002,
	D3DCREATE_MULTITHREADED                = 0x00000004,

	D3DCREATE_PUREDEVICE                   = 0x00000010,
	D3DCREATE_SOFTWARE_VERTEXPROCESSING    = 0x00000020,
	D3DCREATE_HARDWARE_VERTEXPROCESSING    = 0x00000040,
	D3DCREATE_MIXED_VERTEXPROCESSING       = 0x00000080,

	D3DCREATE_DISABLE_DRIVER_MANAGEMENT    = 0x00000100,
	D3DCREATE_ADAPTERGROUP_DEVICE          = 0x00000200,
	D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX = 0x00000400,
};

//////////////////////////////////////////////////////////////////////////
//struct
//////////////////////////////////////////////////////////////////////////
struct D3D11_SUBRESOURCE_DATA;
struct D3D11_SO_DECLARATION_ENTRY;
struct D3D11_COUNTER_DESC;
struct D3D11_COUNTER_INFO;
struct DXGI_FRAME_STATISTICS;

struct SCryPresentParams
{
	uint32 BackBufferWidth;
	uint32 BackBufferHeight;
	struct
	{
		uint32 ScaledOutputWidth;
		uint32 ScaledOutputHeight;
	} VideoScalerParameters;
};

struct SCryVideoMode
{
	uint32 dwDisplayWidth;
	uint32 dwDisplayHeight;
	uint32 ResolutionID;
	bool   fIsWideScreen;
	bool   fIsInterlaced;
	bool   fIsHiDef;
	float  RefreshRate;
};


class ID3D11Debug
{
public:
	HRESULT ValidateContext(void* pContext) { return S_OK; }
	void    Release()                       {}
};

typedef enum DXGI_FORMAT
{
	DXGI_FORMAT_UNKNOWN = 0,
	DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
	DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
	DXGI_FORMAT_R32G32B32A32_UINT = 3,
	DXGI_FORMAT_R32G32B32A32_SINT = 4,
	DXGI_FORMAT_R32G32B32_TYPELESS = 5,
	DXGI_FORMAT_R32G32B32_FLOAT = 6,
	DXGI_FORMAT_R32G32B32_UINT = 7,
	DXGI_FORMAT_R32G32B32_SINT = 8,
	DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
	DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
	DXGI_FORMAT_R16G16B16A16_UNORM = 11,
	DXGI_FORMAT_R16G16B16A16_UINT = 12,
	DXGI_FORMAT_R16G16B16A16_SNORM = 13,
	DXGI_FORMAT_R16G16B16A16_SINT = 14,
	DXGI_FORMAT_R32G32_TYPELESS = 15,
	DXGI_FORMAT_R32G32_FLOAT = 16,
	DXGI_FORMAT_R32G32_UINT = 17,
	DXGI_FORMAT_R32G32_SINT = 18,
	DXGI_FORMAT_R32G8X24_TYPELESS = 19,
	DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
	DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
	DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
	DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
	DXGI_FORMAT_R10G10B10A2_UNORM = 24,
	DXGI_FORMAT_R10G10B10A2_UINT = 25,
	DXGI_FORMAT_R11G11B10_FLOAT = 26,
	DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
	DXGI_FORMAT_R8G8B8A8_UNORM = 28,
	DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
	DXGI_FORMAT_R8G8B8A8_UINT = 30,
	DXGI_FORMAT_R8G8B8A8_SNORM = 31,
	DXGI_FORMAT_R8G8B8A8_SINT = 32,
	DXGI_FORMAT_R16G16_TYPELESS = 33,
	DXGI_FORMAT_R16G16_FLOAT = 34,
	DXGI_FORMAT_R16G16_UNORM = 35,
	DXGI_FORMAT_R16G16_UINT = 36,
	DXGI_FORMAT_R16G16_SNORM = 37,
	DXGI_FORMAT_R16G16_SINT = 38,
	DXGI_FORMAT_R32_TYPELESS = 39,
	DXGI_FORMAT_D32_FLOAT = 40,
	DXGI_FORMAT_R32_FLOAT = 41,
	DXGI_FORMAT_R32_UINT = 42,
	DXGI_FORMAT_R32_SINT = 43,
	DXGI_FORMAT_R24G8_TYPELESS = 44,
	DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
	DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
	DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
	DXGI_FORMAT_R8G8_TYPELESS = 48,
	DXGI_FORMAT_R8G8_UNORM = 49,
	DXGI_FORMAT_R8G8_UINT = 50,
	DXGI_FORMAT_R8G8_SNORM = 51,
	DXGI_FORMAT_R8G8_SINT = 52,
	DXGI_FORMAT_R16_TYPELESS = 53,
	DXGI_FORMAT_R16_FLOAT = 54,
	DXGI_FORMAT_D16_UNORM = 55,
	DXGI_FORMAT_R16_UNORM = 56,
	DXGI_FORMAT_R16_UINT = 57,
	DXGI_FORMAT_R16_SNORM = 58,
	DXGI_FORMAT_R16_SINT = 59,
	DXGI_FORMAT_R8_TYPELESS = 60,
	DXGI_FORMAT_R8_UNORM = 61,
	DXGI_FORMAT_R8_UINT = 62,
	DXGI_FORMAT_R8_SNORM = 63,
	DXGI_FORMAT_R8_SINT = 64,
	DXGI_FORMAT_A8_UNORM = 65,
	DXGI_FORMAT_R1_UNORM = 66,
	DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
	DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
	DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
	DXGI_FORMAT_BC1_TYPELESS = 70,
	DXGI_FORMAT_BC1_UNORM = 71,
	DXGI_FORMAT_BC1_UNORM_SRGB = 72,
	DXGI_FORMAT_BC2_TYPELESS = 73,
	DXGI_FORMAT_BC2_UNORM = 74,
	DXGI_FORMAT_BC2_UNORM_SRGB = 75,
	DXGI_FORMAT_BC3_TYPELESS = 76,
	DXGI_FORMAT_BC3_UNORM = 77,
	DXGI_FORMAT_BC3_UNORM_SRGB = 78,
	DXGI_FORMAT_BC4_TYPELESS = 79,
	DXGI_FORMAT_BC4_UNORM = 80,
	DXGI_FORMAT_BC4_SNORM = 81,
	DXGI_FORMAT_BC5_TYPELESS = 82,
	DXGI_FORMAT_BC5_UNORM = 83,
	DXGI_FORMAT_BC5_SNORM = 84,
	DXGI_FORMAT_B5G6R5_UNORM = 85,
	DXGI_FORMAT_B5G5R5A1_UNORM = 86,
	DXGI_FORMAT_B8G8R8A8_UNORM = 87,
	DXGI_FORMAT_B8G8R8X8_UNORM = 88,
	DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
	DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
	DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
	DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
	DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
	DXGI_FORMAT_BC6H_TYPELESS = 94,
	DXGI_FORMAT_BC6H_UF16 = 95,
	DXGI_FORMAT_BC6H_SF16 = 96,
	DXGI_FORMAT_BC7_TYPELESS = 97,
	DXGI_FORMAT_BC7_UNORM = 98,
	DXGI_FORMAT_BC7_UNORM_SRGB = 99,

	DXGI_FORMAT_EAC_R11_TYPELESS = 100,
	DXGI_FORMAT_EAC_R11_UNORM = 101,
	DXGI_FORMAT_EAC_R11_SNORM = 102,
	DXGI_FORMAT_EAC_RG11_TYPELESS = 103,
	DXGI_FORMAT_EAC_RG11_UNORM = 104,
	DXGI_FORMAT_EAC_RG11_SNORM = 105,
	DXGI_FORMAT_ETC2_TYPELESS = 106,
	DXGI_FORMAT_ETC2_UNORM = 107,
	DXGI_FORMAT_ETC2_UNORM_SRGB = 108,
	DXGI_FORMAT_ETC2A_TYPELESS = 109,
	DXGI_FORMAT_ETC2A_UNORM = 110,
	DXGI_FORMAT_ETC2A_UNORM_SRGB = 111,

	DXGI_FORMAT_ASTC_4x4_TYPELESS = 112,
	DXGI_FORMAT_ASTC_4x4_UNORM = 113,
	DXGI_FORMAT_ASTC_4x4_UNORM_SRGB = 114,
	DXGI_FORMAT_ASTC_4x4_UINT = 115,

	DXGI_FORMAT_S8_UINT = 116,
	DXGI_FORMAT_D16_UNORM_S8_UINT = 117,
	DXGI_FORMAT_R16G8X8_TYPELESS = 118,
	DXGI_FORMAT_D24_UNORM = 119,
	DXGI_FORMAT_R24X8_TYPELESS = 120,

	DXGI_FORMAT_R4G4_UNORM = 121,
	DXGI_FORMAT_R4G4B4A4_UNORM = 122,
	DXGI_FORMAT_B4G4R4A4_UNORM = 123,


	DXGI_FORMAT_FORCE_UINT = 0xffffffff
} DXGI_FORMAT;

#define DXGI_FORMAT_DEFINED 1

#if !VK_USE_DXGI

enum DXGI_MODE_SCANLINE_ORDER
{
	DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED = 0,
	DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE = 1,
	DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST = 2,
	DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST = 3
};

enum DXGI_MODE_SCALING
{
	DXGI_MODE_SCALING_UNSPECIFIED = 0,
	DXGI_MODE_SCALING_CENTERED = 1,
	DXGI_MODE_SCALING_STRETCHED = 2
};

enum DXGI_MODE_ROTATION
{
	DXGI_MODE_ROTATION_UNSPECIFIED = 0,
	DXGI_MODE_ROTATION_IDENTITY = 1,
	DXGI_MODE_ROTATION_ROTATE90 = 2,
	DXGI_MODE_ROTATION_ROTATE180 = 3,
	DXGI_MODE_ROTATION_ROTATE270 = 4
};


enum DXGI_USAGE
{
	DXGI_CPU_ACCESS_NONE = 0,
	DXGI_CPU_ACCESS_DYNAMIC = 1,
	DXGI_CPU_ACCESS_READ_WRITE = 2,
	DXGI_CPU_ACCESS_SCRATCH = 3,
	DXGI_CPU_ACCESS_FIELD = 15,
	DXGI_USAGE_SHADER_INPUT = 1L << 4,
	DXGI_USAGE_RENDER_TARGET_OUTPUT = 1L << 5,
	DXGI_USAGE_BACK_BUFFER = 1L << 6,
	DXGI_USAGE_SHARED = 1L << 7,
	DXGI_USAGE_READ_ONLY = 1L << 8,
};

enum DXGI_SWAP_EFFECT
{
	DXGI_SWAP_EFFECT_DISCARD = 0,
	DXGI_SWAP_EFFECT_SEQUENTIAL = 1,
	DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL = 3,
	DXGI_SWAP_EFFECT_FLIP_DISCARD = 4
};

enum DXGI_SWAP_CHAIN_FLAG
{
	DXGI_SWAP_CHAIN_FLAG_NONPREROTATED = 1,
	DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH = 2
};

struct DXGI_SAMPLE_DESC
{
	uint32 Count;
	uint32 Quality;
};

struct DXGI_RATIONAL
{
	uint32 Numerator;
	uint32 Denominator;
};

struct DXGI_MODE_DESC
{
	uint32                   Width;
	uint32                   Height;
	DXGI_RATIONAL            RefreshRate;
	DXGI_FORMAT              Format;
	DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
	DXGI_MODE_SCALING        Scaling;
};

struct DXGI_SWAP_CHAIN_DESC
{
	DXGI_MODE_DESC     BufferDesc;
	DXGI_SAMPLE_DESC   SampleDesc;
	uint32             BufferUsage;
	uint32             BufferCount;
	uint32             MaxFrameLatency;
	HWND               OutputWindow;
	int                Windowed;
	DXGI_SWAP_EFFECT   SwapEffect;
	DXGI_MODE_ROTATION BufferRotation;
	uint32             Flags;
};

struct DXGI_SURFACE_DESC
{
	uint32           Width;
	uint32           Height;
	DXGI_FORMAT      Format;
	DXGI_SAMPLE_DESC SampleDesc;
};

typedef struct DXGI_OUTPUT_DESC
{
	char               DeviceName[32];
	RECT               DesktopCoordinates;
	int                AttachedToDesktop;
	DXGI_MODE_ROTATION Rotation;
	HMONITOR           Monitor;
} DXGI_OUTPUT_DESC, * LPDXGI_OUTPUT_DESC;

struct DXGI_GAMMA_CONTROL_CAPABILITIES
{
	BOOL  ScaleAndOffsetSupported;
	float MaxConvertedValue;
	float MinConvertedValue;
	UINT  NumGammaControlPoints;
	float ControlPointPositions[1025];
};

enum DXGI_RESIDENCY
{
	DXGI_RESIDENCY_FULLY_RESIDENT            = 1,
	DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY = 2,
	DXGI_RESIDENCY_EVICTED_TO_DISK           = 3
};

struct DXGI_RGB
{
	float Red;
	float Green;
	float Blue;
};

struct DXGI_GAMMA_CONTROL
{
	DXGI_RGB Scale;
	DXGI_RGB Offset;
	DXGI_RGB GammaCurve[1025];
};

struct DXGI_SHARED_RESOURCE
{
	uint32 Handle;
};

//--------------------------
typedef struct DXGI_MAPPED_RECT
{
	int32  Pitch;
	uint8* pBits;
}   DXGI_MAPPED_RECT;

class IDXGISurface
{
public:
	virtual ~IDXGISurface() {}
	virtual HRESULT STDMETHODCALLTYPE GetDesc(DXGI_SURFACE_DESC* pDesc) = 0;
	virtual HRESULT STDMETHODCALLTYPE Map(DXGI_MAPPED_RECT* pLockedRect, UINT MapFlags) = 0;
	virtual HRESULT STDMETHODCALLTYPE Unmap(void) = 0;
};

typedef struct DXGI_ADAPTER_DESC
{
	WCHAR  Description[128];
	UINT   VendorId;
	UINT   DeviceId;
	UINT   SubSysId;
	UINT   Revision;
	SIZE_T DedicatedVideoMemory;
	SIZE_T DedicatedSystemMemory;
	SIZE_T SharedSystemMemory;
	LUID   AdapterLuid;
}   DXGI_ADAPTER_DESC;

typedef struct DXGI_ADAPTER_DESC1
{
	WCHAR  Description[128];
	UINT   VendorId;
	UINT   DeviceId;
	UINT   SubSysId;
	UINT   Revision;
	SIZE_T DedicatedVideoMemory;
	SIZE_T DedicatedSystemMemory;
	SIZE_T SharedSystemMemory;
	LUID   AdapterLuid;
	UINT   Flags;
}   DXGI_ADAPTER_DESC1;


#endif

struct D3D11_SHADER_INPUT_BIND_DESC
{
	const char*                Name;
	//	char				   TmpName[256];
	D3D_SHADER_INPUT_TYPE      Type;
	uint32                     BindPoint;
	uint32                     BindCount;
	uint32                     uFlags;
	D3D11_RESOURCE_RETURN_TYPE ReturnType;
	D3D10_SRV_DIMENSION        Dimension;
	uint32                     NumSamples;
};

struct D3D11_SHADER_DESC
{
	uint32 Version;
	char*  Creator;
	uint32 Flags;
	uint32 ConstantBuffers;
	uint32 BoundResources;
	uint32 InputParameters;
	uint32 OutputParameters;
	uint32 InstructionCount;
	uint32 TempRegisterCount;
};

struct D3DGAMMARAMP
{
	uint16 red[256];
	uint16 green[256];
	uint16 blue[256];
};

struct D3D11_SIGNATURE_PARAMETER_DESC
{
	const char*                   SemanticName;
	uint32                        SemanticIndex;
	uint32                        Register;
	D3D10_NAME                    SystemValueType;
	D3D11_REGISTER_COMPONENT_TYPE ComponentType;
	uint8                         Mask;
	uint8                         ReadWriteMask;
	uint8                         AttributeLocation;
};

struct D3DPRESENT_PARAMETERS
{
	uint32              BackBufferWidth, BackBufferHeight;
	D3DFORMAT           BackBufferFormat;
	uint32              BackBufferCount;
	D3DMULTISAMPLE_TYPE MultiSampleType;
	uint32              MultiSampleQuality;
	D3DSWAPEFFECT       SwapEffect;
	uint32              hDeviceWindow;
	uint32              Windowed;
	uint32              EnableAutoDepthStencil;
	D3DFORMAT           AutoDepthStencilFormat;
	uint32              Flags;
	uint32              FullScreen_RefreshRateInHz;
	uint32              PresentationInterval;
};

#ifndef D3DCOLORVALUE_DEFINED
typedef struct _D3DCOLORVALUE
{
	float r;
	float g;
	float b;
	float a;
} D3DCOLORVALUE;
#define D3DCOLORVALUE_DEFINED
#endif

typedef
  enum _D3D_CBUFFER_TYPE
{
	D3D_CT_CBUFFER              = 0,
	D3D_CT_TBUFFER              = (D3D_CT_CBUFFER + 1),
	D3D_CT_INTERFACE_POINTERS   = (D3D_CT_TBUFFER + 1),
	D3D_CT_RESOURCE_BIND_INFO   = (D3D_CT_INTERFACE_POINTERS + 1),
	D3D10_CT_CBUFFER            = D3D_CT_CBUFFER,
	D3D10_CT_TBUFFER            = D3D_CT_TBUFFER,
	D3D11_CT_CBUFFER            = D3D_CT_CBUFFER,
	D3D11_CT_TBUFFER            = D3D_CT_TBUFFER,
	D3D11_CT_INTERFACE_POINTERS = D3D_CT_INTERFACE_POINTERS,
	D3D11_CT_RESOURCE_BIND_INFO = D3D_CT_RESOURCE_BIND_INFO
}   D3D_CBUFFER_TYPE;

typedef
  enum _D3D_SHADER_VARIABLE_CLASS
{
	D3D_SVC_SCALAR              = 0,
	D3D_SVC_VECTOR              = (D3D_SVC_SCALAR + 1),
	D3D_SVC_MATRIX_ROWS         = (D3D_SVC_VECTOR + 1),
	D3D_SVC_MATRIX_COLUMNS      = (D3D_SVC_MATRIX_ROWS + 1),
	D3D_SVC_OBJECT              = (D3D_SVC_MATRIX_COLUMNS + 1),
	D3D_SVC_STRUCT              = (D3D_SVC_OBJECT + 1),
	D3D_SVC_INTERFACE_CLASS     = (D3D_SVC_STRUCT + 1),
	D3D_SVC_INTERFACE_POINTER   = (D3D_SVC_INTERFACE_CLASS + 1),
	D3D10_SVC_SCALAR            = D3D_SVC_SCALAR,
	D3D10_SVC_VECTOR            = D3D_SVC_VECTOR,
	D3D10_SVC_MATRIX_ROWS       = D3D_SVC_MATRIX_ROWS,
	D3D10_SVC_MATRIX_COLUMNS    = D3D_SVC_MATRIX_COLUMNS,
	D3D10_SVC_OBJECT            = D3D_SVC_OBJECT,
	D3D10_SVC_STRUCT            = D3D_SVC_STRUCT,
	D3D11_SVC_INTERFACE_CLASS   = D3D_SVC_INTERFACE_CLASS,
	D3D11_SVC_INTERFACE_POINTER = D3D_SVC_INTERFACE_POINTER,
	D3D_SVC_FORCE_DWORD         = 0x7fffffff
}   D3D_SHADER_VARIABLE_CLASS;

typedef
  enum _D3D_SHADER_VARIABLE_TYPE
{
	D3D_SVT_VOID                        = 0,
	D3D_SVT_BOOL                        = 1,
	D3D_SVT_INT                         = 2,
	D3D_SVT_FLOAT                       = 3,
	D3D_SVT_STRING                      = 4,
	D3D_SVT_TEXTURE                     = 5,
	D3D_SVT_TEXTURE1D                   = 6,
	D3D_SVT_TEXTURE2D                   = 7,
	D3D_SVT_TEXTURE3D                   = 8,
	D3D_SVT_TEXTURECUBE                 = 9,
	D3D_SVT_SAMPLER                     = 10,
	D3D_SVT_SAMPLER1D                   = 11,
	D3D_SVT_SAMPLER2D                   = 12,
	D3D_SVT_SAMPLER3D                   = 13,
	D3D_SVT_SAMPLERCUBE                 = 14,
	D3D_SVT_PIXELSHADER                 = 15,
	D3D_SVT_VERTEXSHADER                = 16,
	D3D_SVT_PIXELFRAGMENT               = 17,
	D3D_SVT_VERTEXFRAGMENT              = 18,
	D3D_SVT_UINT                        = 19,
	D3D_SVT_UINT8                       = 20,
	D3D_SVT_GEOMETRYSHADER              = 21,
	D3D_SVT_RASTERIZER                  = 22,
	D3D_SVT_DEPTHSTENCIL                = 23,
	D3D_SVT_BLEND                       = 24,
	D3D_SVT_BUFFER                      = 25,
	D3D_SVT_CBUFFER                     = 26,
	D3D_SVT_TBUFFER                     = 27,
	D3D_SVT_TEXTURE1DARRAY              = 28,
	D3D_SVT_TEXTURE2DARRAY              = 29,
	D3D_SVT_RENDERTARGETVIEW            = 30,
	D3D_SVT_DEPTHSTENCILVIEW            = 31,
	D3D_SVT_TEXTURE2DMS                 = 32,
	D3D_SVT_TEXTURE2DMSARRAY            = 33,
	D3D_SVT_TEXTURECUBEARRAY            = 34,
	D3D_SVT_HULLSHADER                  = 35,
	D3D_SVT_DOMAINSHADER                = 36,
	D3D_SVT_INTERFACE_POINTER           = 37,
	D3D_SVT_COMPUTESHADER               = 38,
	D3D_SVT_DOUBLE                      = 39,
	D3D_SVT_RWTEXTURE1D                 = 40,
	D3D_SVT_RWTEXTURE1DARRAY            = 41,
	D3D_SVT_RWTEXTURE2D                 = 42,
	D3D_SVT_RWTEXTURE2DARRAY            = 43,
	D3D_SVT_RWTEXTURE3D                 = 44,
	D3D_SVT_RWBUFFER                    = 45,
	D3D_SVT_BYTEADDRESS_BUFFER          = 46,
	D3D_SVT_RWBYTEADDRESS_BUFFER        = 47,
	D3D_SVT_STRUCTURED_BUFFER           = 48,
	D3D_SVT_RWSTRUCTURED_BUFFER         = 49,
	D3D_SVT_APPEND_STRUCTURED_BUFFER    = 50,
	D3D_SVT_CONSUME_STRUCTURED_BUFFER   = 51,
	D3D_SVT_MIN8FLOAT                   = 52,
	D3D_SVT_MIN10FLOAT                  = 53,
	D3D_SVT_MIN16FLOAT                  = 54,
	D3D_SVT_MIN12INT                    = 55,
	D3D_SVT_MIN16INT                    = 56,
	D3D_SVT_MIN16UINT                   = 57,
	D3D10_SVT_VOID                      = D3D_SVT_VOID,
	D3D10_SVT_BOOL                      = D3D_SVT_BOOL,
	D3D10_SVT_INT                       = D3D_SVT_INT,
	D3D10_SVT_FLOAT                     = D3D_SVT_FLOAT,
	D3D10_SVT_STRING                    = D3D_SVT_STRING,
	D3D10_SVT_TEXTURE                   = D3D_SVT_TEXTURE,
	D3D10_SVT_TEXTURE1D                 = D3D_SVT_TEXTURE1D,
	D3D10_SVT_TEXTURE2D                 = D3D_SVT_TEXTURE2D,
	D3D10_SVT_TEXTURE3D                 = D3D_SVT_TEXTURE3D,
	D3D10_SVT_TEXTURECUBE               = D3D_SVT_TEXTURECUBE,
	D3D10_SVT_SAMPLER                   = D3D_SVT_SAMPLER,
	D3D10_SVT_SAMPLER1D                 = D3D_SVT_SAMPLER1D,
	D3D10_SVT_SAMPLER2D                 = D3D_SVT_SAMPLER2D,
	D3D10_SVT_SAMPLER3D                 = D3D_SVT_SAMPLER3D,
	D3D10_SVT_SAMPLERCUBE               = D3D_SVT_SAMPLERCUBE,
	D3D10_SVT_PIXELSHADER               = D3D_SVT_PIXELSHADER,
	D3D10_SVT_VERTEXSHADER              = D3D_SVT_VERTEXSHADER,
	D3D10_SVT_PIXELFRAGMENT             = D3D_SVT_PIXELFRAGMENT,
	D3D10_SVT_VERTEXFRAGMENT            = D3D_SVT_VERTEXFRAGMENT,
	D3D10_SVT_UINT                      = D3D_SVT_UINT,
	D3D10_SVT_UINT8                     = D3D_SVT_UINT8,
	D3D10_SVT_GEOMETRYSHADER            = D3D_SVT_GEOMETRYSHADER,
	D3D10_SVT_RASTERIZER                = D3D_SVT_RASTERIZER,
	D3D10_SVT_DEPTHSTENCIL              = D3D_SVT_DEPTHSTENCIL,
	D3D10_SVT_BLEND                     = D3D_SVT_BLEND,
	D3D10_SVT_BUFFER                    = D3D_SVT_BUFFER,
	D3D10_SVT_CBUFFER                   = D3D_SVT_CBUFFER,
	D3D10_SVT_TBUFFER                   = D3D_SVT_TBUFFER,
	D3D10_SVT_TEXTURE1DARRAY            = D3D_SVT_TEXTURE1DARRAY,
	D3D10_SVT_TEXTURE2DARRAY            = D3D_SVT_TEXTURE2DARRAY,
	D3D10_SVT_RENDERTARGETVIEW          = D3D_SVT_RENDERTARGETVIEW,
	D3D10_SVT_DEPTHSTENCILVIEW          = D3D_SVT_DEPTHSTENCILVIEW,
	D3D10_SVT_TEXTURE2DMS               = D3D_SVT_TEXTURE2DMS,
	D3D10_SVT_TEXTURE2DMSARRAY          = D3D_SVT_TEXTURE2DMSARRAY,
	D3D10_SVT_TEXTURECUBEARRAY          = D3D_SVT_TEXTURECUBEARRAY,
	D3D11_SVT_HULLSHADER                = D3D_SVT_HULLSHADER,
	D3D11_SVT_DOMAINSHADER              = D3D_SVT_DOMAINSHADER,
	D3D11_SVT_INTERFACE_POINTER         = D3D_SVT_INTERFACE_POINTER,
	D3D11_SVT_COMPUTESHADER             = D3D_SVT_COMPUTESHADER,
	D3D11_SVT_DOUBLE                    = D3D_SVT_DOUBLE,
	D3D11_SVT_RWTEXTURE1D               = D3D_SVT_RWTEXTURE1D,
	D3D11_SVT_RWTEXTURE1DARRAY          = D3D_SVT_RWTEXTURE1DARRAY,
	D3D11_SVT_RWTEXTURE2D               = D3D_SVT_RWTEXTURE2D,
	D3D11_SVT_RWTEXTURE2DARRAY          = D3D_SVT_RWTEXTURE2DARRAY,
	D3D11_SVT_RWTEXTURE3D               = D3D_SVT_RWTEXTURE3D,
	D3D11_SVT_RWBUFFER                  = D3D_SVT_RWBUFFER,
	D3D11_SVT_BYTEADDRESS_BUFFER        = D3D_SVT_BYTEADDRESS_BUFFER,
	D3D11_SVT_RWBYTEADDRESS_BUFFER      = D3D_SVT_RWBYTEADDRESS_BUFFER,
	D3D11_SVT_STRUCTURED_BUFFER         = D3D_SVT_STRUCTURED_BUFFER,
	D3D11_SVT_RWSTRUCTURED_BUFFER       = D3D_SVT_RWSTRUCTURED_BUFFER,
	D3D11_SVT_APPEND_STRUCTURED_BUFFER  = D3D_SVT_APPEND_STRUCTURED_BUFFER,
	D3D11_SVT_CONSUME_STRUCTURED_BUFFER = D3D_SVT_CONSUME_STRUCTURED_BUFFER,
	D3D_SVT_FORCE_DWORD                 = 0x7fffffff
}   D3D_SHADER_VARIABLE_TYPE;

typedef struct _D3D11_SHADER_BUFFER_DESC
{
	LPCSTR           Name;                  // Name of the constant buffer
	D3D_CBUFFER_TYPE Type;                  // Indicates type of buffer content
	UINT             Variables;             // Number of member variables
	UINT             Size;                  // Size of CB (in bytes)
	UINT             uFlags;                // Buffer description flags
} D3D11_SHADER_BUFFER_DESC;

typedef struct _D3D11_SHADER_VARIABLE_DESC
{
	LPCSTR Name;                            // Name of the variable
	UINT   StartOffset;                     // Offset in constant buffer's backing store
	UINT   Size;                            // Size of variable (in bytes)
	UINT   uFlags;                          // Variable flags
	LPVOID DefaultValue;                    // Raw pointer to default value
	UINT   StartTexture;                    // First texture index (or -1 if no textures used)
	UINT   TextureSize;                     // Number of texture slots possibly used.
	UINT   StartSampler;                    // First sampler index (or -1 if no textures used)
	UINT   SamplerSize;                     // Number of sampler slots possibly used.
} D3D11_SHADER_VARIABLE_DESC;

typedef struct _D3D11_SHADER_TYPE_DESC
{
	D3D_SHADER_VARIABLE_CLASS Class;            // Variable class (e.g. object, matrix, etc.)
	D3D_SHADER_VARIABLE_TYPE  Type;             // Variable type (e.g. float, sampler, etc.)
	UINT                      Rows;             // Number of rows (for matrices, 1 for other numeric, 0 if not applicable)
	UINT                      Columns;          // Number of columns (for vectors & matrices, 1 for other numeric, 0 if not applicable)
	UINT                      Elements;         // Number of elements (0 if not an array)
	UINT                      Members;          // Number of members (0 if not a structure)
	UINT                      Offset;           // Offset from the start of structure (0 if not a structure member)
	LPCSTR                    Name;             // Name of type, can be NULL
} D3D11_SHADER_TYPE_DESC;

typedef struct _D3D_SHADER_MACRO
{
	LPCSTR Name;
	LPCSTR Definition;
}   D3D_SHADER_MACRO;

typedef
  enum _D3D_INCLUDE_TYPE
{
	D3D_INCLUDE_LOCAL       = 0,
	D3D_INCLUDE_SYSTEM      = (D3D_INCLUDE_LOCAL + 1),
	D3D10_INCLUDE_LOCAL     = D3D_INCLUDE_LOCAL,
	D3D10_INCLUDE_SYSTEM    = D3D_INCLUDE_SYSTEM,
	D3D_INCLUDE_FORCE_DWORD = 0x7fffffff
}   D3D_INCLUDE_TYPE;

struct ID3DInclude
{
	virtual HRESULT STDMETHODCALLTYPE Open(D3D_INCLUDE_TYPE IncludeType, LPCSTR pFileName, LPCVOID pParentData, LPCVOID* ppData, UINT* pBytes) = 0;
	virtual HRESULT STDMETHODCALLTYPE Open(LPCVOID pData) = 0;
};