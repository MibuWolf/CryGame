# Copyright 2001-2017 Crytek GmbH / Crytek Group. All rights reserved. 
import os
from waflib.TaskGen import after_method, feature
from waflib import Logs


def build(bld):
	additional_defines = []

	if not os.path.isdir(Path('Code/SDKs/NVIDIA/NVAPI_r386')):
		Logs.warn('[WARNING] NVAPI SDK v.386 not found, excluding from the build.')
		additional_defines += ['EXCLUDE_NV_API']

	if not os.path.isdir(Path('Code/SDKs/AMD')):
		Logs.warn('[WARNING] AMD AGS SDK not found, excluding from the build.')
		additional_defines += ['EXCLUDE_AMD_API']

	bld.CryEngineModule(
		target      = 'CryRenderD3D11',
		vs_filter   = 'CryEngine',
		
		file_list   = [ 'core_renderer.waf_files' ],
		pch         = '../StdAfx.cpp',
		includes    = [ '..', Path('Code/SDKs/squish-ccr') ],
		use_module  = [ 'lzma', 'lzss', 'lz4', 'zlib' ],
		features    = [ 'copy_d3d_compiler' ],

		win_features    = [ 'copy_d3d_compiler' ],
		win_file_list   = [ 'dx11_renderer.waf_files', 'mesh_baker.waf_files' ],
		win_defines     = [ 'CRY_RENDERER_DIRECT3D=110', 'DO_RENDERSTATS', '_RENDERER' ] + additional_defines,
		win_lib         = [ 'dxguid', 'd3d11', 'd3d10', 'd3dcompiler', 'Ole32', 'Gdi32', 'wininet', 'Shell32' ],
		win_linkflags   = [ '/NODEFAULTLIB:libcmt.lib' ], ## AMD AGS static lib references this
		win_use_module  = [ 'png16' ],

		durango_file_list  = [ 'durango_renderer.waf_files', 'mesh_baker.waf_files' ],
		durango_defines    = [ 'CRY_RENDERER_DIRECT3D=111', 'DO_RENDERSTATS', '_RENDERER' ] + additional_defines,
		durango_lib        = [ 'ws2_32', 'SmartGlassInterop', 'd3dcompiler', 'dxguid', 'xg_x', 'uuid', 'kernelx' ],

		orbis_file_list    = [ 'orbis_renderer.waf_files' ],
		orbis_defines      = [ 'CRY_RENDERER_DIRECT3D=111', 'DO_RENDERSTATS', '_RENDERER' ] + additional_defines,
		orbis_lib          = [ 'SceSystemService_stub_weak', 'SceGnmDriver_stub_weak' ],
		orbis_includes     = [ '../../..' ],

		# LTO on orbis renderer + gnm in performance/release
		orbis_performance_cxxflags = '-flto',
		orbis_release_cxxflags = '-flto',
		orbis_debug_lib = [ 'SceGnm', 'SceGnmx' ],
		orbis_profile_lib = [ 'SceGnm', 'SceGnmx' ],
		orbis_performance_lib = [ 'SceGnm_lto', 'SceGnmx_lto' ],
		orbis_release_lib = [ 'SceGnm_lto', 'SceGnmx_lto' ],
	)

	bld.CryEngineModule(
		target      = 'CryRenderOpenGL',
		vs_filter   = 'CryEngine',

		file_list   = [ 'core_renderer.waf_files', 'opengl_renderer.waf_files' ],
		pch         = '../StdAfx.cpp',
		includes    = [ '..', Path('Code/SDKs/squish-ccr') ],
		defines     = [ 'CRY_RENDERER_DIRECT3D=110', 'DO_RENDERSTATS', '_RENDERER' ] + additional_defines,
		use_module  = [ 'lzma', 'lzss', 'lz4', 'zlib' ],
		module_extensions = [ 'sdl2', 'sdl2_ext' ],
		

		win_file_list    = ['mesh_baker.waf_files', 'opengl_loader_gl.waf_files', 'opengl_loader_wgl.waf_files' ],
		win_includes     = [ Path('Code/SDKs/squish-ccr'), Path('Code/Tools/LibTIFF'), Path('Code/Tools/HLSLCrossCompiler/include') ],
		win_lib          = ['opengl32', 'winmm', 'Ole32', 'Gdi32', 'wininet', 'Shell32', 'libHLSLcc'  ],
		win_libpath      = [ Path('Code/Tools/HLSLCrossCompiler/lib/win64') ],
		win_linkflags    = [ '/NODEFAULTLIB:libcmt.lib' ], ## AMD AGS static lib references this
		win_use_module   = [ 'png16' ],
		win_defines      = ['CRY_RENDERER_OPENGL=440'],
		
		darwin_file_list = ['mesh_baker.waf_files' ],
		darwin_includes  = [ Path('Code/SDKs/SDL2/include/SDL'), Path('Code/SDKs/SDL2/include/mac'), Path('Code/Tools/HLSLCrossCompiler/include') ],
		darwin_lib       = ['HLSLcc' ],
		darwin_libpath   = [ Path('Code/Tools/HLSLCrossCompiler/lib/mac') ],
		darwin_framework = ['OpenGL', 'ApplicationServices', 'IOKit' ],
		darwin_defines   = ['CRY_RENDERER_OPENGL=440'],

		linux_file_list    = ['mesh_baker.waf_files', 'opengl_loader_gl.waf_files', 'opengl_loader_glx.waf_files' ],
		linux_lib          = ['HLSLcc' ],
		linux_includes     = [ Path('Code/Tools/HLSLCrossCompiler/include') ],
		linux_x64_libpath  = [ Path('Code/Tools/HLSLCrossCompiler/lib/linux')],
		linux_defines      = ['CRY_RENDERER_OPENGL=440'],
				
		android_file_list  = ['mesh_baker.waf_files', 'opengl_loader_gles2.waf_files', 'opengl_loader_egl.waf_files' ],
		android_includes   = [ Path('Code/Tools/HLSLCrossCompiler/include') ],
		android_defines    = ['GLEW_MX', 'OPENGL_ES', 'CRY_RENDERER_OPENGLES=310'],
		android_lib        = ['EGL', 'GLESv1_CM', 'GLESv2', 'GLESv3']
	)

	# CryRenderD3D12 can only be built using VS 2015.
	min_msvc_version = '14.0'
	min_winsdk_version = '10.0.14393.0'
	
	build_d3d12_msvc_check = bld.env and bld.env['MSVC_VERSION'] and (bld.ToVersionNumbers(bld.env['MSVC_VERSION']) >= bld.ToVersionNumbers(min_msvc_version))
	build_d3d12_winsdk_check = bld.env and bld.env['WINSDK_VERSION'] and (bld.ToVersionNumbers(bld.env['WINSDK_VERSION']) >= bld.ToVersionNumbers(min_winsdk_version))
	parse_d3d12 = ('build' not in bld.cmd)

	if build_d3d12_msvc_check and build_d3d12_winsdk_check or parse_d3d12:
		bld.CryEngineModule(
			target      = 'CryRenderD3D12',
			vs_filter   = 'CryEngine',
			
			file_list   = [ 'core_renderer.waf_files', 'dx12_renderer.waf_files' ],
			pch        = '../StdAfx.cpp',
			includes    = [ '..', Path('Code/SDKs'), Path('Code/SDKs/squish-ccr') ],
			use_module  = [ 'lzma', 'lzss', 'lz4', 'zlib' ],

			win_features     = ['copy_d3d_compiler' ],
			win_file_list    = ['mesh_baker.waf_files' ],
			win_defines      = ['CRY_RENDERER_DIRECT3D=120', 'DO_RENDERSTATS', '_RENDERER' ] + additional_defines,
			win_includes     = [ Path('Code/Tools/LibTIFF'), Path('Code/CryEngine/RenderDll/XRenderD3D9/DX12/Includes') ],
			win_lib          = [ 'dxguid', 'd3d12', 'dxgi', 'd3dcompiler', 'Ole32', 'Gdi32', 'wininet', 'Shell32' ],
			win_linkflags    = [ '/NODEFAULTLIB:libcmt.lib' ], ## AMD AGS static lib references this
			win_use_module   = [ 'png16' ],
			
			durango_file_list  = [ 'durango_renderer.waf_files' ],
			durango_defines    = [ 'CRY_RENDERER_DIRECT3D=120', 'DO_RENDERSTATS', '_RENDERER' ] + additional_defines,
			durango_lib        = [ 'ws2_32', 'SmartGlassInterop', 'd3dcompiler', 'dxguid', 'xg_x', 'uuid', 'kernelx' ],

			# additional_settings = Settings( files = '../Common/lzss.cpp', disable_pch = True )
		)
	else:
		if not build_d3d12_msvc_check:
			bld.cry_warning('CryRenderD3D12 not build. Requires MSVC %s or newer. Current installed: %s' % (min_msvc_version, bld.env['MSVC_VERSION']))

		if not build_d3d12_winsdk_check:
			bld.cry_warning('CryRenderD3D12 not build. Requires WINDSDK %s or newer - Current installed: %s' % (min_winsdk_version, bld.env['WINSDK_VERSION']))

	# GNM backend may not be available, so check here
	if os.path.isdir(Path('Code/SDKs/Orbis')) and os.path.isdir(Path('Code/CryEngine/RenderDll/XRenderD3D9/GNM')):
		bld.CryEngineModule(
			target      = 'CryRenderGNM',
			vs_filter   = 'CryEngine',
			file_list   = [ 'core_renderer.waf_files', 'GNM/GnmRenderer.waf_files' ],
			pch        = '../StdAfx.cpp',
			defines     = [ 'CRY_RENDERER_GNM=40', '_RENDERER', 'DO_RENDERSTATS' ] + additional_defines,
			lib         = [ 'SceSystemService_stub_weak', 'SceGnmDriver_stub_weak' ],
			includes    = [ '..' ],
			use_module  = [ 'lzma', 'lzss', 'lz4', 'zlib' ],

			performance_cxxflags = '-flto',
			release_cxxflags     = '-flto',
			debug_lib            = [ 'SceGnm', 'SceGnmx', 'SceDbg_stub_weak' ],
			profile_lib          = [ 'SceGnm', 'SceGnmx', 'SceDbg_stub_weak' ],
			performance_lib      = [ 'SceGnm_lto', 'SceGnmx_lto' ],
			release_lib          = [ 'SceGnm_lto', 'SceGnmx_lto' ],
		)
	
	bld.CryEngineModule(
		target      = 'CryRenderVulkan',
		vs_filter   = 'CryEngine',

		file_list   = ['core_renderer.waf_files', 'Vulkan/vulkan_renderer.waf_files'],
		pch         = '../StdAfx.cpp',
		includes    = [ '..', Path('Code/SDKs/squish-ccr'), Path('Code/SDKs/VulkanSDK/Include') ],
		defines     = [ 'CRY_RENDERER_VULKAN=10', 'DO_RENDERSTATS', '_RENDERER' ] ,
		use_module  = [ 'lzma', 'lzss', 'lz4', 'zlib', 'spirv-cross' ],
		module_extensions = [ 'sdl2', 'sdl2_ext' ],
		
		android_cxxflags = ['-fms-extensions', '-D_MSC_EXTENSIONS=1'],

		win_file_list     = ['mesh_baker.waf_files'],
		win_lib           = ['Ole32', 'Gdi32', 'wininet', 'Shell32', 'dxguid', 'vulkan-1' ], 
		win_linkflags     = ['/NODEFAULTLIB:libcmt.lib' ], ## AMD AGS static lib references this
		win_libpath       = [ Path('Code/SDKs/VulkanSDK/Lib') ],
		win_use_module    = [ 'png16' ],

		android_file_list = ['mesh_baker.waf_files']
	)

