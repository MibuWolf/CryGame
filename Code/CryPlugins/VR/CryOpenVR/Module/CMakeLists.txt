#START-FILE-LIST
# File List auto generated by waf2cmake.py, do not modify manually.

start_sources()
# -- cryopenvr.waf_files --
sources_platform(ALL)
add_sources("CryOpenVR_uber_0.cpp"
	SOURCE_GROUP "Interface"
		"../Interface/IHmdOpenVRDevice.h"
		"../Interface/IOpenVRPlugin.h"
	SOURCE_GROUP "Root"
		"PluginDll.cpp"
		"PluginDll.h"
		"OpenVRController.cpp"
		"OpenVRController.h"
		"OpenVRDevice.cpp"
		"OpenVRDevice.h"
		"OpenVRResources.cpp"
		"OpenVRResources.h"
		"resource.h"
		"StdAfx.cpp"
		"StdAfx.h"
)

add_sources("NoUberFile"
	SOURCE_GROUP "Root"
		"StdAfx.cpp"
)

end_sources()
#END-FILE-LIST

if(WIN32 OR WIN64 OR APPLE OR LINUX)
	CryEngineModule(CryOpenVR PCH "StdAfx.cpp" SOLUTION_FOLDER "CryPlugins")

	target_include_directories( ${THIS_PROJECT}
	PRIVATE
		"${CRYENGINE_DIR}/Code/SDKs/OpenVR/headers"
		"${CRYENGINE_DIR}/Code/CryEngine/CryCommon"
	PUBLIC
		../Interface
	)

	if(WIN64)
		find_library(openvr_api openvr_api PATHS "${SDK_DIR}/OpenVR/lib/win64")
	elseif(WIN32)
		find_library(openvr_api openvr_api PATHS "${SDK_DIR}/OpenVR/lib/win32")
	elseif(APPLE)
		find_library(openvr_api openvr_api PATHS "${SDK_DIR}/OpenVR/lib/osx32")
	elseif(LINUX)
		find_library(openvr_api openvr_api PATHS "${SDK_DIR}/OpenVR/lib/linux64")
	endif()

	target_link_libraries(${THIS_PROJECT} PRIVATE "${openvr_api}")
	
	if(LINUX)
		target_compile_options(${THIS_PROJECT} PRIVATE -fPIC)
	endif()
endif()
